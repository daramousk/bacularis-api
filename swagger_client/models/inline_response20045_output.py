# coding: utf-8

"""
    Bacularis API

    This is the Bacularis API documentation.  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: marcin.haba@bacula.pl
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20045Output(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'first_index': 'int',
        'last_index': 'int',
        'volume': 'str',
        'inchanger': 'int'
    }

    attribute_map = {
        'first_index': 'first_index',
        'last_index': 'last_index',
        'volume': 'volume',
        'inchanger': 'inchanger'
    }

    def __init__(self, first_index=None, last_index=None, volume=None, inchanger=None):  # noqa: E501
        """InlineResponse20045Output - a model defined in Swagger"""  # noqa: E501
        self._first_index = None
        self._last_index = None
        self._volume = None
        self._inchanger = None
        self.discriminator = None
        if first_index is not None:
            self.first_index = first_index
        if last_index is not None:
            self.last_index = last_index
        if volume is not None:
            self.volume = volume
        if inchanger is not None:
            self.inchanger = inchanger

    @property
    def first_index(self):
        """Gets the first_index of this InlineResponse20045Output.  # noqa: E501


        :return: The first_index of this InlineResponse20045Output.  # noqa: E501
        :rtype: int
        """
        return self._first_index

    @first_index.setter
    def first_index(self, first_index):
        """Sets the first_index of this InlineResponse20045Output.


        :param first_index: The first_index of this InlineResponse20045Output.  # noqa: E501
        :type: int
        """

        self._first_index = first_index

    @property
    def last_index(self):
        """Gets the last_index of this InlineResponse20045Output.  # noqa: E501


        :return: The last_index of this InlineResponse20045Output.  # noqa: E501
        :rtype: int
        """
        return self._last_index

    @last_index.setter
    def last_index(self, last_index):
        """Sets the last_index of this InlineResponse20045Output.


        :param last_index: The last_index of this InlineResponse20045Output.  # noqa: E501
        :type: int
        """

        self._last_index = last_index

    @property
    def volume(self):
        """Gets the volume of this InlineResponse20045Output.  # noqa: E501


        :return: The volume of this InlineResponse20045Output.  # noqa: E501
        :rtype: str
        """
        return self._volume

    @volume.setter
    def volume(self, volume):
        """Sets the volume of this InlineResponse20045Output.


        :param volume: The volume of this InlineResponse20045Output.  # noqa: E501
        :type: str
        """

        self._volume = volume

    @property
    def inchanger(self):
        """Gets the inchanger of this InlineResponse20045Output.  # noqa: E501


        :return: The inchanger of this InlineResponse20045Output.  # noqa: E501
        :rtype: int
        """
        return self._inchanger

    @inchanger.setter
    def inchanger(self, inchanger):
        """Sets the inchanger of this InlineResponse20045Output.


        :param inchanger: The inchanger of this InlineResponse20045Output.  # noqa: E501
        :type: int
        """

        self._inchanger = inchanger

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20045Output, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20045Output):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
