# coding: utf-8

"""
    Bacularis API

    This is the Bacularis API documentation.  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: marcin.haba@bacula.pl
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class OAuth2Client(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'client_id': 'str',
        'client_secret': 'str',
        'redirect_uri': 'str',
        'scope': 'str',
        'bconsole_cfg_path': 'str',
        'name': 'str'
    }

    attribute_map = {
        'client_id': 'client_id',
        'client_secret': 'client_secret',
        'redirect_uri': 'redirect_uri',
        'scope': 'scope',
        'bconsole_cfg_path': 'bconsole_cfg_path',
        'name': 'name'
    }

    def __init__(self, client_id=None, client_secret=None, redirect_uri=None, scope=None, bconsole_cfg_path=None, name=None):  # noqa: E501
        """OAuth2Client - a model defined in Swagger"""  # noqa: E501
        self._client_id = None
        self._client_secret = None
        self._redirect_uri = None
        self._scope = None
        self._bconsole_cfg_path = None
        self._name = None
        self.discriminator = None
        if client_id is not None:
            self.client_id = client_id
        if client_secret is not None:
            self.client_secret = client_secret
        if redirect_uri is not None:
            self.redirect_uri = redirect_uri
        if scope is not None:
            self.scope = scope
        if bconsole_cfg_path is not None:
            self.bconsole_cfg_path = bconsole_cfg_path
        if name is not None:
            self.name = name

    @property
    def client_id(self):
        """Gets the client_id of this OAuth2Client.  # noqa: E501

        OAuth2 client identifier (Client ID)  # noqa: E501

        :return: The client_id of this OAuth2Client.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this OAuth2Client.

        OAuth2 client identifier (Client ID)  # noqa: E501

        :param client_id: The client_id of this OAuth2Client.  # noqa: E501
        :type: str
        """

        self._client_id = client_id

    @property
    def client_secret(self):
        """Gets the client_secret of this OAuth2Client.  # noqa: E501

        OAuth2 client secret  # noqa: E501

        :return: The client_secret of this OAuth2Client.  # noqa: E501
        :rtype: str
        """
        return self._client_secret

    @client_secret.setter
    def client_secret(self, client_secret):
        """Sets the client_secret of this OAuth2Client.

        OAuth2 client secret  # noqa: E501

        :param client_secret: The client_secret of this OAuth2Client.  # noqa: E501
        :type: str
        """

        self._client_secret = client_secret

    @property
    def redirect_uri(self):
        """Gets the redirect_uri of this OAuth2Client.  # noqa: E501

        Redirect URI (OAuth2 callback)  # noqa: E501

        :return: The redirect_uri of this OAuth2Client.  # noqa: E501
        :rtype: str
        """
        return self._redirect_uri

    @redirect_uri.setter
    def redirect_uri(self, redirect_uri):
        """Sets the redirect_uri of this OAuth2Client.

        Redirect URI (OAuth2 callback)  # noqa: E501

        :param redirect_uri: The redirect_uri of this OAuth2Client.  # noqa: E501
        :type: str
        """

        self._redirect_uri = redirect_uri

    @property
    def scope(self):
        """Gets the scope of this OAuth2Client.  # noqa: E501

        Comma separated OAuth2 scopes  # noqa: E501

        :return: The scope of this OAuth2Client.  # noqa: E501
        :rtype: str
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this OAuth2Client.

        Comma separated OAuth2 scopes  # noqa: E501

        :param scope: The scope of this OAuth2Client.  # noqa: E501
        :type: str
        """

        self._scope = scope

    @property
    def bconsole_cfg_path(self):
        """Gets the bconsole_cfg_path of this OAuth2Client.  # noqa: E501

        Dedicated Bconsole configuration file  # noqa: E501

        :return: The bconsole_cfg_path of this OAuth2Client.  # noqa: E501
        :rtype: str
        """
        return self._bconsole_cfg_path

    @bconsole_cfg_path.setter
    def bconsole_cfg_path(self, bconsole_cfg_path):
        """Sets the bconsole_cfg_path of this OAuth2Client.

        Dedicated Bconsole configuration file  # noqa: E501

        :param bconsole_cfg_path: The bconsole_cfg_path of this OAuth2Client.  # noqa: E501
        :type: str
        """

        self._bconsole_cfg_path = bconsole_cfg_path

    @property
    def name(self):
        """Gets the name of this OAuth2Client.  # noqa: E501

        OAuth2 client name (optional)  # noqa: E501

        :return: The name of this OAuth2Client.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this OAuth2Client.

        OAuth2 client name (optional)  # noqa: E501

        :param name: The name of this OAuth2Client.  # noqa: E501
        :type: str
        """

        self._name = name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OAuth2Client, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OAuth2Client):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
