# coding: utf-8

"""
    Bacularis API

    This is the Bacularis API documentation.  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: marcin.haba@bacula.pl
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Volume(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'mediaid': 'int',
        'name': 'str',
        'slot': 'int',
        'poolid': 'int',
        'mediatype': 'str',
        'mediatypeid': 'int',
        'labeltype': 'int',
        'firstwritten': 'str',
        'lastwritten': 'str',
        'labeldate': 'str',
        'voljobs': 'int',
        'volfiles': 'int',
        'volblocks': 'int',
        'volmounts': 'int',
        'volbytes': 'int',
        'volabytes': 'int',
        'volapadding': 'int',
        'volholebytes': 'int',
        'volholes': 'int',
        'volparts': 'int',
        'volerrors': 'int',
        'volwrites': 'int',
        'maxvolbytes': 'int',
        'volcapacitybytes': 'int',
        'volstatus': 'int',
        'enabled': 'int',
        'recycle': 'int',
        'actiononpurge': 'int',
        'volretention': 'int',
        'voluseduration': 'int',
        'maxvoljobs': 'int',
        'maxvolfiles': 'int',
        'inchanger': 'int',
        'storageid': 'int',
        'deviceid': 'int',
        'mediaaddressing': 'int',
        'volreadtime': 'int',
        'volwritetime': 'int',
        'endfile': 'int',
        'endblock': 'int',
        'locationid': 'int',
        'recyclecount': 'int',
        'initialwrite': 'int',
        'scratchpoolid': 'int',
        'recyclepoolid': 'int',
        'comment': 'str',
        'voltype': 'int',
        'volcloudparts': 'int',
        'lastpartbytes': 'int',
        'cacheretention': 'int',
        'storage': 'str',
        'pool': 'str',
        'scratchpool': 'str',
        'recyclepool': 'str',
        'whenexpire': 'str'
    }

    attribute_map = {
        'mediaid': 'mediaid',
        'name': 'name',
        'slot': 'slot',
        'poolid': 'poolid',
        'mediatype': 'mediatype',
        'mediatypeid': 'mediatypeid',
        'labeltype': 'labeltype',
        'firstwritten': 'firstwritten',
        'lastwritten': 'lastwritten',
        'labeldate': 'labeldate',
        'voljobs': 'voljobs',
        'volfiles': 'volfiles',
        'volblocks': 'volblocks',
        'volmounts': 'volmounts',
        'volbytes': 'volbytes',
        'volabytes': 'volabytes',
        'volapadding': 'volapadding',
        'volholebytes': 'volholebytes',
        'volholes': 'volholes',
        'volparts': 'volparts',
        'volerrors': 'volerrors',
        'volwrites': 'volwrites',
        'maxvolbytes': 'maxvolbytes',
        'volcapacitybytes': 'volcapacitybytes',
        'volstatus': 'volstatus',
        'enabled': 'enabled',
        'recycle': 'recycle',
        'actiononpurge': 'actiononpurge',
        'volretention': 'volretention',
        'voluseduration': 'voluseduration',
        'maxvoljobs': 'maxvoljobs',
        'maxvolfiles': 'maxvolfiles',
        'inchanger': 'inchanger',
        'storageid': 'storageid',
        'deviceid': 'deviceid',
        'mediaaddressing': 'mediaaddressing',
        'volreadtime': 'volreadtime',
        'volwritetime': 'volwritetime',
        'endfile': 'endfile',
        'endblock': 'endblock',
        'locationid': 'locationid',
        'recyclecount': 'recyclecount',
        'initialwrite': 'initialwrite',
        'scratchpoolid': 'scratchpoolid',
        'recyclepoolid': 'recyclepoolid',
        'comment': 'comment',
        'voltype': 'voltype',
        'volcloudparts': 'volcloudparts',
        'lastpartbytes': 'lastpartbytes',
        'cacheretention': 'cacheretention',
        'storage': 'storage',
        'pool': 'pool',
        'scratchpool': 'scratchpool',
        'recyclepool': 'recyclepool',
        'whenexpire': 'whenexpire'
    }

    def __init__(self, mediaid=None, name=None, slot=None, poolid=None, mediatype=None, mediatypeid=None, labeltype=None, firstwritten=None, lastwritten=None, labeldate=None, voljobs=None, volfiles=None, volblocks=None, volmounts=None, volbytes=None, volabytes=None, volapadding=None, volholebytes=None, volholes=None, volparts=None, volerrors=None, volwrites=None, maxvolbytes=None, volcapacitybytes=None, volstatus=None, enabled=None, recycle=None, actiononpurge=None, volretention=None, voluseduration=None, maxvoljobs=None, maxvolfiles=None, inchanger=None, storageid=None, deviceid=None, mediaaddressing=None, volreadtime=None, volwritetime=None, endfile=None, endblock=None, locationid=None, recyclecount=None, initialwrite=None, scratchpoolid=None, recyclepoolid=None, comment=None, voltype=None, volcloudparts=None, lastpartbytes=None, cacheretention=None, storage=None, pool=None, scratchpool=None, recyclepool=None, whenexpire=None):  # noqa: E501
        """Volume - a model defined in Swagger"""  # noqa: E501
        self._mediaid = None
        self._name = None
        self._slot = None
        self._poolid = None
        self._mediatype = None
        self._mediatypeid = None
        self._labeltype = None
        self._firstwritten = None
        self._lastwritten = None
        self._labeldate = None
        self._voljobs = None
        self._volfiles = None
        self._volblocks = None
        self._volmounts = None
        self._volbytes = None
        self._volabytes = None
        self._volapadding = None
        self._volholebytes = None
        self._volholes = None
        self._volparts = None
        self._volerrors = None
        self._volwrites = None
        self._maxvolbytes = None
        self._volcapacitybytes = None
        self._volstatus = None
        self._enabled = None
        self._recycle = None
        self._actiononpurge = None
        self._volretention = None
        self._voluseduration = None
        self._maxvoljobs = None
        self._maxvolfiles = None
        self._inchanger = None
        self._storageid = None
        self._deviceid = None
        self._mediaaddressing = None
        self._volreadtime = None
        self._volwritetime = None
        self._endfile = None
        self._endblock = None
        self._locationid = None
        self._recyclecount = None
        self._initialwrite = None
        self._scratchpoolid = None
        self._recyclepoolid = None
        self._comment = None
        self._voltype = None
        self._volcloudparts = None
        self._lastpartbytes = None
        self._cacheretention = None
        self._storage = None
        self._pool = None
        self._scratchpool = None
        self._recyclepool = None
        self._whenexpire = None
        self.discriminator = None
        if mediaid is not None:
            self.mediaid = mediaid
        if name is not None:
            self.name = name
        if slot is not None:
            self.slot = slot
        if poolid is not None:
            self.poolid = poolid
        if mediatype is not None:
            self.mediatype = mediatype
        if mediatypeid is not None:
            self.mediatypeid = mediatypeid
        if labeltype is not None:
            self.labeltype = labeltype
        if firstwritten is not None:
            self.firstwritten = firstwritten
        if lastwritten is not None:
            self.lastwritten = lastwritten
        if labeldate is not None:
            self.labeldate = labeldate
        if voljobs is not None:
            self.voljobs = voljobs
        if volfiles is not None:
            self.volfiles = volfiles
        if volblocks is not None:
            self.volblocks = volblocks
        if volmounts is not None:
            self.volmounts = volmounts
        if volbytes is not None:
            self.volbytes = volbytes
        if volabytes is not None:
            self.volabytes = volabytes
        if volapadding is not None:
            self.volapadding = volapadding
        if volholebytes is not None:
            self.volholebytes = volholebytes
        if volholes is not None:
            self.volholes = volholes
        if volparts is not None:
            self.volparts = volparts
        if volerrors is not None:
            self.volerrors = volerrors
        if volwrites is not None:
            self.volwrites = volwrites
        if maxvolbytes is not None:
            self.maxvolbytes = maxvolbytes
        if volcapacitybytes is not None:
            self.volcapacitybytes = volcapacitybytes
        if volstatus is not None:
            self.volstatus = volstatus
        if enabled is not None:
            self.enabled = enabled
        if recycle is not None:
            self.recycle = recycle
        if actiononpurge is not None:
            self.actiononpurge = actiononpurge
        if volretention is not None:
            self.volretention = volretention
        if voluseduration is not None:
            self.voluseduration = voluseduration
        if maxvoljobs is not None:
            self.maxvoljobs = maxvoljobs
        if maxvolfiles is not None:
            self.maxvolfiles = maxvolfiles
        if inchanger is not None:
            self.inchanger = inchanger
        if storageid is not None:
            self.storageid = storageid
        if deviceid is not None:
            self.deviceid = deviceid
        if mediaaddressing is not None:
            self.mediaaddressing = mediaaddressing
        if volreadtime is not None:
            self.volreadtime = volreadtime
        if volwritetime is not None:
            self.volwritetime = volwritetime
        if endfile is not None:
            self.endfile = endfile
        if endblock is not None:
            self.endblock = endblock
        if locationid is not None:
            self.locationid = locationid
        if recyclecount is not None:
            self.recyclecount = recyclecount
        if initialwrite is not None:
            self.initialwrite = initialwrite
        if scratchpoolid is not None:
            self.scratchpoolid = scratchpoolid
        if recyclepoolid is not None:
            self.recyclepoolid = recyclepoolid
        if comment is not None:
            self.comment = comment
        if voltype is not None:
            self.voltype = voltype
        if volcloudparts is not None:
            self.volcloudparts = volcloudparts
        if lastpartbytes is not None:
            self.lastpartbytes = lastpartbytes
        if cacheretention is not None:
            self.cacheretention = cacheretention
        if storage is not None:
            self.storage = storage
        if pool is not None:
            self.pool = pool
        if scratchpool is not None:
            self.scratchpool = scratchpool
        if recyclepool is not None:
            self.recyclepool = recyclepool
        if whenexpire is not None:
            self.whenexpire = whenexpire

    @property
    def mediaid(self):
        """Gets the mediaid of this Volume.  # noqa: E501

        Unique volume identifier  # noqa: E501

        :return: The mediaid of this Volume.  # noqa: E501
        :rtype: int
        """
        return self._mediaid

    @mediaid.setter
    def mediaid(self, mediaid):
        """Sets the mediaid of this Volume.

        Unique volume identifier  # noqa: E501

        :param mediaid: The mediaid of this Volume.  # noqa: E501
        :type: int
        """

        self._mediaid = mediaid

    @property
    def name(self):
        """Gets the name of this Volume.  # noqa: E501

        Volume name  # noqa: E501

        :return: The name of this Volume.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Volume.

        Volume name  # noqa: E501

        :param name: The name of this Volume.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def slot(self):
        """Gets the slot of this Volume.  # noqa: E501

        Slot number  # noqa: E501

        :return: The slot of this Volume.  # noqa: E501
        :rtype: int
        """
        return self._slot

    @slot.setter
    def slot(self, slot):
        """Sets the slot of this Volume.

        Slot number  # noqa: E501

        :param slot: The slot of this Volume.  # noqa: E501
        :type: int
        """

        self._slot = slot

    @property
    def poolid(self):
        """Gets the poolid of this Volume.  # noqa: E501

        Pool identifier  # noqa: E501

        :return: The poolid of this Volume.  # noqa: E501
        :rtype: int
        """
        return self._poolid

    @poolid.setter
    def poolid(self, poolid):
        """Sets the poolid of this Volume.

        Pool identifier  # noqa: E501

        :param poolid: The poolid of this Volume.  # noqa: E501
        :type: int
        """

        self._poolid = poolid

    @property
    def mediatype(self):
        """Gets the mediatype of this Volume.  # noqa: E501

        Media type  # noqa: E501

        :return: The mediatype of this Volume.  # noqa: E501
        :rtype: str
        """
        return self._mediatype

    @mediatype.setter
    def mediatype(self, mediatype):
        """Sets the mediatype of this Volume.

        Media type  # noqa: E501

        :param mediatype: The mediatype of this Volume.  # noqa: E501
        :type: str
        """

        self._mediatype = mediatype

    @property
    def mediatypeid(self):
        """Gets the mediatypeid of this Volume.  # noqa: E501

        Media type identifier  # noqa: E501

        :return: The mediatypeid of this Volume.  # noqa: E501
        :rtype: int
        """
        return self._mediatypeid

    @mediatypeid.setter
    def mediatypeid(self, mediatypeid):
        """Sets the mediatypeid of this Volume.

        Media type identifier  # noqa: E501

        :param mediatypeid: The mediatypeid of this Volume.  # noqa: E501
        :type: int
        """

        self._mediatypeid = mediatypeid

    @property
    def labeltype(self):
        """Gets the labeltype of this Volume.  # noqa: E501

        Label type  # noqa: E501

        :return: The labeltype of this Volume.  # noqa: E501
        :rtype: int
        """
        return self._labeltype

    @labeltype.setter
    def labeltype(self, labeltype):
        """Sets the labeltype of this Volume.

        Label type  # noqa: E501

        :param labeltype: The labeltype of this Volume.  # noqa: E501
        :type: int
        """

        self._labeltype = labeltype

    @property
    def firstwritten(self):
        """Gets the firstwritten of this Volume.  # noqa: E501

        Date and time first write to volume  # noqa: E501

        :return: The firstwritten of this Volume.  # noqa: E501
        :rtype: str
        """
        return self._firstwritten

    @firstwritten.setter
    def firstwritten(self, firstwritten):
        """Sets the firstwritten of this Volume.

        Date and time first write to volume  # noqa: E501

        :param firstwritten: The firstwritten of this Volume.  # noqa: E501
        :type: str
        """

        self._firstwritten = firstwritten

    @property
    def lastwritten(self):
        """Gets the lastwritten of this Volume.  # noqa: E501

        Date and time last write to volume  # noqa: E501

        :return: The lastwritten of this Volume.  # noqa: E501
        :rtype: str
        """
        return self._lastwritten

    @lastwritten.setter
    def lastwritten(self, lastwritten):
        """Sets the lastwritten of this Volume.

        Date and time last write to volume  # noqa: E501

        :param lastwritten: The lastwritten of this Volume.  # noqa: E501
        :type: str
        """

        self._lastwritten = lastwritten

    @property
    def labeldate(self):
        """Gets the labeldate of this Volume.  # noqa: E501

        Data and time label  # noqa: E501

        :return: The labeldate of this Volume.  # noqa: E501
        :rtype: str
        """
        return self._labeldate

    @labeldate.setter
    def labeldate(self, labeldate):
        """Sets the labeldate of this Volume.

        Data and time label  # noqa: E501

        :param labeldate: The labeldate of this Volume.  # noqa: E501
        :type: str
        """

        self._labeldate = labeldate

    @property
    def voljobs(self):
        """Gets the voljobs of this Volume.  # noqa: E501

        Number of jobs written on volume  # noqa: E501

        :return: The voljobs of this Volume.  # noqa: E501
        :rtype: int
        """
        return self._voljobs

    @voljobs.setter
    def voljobs(self, voljobs):
        """Sets the voljobs of this Volume.

        Number of jobs written on volume  # noqa: E501

        :param voljobs: The voljobs of this Volume.  # noqa: E501
        :type: int
        """

        self._voljobs = voljobs

    @property
    def volfiles(self):
        """Gets the volfiles of this Volume.  # noqa: E501

        Number of files written on volume  # noqa: E501

        :return: The volfiles of this Volume.  # noqa: E501
        :rtype: int
        """
        return self._volfiles

    @volfiles.setter
    def volfiles(self, volfiles):
        """Sets the volfiles of this Volume.

        Number of files written on volume  # noqa: E501

        :param volfiles: The volfiles of this Volume.  # noqa: E501
        :type: int
        """

        self._volfiles = volfiles

    @property
    def volblocks(self):
        """Gets the volblocks of this Volume.  # noqa: E501

        Number of blocks written on volume  # noqa: E501

        :return: The volblocks of this Volume.  # noqa: E501
        :rtype: int
        """
        return self._volblocks

    @volblocks.setter
    def volblocks(self, volblocks):
        """Sets the volblocks of this Volume.

        Number of blocks written on volume  # noqa: E501

        :param volblocks: The volblocks of this Volume.  # noqa: E501
        :type: int
        """

        self._volblocks = volblocks

    @property
    def volmounts(self):
        """Gets the volmounts of this Volume.  # noqa: E501

        Number of volume mounts  # noqa: E501

        :return: The volmounts of this Volume.  # noqa: E501
        :rtype: int
        """
        return self._volmounts

    @volmounts.setter
    def volmounts(self, volmounts):
        """Sets the volmounts of this Volume.

        Number of volume mounts  # noqa: E501

        :param volmounts: The volmounts of this Volume.  # noqa: E501
        :type: int
        """

        self._volmounts = volmounts

    @property
    def volbytes(self):
        """Gets the volbytes of this Volume.  # noqa: E501

        Number of bytes written on volume  # noqa: E501

        :return: The volbytes of this Volume.  # noqa: E501
        :rtype: int
        """
        return self._volbytes

    @volbytes.setter
    def volbytes(self, volbytes):
        """Sets the volbytes of this Volume.

        Number of bytes written on volume  # noqa: E501

        :param volbytes: The volbytes of this Volume.  # noqa: E501
        :type: int
        """

        self._volbytes = volbytes

    @property
    def volabytes(self):
        """Gets the volabytes of this Volume.  # noqa: E501

        Size of aligned volume  # noqa: E501

        :return: The volabytes of this Volume.  # noqa: E501
        :rtype: int
        """
        return self._volabytes

    @volabytes.setter
    def volabytes(self, volabytes):
        """Sets the volabytes of this Volume.

        Size of aligned volume  # noqa: E501

        :param volabytes: The volabytes of this Volume.  # noqa: E501
        :type: int
        """

        self._volabytes = volabytes

    @property
    def volapadding(self):
        """Gets the volapadding of this Volume.  # noqa: E501

        Volume apadding  # noqa: E501

        :return: The volapadding of this Volume.  # noqa: E501
        :rtype: int
        """
        return self._volapadding

    @volapadding.setter
    def volapadding(self, volapadding):
        """Sets the volapadding of this Volume.

        Volume apadding  # noqa: E501

        :param volapadding: The volapadding of this Volume.  # noqa: E501
        :type: int
        """

        self._volapadding = volapadding

    @property
    def volholebytes(self):
        """Gets the volholebytes of this Volume.  # noqa: E501

        Volume hole bytes  # noqa: E501

        :return: The volholebytes of this Volume.  # noqa: E501
        :rtype: int
        """
        return self._volholebytes

    @volholebytes.setter
    def volholebytes(self, volholebytes):
        """Sets the volholebytes of this Volume.

        Volume hole bytes  # noqa: E501

        :param volholebytes: The volholebytes of this Volume.  # noqa: E501
        :type: int
        """

        self._volholebytes = volholebytes

    @property
    def volholes(self):
        """Gets the volholes of this Volume.  # noqa: E501

        Volume holes  # noqa: E501

        :return: The volholes of this Volume.  # noqa: E501
        :rtype: int
        """
        return self._volholes

    @volholes.setter
    def volholes(self, volholes):
        """Sets the volholes of this Volume.

        Volume holes  # noqa: E501

        :param volholes: The volholes of this Volume.  # noqa: E501
        :type: int
        """

        self._volholes = volholes

    @property
    def volparts(self):
        """Gets the volparts of this Volume.  # noqa: E501

        Volume parts  # noqa: E501

        :return: The volparts of this Volume.  # noqa: E501
        :rtype: int
        """
        return self._volparts

    @volparts.setter
    def volparts(self, volparts):
        """Sets the volparts of this Volume.

        Volume parts  # noqa: E501

        :param volparts: The volparts of this Volume.  # noqa: E501
        :type: int
        """

        self._volparts = volparts

    @property
    def volerrors(self):
        """Gets the volerrors of this Volume.  # noqa: E501

        Volume errors  # noqa: E501

        :return: The volerrors of this Volume.  # noqa: E501
        :rtype: int
        """
        return self._volerrors

    @volerrors.setter
    def volerrors(self, volerrors):
        """Sets the volerrors of this Volume.

        Volume errors  # noqa: E501

        :param volerrors: The volerrors of this Volume.  # noqa: E501
        :type: int
        """

        self._volerrors = volerrors

    @property
    def volwrites(self):
        """Gets the volwrites of this Volume.  # noqa: E501

        Volume writes  # noqa: E501

        :return: The volwrites of this Volume.  # noqa: E501
        :rtype: int
        """
        return self._volwrites

    @volwrites.setter
    def volwrites(self, volwrites):
        """Sets the volwrites of this Volume.

        Volume writes  # noqa: E501

        :param volwrites: The volwrites of this Volume.  # noqa: E501
        :type: int
        """

        self._volwrites = volwrites

    @property
    def maxvolbytes(self):
        """Gets the maxvolbytes of this Volume.  # noqa: E501

        Maximum volume bytes  # noqa: E501

        :return: The maxvolbytes of this Volume.  # noqa: E501
        :rtype: int
        """
        return self._maxvolbytes

    @maxvolbytes.setter
    def maxvolbytes(self, maxvolbytes):
        """Sets the maxvolbytes of this Volume.

        Maximum volume bytes  # noqa: E501

        :param maxvolbytes: The maxvolbytes of this Volume.  # noqa: E501
        :type: int
        """

        self._maxvolbytes = maxvolbytes

    @property
    def volcapacitybytes(self):
        """Gets the volcapacitybytes of this Volume.  # noqa: E501

        Volume capacity bytes  # noqa: E501

        :return: The volcapacitybytes of this Volume.  # noqa: E501
        :rtype: int
        """
        return self._volcapacitybytes

    @volcapacitybytes.setter
    def volcapacitybytes(self, volcapacitybytes):
        """Sets the volcapacitybytes of this Volume.

        Volume capacity bytes  # noqa: E501

        :param volcapacitybytes: The volcapacitybytes of this Volume.  # noqa: E501
        :type: int
        """

        self._volcapacitybytes = volcapacitybytes

    @property
    def volstatus(self):
        """Gets the volstatus of this Volume.  # noqa: E501

        Volume status  # noqa: E501

        :return: The volstatus of this Volume.  # noqa: E501
        :rtype: int
        """
        return self._volstatus

    @volstatus.setter
    def volstatus(self, volstatus):
        """Sets the volstatus of this Volume.

        Volume status  # noqa: E501

        :param volstatus: The volstatus of this Volume.  # noqa: E501
        :type: int
        """

        self._volstatus = volstatus

    @property
    def enabled(self):
        """Gets the enabled of this Volume.  # noqa: E501

        Determines if volume is enabled or not  # noqa: E501

        :return: The enabled of this Volume.  # noqa: E501
        :rtype: int
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this Volume.

        Determines if volume is enabled or not  # noqa: E501

        :param enabled: The enabled of this Volume.  # noqa: E501
        :type: int
        """

        self._enabled = enabled

    @property
    def recycle(self):
        """Gets the recycle of this Volume.  # noqa: E501

        If set to 1 it enables volume recycling  # noqa: E501

        :return: The recycle of this Volume.  # noqa: E501
        :rtype: int
        """
        return self._recycle

    @recycle.setter
    def recycle(self, recycle):
        """Sets the recycle of this Volume.

        If set to 1 it enables volume recycling  # noqa: E501

        :param recycle: The recycle of this Volume.  # noqa: E501
        :type: int
        """

        self._recycle = recycle

    @property
    def actiononpurge(self):
        """Gets the actiononpurge of this Volume.  # noqa: E501

        Action on purge to do on volumes  # noqa: E501

        :return: The actiononpurge of this Volume.  # noqa: E501
        :rtype: int
        """
        return self._actiononpurge

    @actiononpurge.setter
    def actiononpurge(self, actiononpurge):
        """Sets the actiononpurge of this Volume.

        Action on purge to do on volumes  # noqa: E501

        :param actiononpurge: The actiononpurge of this Volume.  # noqa: E501
        :type: int
        """

        self._actiononpurge = actiononpurge

    @property
    def volretention(self):
        """Gets the volretention of this Volume.  # noqa: E501

        Volume retention time  # noqa: E501

        :return: The volretention of this Volume.  # noqa: E501
        :rtype: int
        """
        return self._volretention

    @volretention.setter
    def volretention(self, volretention):
        """Sets the volretention of this Volume.

        Volume retention time  # noqa: E501

        :param volretention: The volretention of this Volume.  # noqa: E501
        :type: int
        """

        self._volretention = volretention

    @property
    def voluseduration(self):
        """Gets the voluseduration of this Volume.  # noqa: E501

        Volume use duration  # noqa: E501

        :return: The voluseduration of this Volume.  # noqa: E501
        :rtype: int
        """
        return self._voluseduration

    @voluseduration.setter
    def voluseduration(self, voluseduration):
        """Sets the voluseduration of this Volume.

        Volume use duration  # noqa: E501

        :param voluseduration: The voluseduration of this Volume.  # noqa: E501
        :type: int
        """

        self._voluseduration = voluseduration

    @property
    def maxvoljobs(self):
        """Gets the maxvoljobs of this Volume.  # noqa: E501

        Maximum volume jobs  # noqa: E501

        :return: The maxvoljobs of this Volume.  # noqa: E501
        :rtype: int
        """
        return self._maxvoljobs

    @maxvoljobs.setter
    def maxvoljobs(self, maxvoljobs):
        """Sets the maxvoljobs of this Volume.

        Maximum volume jobs  # noqa: E501

        :param maxvoljobs: The maxvoljobs of this Volume.  # noqa: E501
        :type: int
        """

        self._maxvoljobs = maxvoljobs

    @property
    def maxvolfiles(self):
        """Gets the maxvolfiles of this Volume.  # noqa: E501

        Maximum volume files  # noqa: E501

        :return: The maxvolfiles of this Volume.  # noqa: E501
        :rtype: int
        """
        return self._maxvolfiles

    @maxvolfiles.setter
    def maxvolfiles(self, maxvolfiles):
        """Sets the maxvolfiles of this Volume.

        Maximum volume files  # noqa: E501

        :param maxvolfiles: The maxvolfiles of this Volume.  # noqa: E501
        :type: int
        """

        self._maxvolfiles = maxvolfiles

    @property
    def inchanger(self):
        """Gets the inchanger of this Volume.  # noqa: E501

        InChanger flag  # noqa: E501

        :return: The inchanger of this Volume.  # noqa: E501
        :rtype: int
        """
        return self._inchanger

    @inchanger.setter
    def inchanger(self, inchanger):
        """Sets the inchanger of this Volume.

        InChanger flag  # noqa: E501

        :param inchanger: The inchanger of this Volume.  # noqa: E501
        :type: int
        """

        self._inchanger = inchanger

    @property
    def storageid(self):
        """Gets the storageid of this Volume.  # noqa: E501

        Storage identifier  # noqa: E501

        :return: The storageid of this Volume.  # noqa: E501
        :rtype: int
        """
        return self._storageid

    @storageid.setter
    def storageid(self, storageid):
        """Sets the storageid of this Volume.

        Storage identifier  # noqa: E501

        :param storageid: The storageid of this Volume.  # noqa: E501
        :type: int
        """

        self._storageid = storageid

    @property
    def deviceid(self):
        """Gets the deviceid of this Volume.  # noqa: E501

        Device identifier  # noqa: E501

        :return: The deviceid of this Volume.  # noqa: E501
        :rtype: int
        """
        return self._deviceid

    @deviceid.setter
    def deviceid(self, deviceid):
        """Sets the deviceid of this Volume.

        Device identifier  # noqa: E501

        :param deviceid: The deviceid of this Volume.  # noqa: E501
        :type: int
        """

        self._deviceid = deviceid

    @property
    def mediaaddressing(self):
        """Gets the mediaaddressing of this Volume.  # noqa: E501

        Media adressing  # noqa: E501

        :return: The mediaaddressing of this Volume.  # noqa: E501
        :rtype: int
        """
        return self._mediaaddressing

    @mediaaddressing.setter
    def mediaaddressing(self, mediaaddressing):
        """Sets the mediaaddressing of this Volume.

        Media adressing  # noqa: E501

        :param mediaaddressing: The mediaaddressing of this Volume.  # noqa: E501
        :type: int
        """

        self._mediaaddressing = mediaaddressing

    @property
    def volreadtime(self):
        """Gets the volreadtime of this Volume.  # noqa: E501

        Volume read time  # noqa: E501

        :return: The volreadtime of this Volume.  # noqa: E501
        :rtype: int
        """
        return self._volreadtime

    @volreadtime.setter
    def volreadtime(self, volreadtime):
        """Sets the volreadtime of this Volume.

        Volume read time  # noqa: E501

        :param volreadtime: The volreadtime of this Volume.  # noqa: E501
        :type: int
        """

        self._volreadtime = volreadtime

    @property
    def volwritetime(self):
        """Gets the volwritetime of this Volume.  # noqa: E501

        Volume write time  # noqa: E501

        :return: The volwritetime of this Volume.  # noqa: E501
        :rtype: int
        """
        return self._volwritetime

    @volwritetime.setter
    def volwritetime(self, volwritetime):
        """Sets the volwritetime of this Volume.

        Volume write time  # noqa: E501

        :param volwritetime: The volwritetime of this Volume.  # noqa: E501
        :type: int
        """

        self._volwritetime = volwritetime

    @property
    def endfile(self):
        """Gets the endfile of this Volume.  # noqa: E501

        End file  # noqa: E501

        :return: The endfile of this Volume.  # noqa: E501
        :rtype: int
        """
        return self._endfile

    @endfile.setter
    def endfile(self, endfile):
        """Sets the endfile of this Volume.

        End file  # noqa: E501

        :param endfile: The endfile of this Volume.  # noqa: E501
        :type: int
        """

        self._endfile = endfile

    @property
    def endblock(self):
        """Gets the endblock of this Volume.  # noqa: E501

        End block  # noqa: E501

        :return: The endblock of this Volume.  # noqa: E501
        :rtype: int
        """
        return self._endblock

    @endblock.setter
    def endblock(self, endblock):
        """Sets the endblock of this Volume.

        End block  # noqa: E501

        :param endblock: The endblock of this Volume.  # noqa: E501
        :type: int
        """

        self._endblock = endblock

    @property
    def locationid(self):
        """Gets the locationid of this Volume.  # noqa: E501

        Location identifier  # noqa: E501

        :return: The locationid of this Volume.  # noqa: E501
        :rtype: int
        """
        return self._locationid

    @locationid.setter
    def locationid(self, locationid):
        """Sets the locationid of this Volume.

        Location identifier  # noqa: E501

        :param locationid: The locationid of this Volume.  # noqa: E501
        :type: int
        """

        self._locationid = locationid

    @property
    def recyclecount(self):
        """Gets the recyclecount of this Volume.  # noqa: E501

        Recycle count  # noqa: E501

        :return: The recyclecount of this Volume.  # noqa: E501
        :rtype: int
        """
        return self._recyclecount

    @recyclecount.setter
    def recyclecount(self, recyclecount):
        """Sets the recyclecount of this Volume.

        Recycle count  # noqa: E501

        :param recyclecount: The recyclecount of this Volume.  # noqa: E501
        :type: int
        """

        self._recyclecount = recyclecount

    @property
    def initialwrite(self):
        """Gets the initialwrite of this Volume.  # noqa: E501

        Initial write  # noqa: E501

        :return: The initialwrite of this Volume.  # noqa: E501
        :rtype: int
        """
        return self._initialwrite

    @initialwrite.setter
    def initialwrite(self, initialwrite):
        """Sets the initialwrite of this Volume.

        Initial write  # noqa: E501

        :param initialwrite: The initialwrite of this Volume.  # noqa: E501
        :type: int
        """

        self._initialwrite = initialwrite

    @property
    def scratchpoolid(self):
        """Gets the scratchpoolid of this Volume.  # noqa: E501

        Scratch pool identifier  # noqa: E501

        :return: The scratchpoolid of this Volume.  # noqa: E501
        :rtype: int
        """
        return self._scratchpoolid

    @scratchpoolid.setter
    def scratchpoolid(self, scratchpoolid):
        """Sets the scratchpoolid of this Volume.

        Scratch pool identifier  # noqa: E501

        :param scratchpoolid: The scratchpoolid of this Volume.  # noqa: E501
        :type: int
        """

        self._scratchpoolid = scratchpoolid

    @property
    def recyclepoolid(self):
        """Gets the recyclepoolid of this Volume.  # noqa: E501

        Recycle pool identifier  # noqa: E501

        :return: The recyclepoolid of this Volume.  # noqa: E501
        :rtype: int
        """
        return self._recyclepoolid

    @recyclepoolid.setter
    def recyclepoolid(self, recyclepoolid):
        """Sets the recyclepoolid of this Volume.

        Recycle pool identifier  # noqa: E501

        :param recyclepoolid: The recyclepoolid of this Volume.  # noqa: E501
        :type: int
        """

        self._recyclepoolid = recyclepoolid

    @property
    def comment(self):
        """Gets the comment of this Volume.  # noqa: E501

        Volume comment  # noqa: E501

        :return: The comment of this Volume.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this Volume.

        Volume comment  # noqa: E501

        :param comment: The comment of this Volume.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def voltype(self):
        """Gets the voltype of this Volume.  # noqa: E501

        Volume type  # noqa: E501

        :return: The voltype of this Volume.  # noqa: E501
        :rtype: int
        """
        return self._voltype

    @voltype.setter
    def voltype(self, voltype):
        """Sets the voltype of this Volume.

        Volume type  # noqa: E501

        :param voltype: The voltype of this Volume.  # noqa: E501
        :type: int
        """

        self._voltype = voltype

    @property
    def volcloudparts(self):
        """Gets the volcloudparts of this Volume.  # noqa: E501

        Volume cloud parts  # noqa: E501

        :return: The volcloudparts of this Volume.  # noqa: E501
        :rtype: int
        """
        return self._volcloudparts

    @volcloudparts.setter
    def volcloudparts(self, volcloudparts):
        """Sets the volcloudparts of this Volume.

        Volume cloud parts  # noqa: E501

        :param volcloudparts: The volcloudparts of this Volume.  # noqa: E501
        :type: int
        """

        self._volcloudparts = volcloudparts

    @property
    def lastpartbytes(self):
        """Gets the lastpartbytes of this Volume.  # noqa: E501

        Last part bytes  # noqa: E501

        :return: The lastpartbytes of this Volume.  # noqa: E501
        :rtype: int
        """
        return self._lastpartbytes

    @lastpartbytes.setter
    def lastpartbytes(self, lastpartbytes):
        """Sets the lastpartbytes of this Volume.

        Last part bytes  # noqa: E501

        :param lastpartbytes: The lastpartbytes of this Volume.  # noqa: E501
        :type: int
        """

        self._lastpartbytes = lastpartbytes

    @property
    def cacheretention(self):
        """Gets the cacheretention of this Volume.  # noqa: E501

        Cache retention time  # noqa: E501

        :return: The cacheretention of this Volume.  # noqa: E501
        :rtype: int
        """
        return self._cacheretention

    @cacheretention.setter
    def cacheretention(self, cacheretention):
        """Sets the cacheretention of this Volume.

        Cache retention time  # noqa: E501

        :param cacheretention: The cacheretention of this Volume.  # noqa: E501
        :type: int
        """

        self._cacheretention = cacheretention

    @property
    def storage(self):
        """Gets the storage of this Volume.  # noqa: E501

        Storage name  # noqa: E501

        :return: The storage of this Volume.  # noqa: E501
        :rtype: str
        """
        return self._storage

    @storage.setter
    def storage(self, storage):
        """Sets the storage of this Volume.

        Storage name  # noqa: E501

        :param storage: The storage of this Volume.  # noqa: E501
        :type: str
        """

        self._storage = storage

    @property
    def pool(self):
        """Gets the pool of this Volume.  # noqa: E501

        Pool name  # noqa: E501

        :return: The pool of this Volume.  # noqa: E501
        :rtype: str
        """
        return self._pool

    @pool.setter
    def pool(self, pool):
        """Sets the pool of this Volume.

        Pool name  # noqa: E501

        :param pool: The pool of this Volume.  # noqa: E501
        :type: str
        """

        self._pool = pool

    @property
    def scratchpool(self):
        """Gets the scratchpool of this Volume.  # noqa: E501

        Scratch pool name  # noqa: E501

        :return: The scratchpool of this Volume.  # noqa: E501
        :rtype: str
        """
        return self._scratchpool

    @scratchpool.setter
    def scratchpool(self, scratchpool):
        """Sets the scratchpool of this Volume.

        Scratch pool name  # noqa: E501

        :param scratchpool: The scratchpool of this Volume.  # noqa: E501
        :type: str
        """

        self._scratchpool = scratchpool

    @property
    def recyclepool(self):
        """Gets the recyclepool of this Volume.  # noqa: E501

        Recycle pool name  # noqa: E501

        :return: The recyclepool of this Volume.  # noqa: E501
        :rtype: str
        """
        return self._recyclepool

    @recyclepool.setter
    def recyclepool(self, recyclepool):
        """Sets the recyclepool of this Volume.

        Recycle pool name  # noqa: E501

        :param recyclepool: The recyclepool of this Volume.  # noqa: E501
        :type: str
        """

        self._recyclepool = recyclepool

    @property
    def whenexpire(self):
        """Gets the whenexpire of this Volume.  # noqa: E501

        Expiration date and time  # noqa: E501

        :return: The whenexpire of this Volume.  # noqa: E501
        :rtype: str
        """
        return self._whenexpire

    @whenexpire.setter
    def whenexpire(self, whenexpire):
        """Sets the whenexpire of this Volume.

        Expiration date and time  # noqa: E501

        :param whenexpire: The whenexpire of this Volume.  # noqa: E501
        :type: str
        """

        self._whenexpire = whenexpire

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Volume, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Volume):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
