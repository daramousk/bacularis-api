# coding: utf-8

"""
    Bacularis API

    This is the Bacularis API documentation.  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: marcin.haba@bacula.pl
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FileSet(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'filesetid': 'int',
        'fileset': 'str',
        'md5': 'str',
        'createtime': 'str'
    }

    attribute_map = {
        'filesetid': 'filesetid',
        'fileset': 'fileset',
        'md5': 'md5',
        'createtime': 'createtime'
    }

    def __init__(self, filesetid=None, fileset=None, md5=None, createtime=None):  # noqa: E501
        """FileSet - a model defined in Swagger"""  # noqa: E501
        self._filesetid = None
        self._fileset = None
        self._md5 = None
        self._createtime = None
        self.discriminator = None
        if filesetid is not None:
            self.filesetid = filesetid
        if fileset is not None:
            self.fileset = fileset
        if md5 is not None:
            self.md5 = md5
        if createtime is not None:
            self.createtime = createtime

    @property
    def filesetid(self):
        """Gets the filesetid of this FileSet.  # noqa: E501

        Unique FileSet identifier  # noqa: E501

        :return: The filesetid of this FileSet.  # noqa: E501
        :rtype: int
        """
        return self._filesetid

    @filesetid.setter
    def filesetid(self, filesetid):
        """Sets the filesetid of this FileSet.

        Unique FileSet identifier  # noqa: E501

        :param filesetid: The filesetid of this FileSet.  # noqa: E501
        :type: int
        """

        self._filesetid = filesetid

    @property
    def fileset(self):
        """Gets the fileset of this FileSet.  # noqa: E501

        FileSet name  # noqa: E501

        :return: The fileset of this FileSet.  # noqa: E501
        :rtype: str
        """
        return self._fileset

    @fileset.setter
    def fileset(self, fileset):
        """Sets the fileset of this FileSet.

        FileSet name  # noqa: E501

        :param fileset: The fileset of this FileSet.  # noqa: E501
        :type: str
        """

        self._fileset = fileset

    @property
    def md5(self):
        """Gets the md5 of this FileSet.  # noqa: E501

        MD5 sum  # noqa: E501

        :return: The md5 of this FileSet.  # noqa: E501
        :rtype: str
        """
        return self._md5

    @md5.setter
    def md5(self, md5):
        """Sets the md5 of this FileSet.

        MD5 sum  # noqa: E501

        :param md5: The md5 of this FileSet.  # noqa: E501
        :type: str
        """

        self._md5 = md5

    @property
    def createtime(self):
        """Gets the createtime of this FileSet.  # noqa: E501

        Create date and time  # noqa: E501

        :return: The createtime of this FileSet.  # noqa: E501
        :rtype: str
        """
        return self._createtime

    @createtime.setter
    def createtime(self, createtime):
        """Sets the createtime of this FileSet.

        Create date and time  # noqa: E501

        :param createtime: The createtime of this FileSet.  # noqa: E501
        :type: str
        """

        self._createtime = createtime

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FileSet, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FileSet):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
