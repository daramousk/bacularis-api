# coding: utf-8

"""
    Bacularis API

    This is the Bacularis API documentation.  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: marcin.haba@bacula.pl
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Job(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'jobid': 'int',
        'job': 'str',
        'name': 'str',
        'type': 'str',
        'level': 'str',
        'clientid': 'int',
        'jobstatus': 'str',
        'schedtime': 'str',
        'schedtime_epoch': 'int',
        'starttime': 'str',
        'starttime_epoch': 'int',
        'endtime': 'str',
        'endtime_epoch': 'int',
        'realendtime': 'str',
        'realendtime_epoch': 'int',
        'jobtdate': 'int',
        'volsessionid': 'int',
        'volsessiontime': 'int',
        'jobfiles': 'int',
        'jobbytes': 'int',
        'readbytes': 'int',
        'joberrors': 'int',
        'jobmissingfiles': 'int',
        'poolid': 'int',
        'filesetid': 'int',
        'priorjobid': 'int',
        'purgedfiles': 'int',
        'hasbase': 'int',
        'hascache': 'int',
        'reviewed': 'int',
        'comment': 'str',
        'filetable': 'str',
        'client': 'str',
        'pool': 'str',
        'fileset': 'str'
    }

    attribute_map = {
        'jobid': 'jobid',
        'job': 'job',
        'name': 'name',
        'type': 'type',
        'level': 'level',
        'clientid': 'clientid',
        'jobstatus': 'jobstatus',
        'schedtime': 'schedtime',
        'schedtime_epoch': 'schedtime_epoch',
        'starttime': 'starttime',
        'starttime_epoch': 'starttime_epoch',
        'endtime': 'endtime',
        'endtime_epoch': 'endtime_epoch',
        'realendtime': 'realendtime',
        'realendtime_epoch': 'realendtime_epoch',
        'jobtdate': 'jobtdate',
        'volsessionid': 'volsessionid',
        'volsessiontime': 'volsessiontime',
        'jobfiles': 'jobfiles',
        'jobbytes': 'jobbytes',
        'readbytes': 'readbytes',
        'joberrors': 'joberrors',
        'jobmissingfiles': 'jobmissingfiles',
        'poolid': 'poolid',
        'filesetid': 'filesetid',
        'priorjobid': 'priorjobid',
        'purgedfiles': 'purgedfiles',
        'hasbase': 'hasbase',
        'hascache': 'hascache',
        'reviewed': 'reviewed',
        'comment': 'comment',
        'filetable': 'filetable',
        'client': 'client',
        'pool': 'pool',
        'fileset': 'fileset'
    }

    def __init__(self, jobid=None, job=None, name=None, type=None, level=None, clientid=None, jobstatus=None, schedtime=None, schedtime_epoch=None, starttime=None, starttime_epoch=None, endtime=None, endtime_epoch=None, realendtime=None, realendtime_epoch=None, jobtdate=None, volsessionid=None, volsessiontime=None, jobfiles=None, jobbytes=None, readbytes=None, joberrors=None, jobmissingfiles=None, poolid=None, filesetid=None, priorjobid=None, purgedfiles=None, hasbase=None, hascache=None, reviewed=None, comment=None, filetable=None, client=None, pool=None, fileset=None):  # noqa: E501
        """Job - a model defined in Swagger"""  # noqa: E501
        self._jobid = None
        self._job = None
        self._name = None
        self._type = None
        self._level = None
        self._clientid = None
        self._jobstatus = None
        self._schedtime = None
        self._schedtime_epoch = None
        self._starttime = None
        self._starttime_epoch = None
        self._endtime = None
        self._endtime_epoch = None
        self._realendtime = None
        self._realendtime_epoch = None
        self._jobtdate = None
        self._volsessionid = None
        self._volsessiontime = None
        self._jobfiles = None
        self._jobbytes = None
        self._readbytes = None
        self._joberrors = None
        self._jobmissingfiles = None
        self._poolid = None
        self._filesetid = None
        self._priorjobid = None
        self._purgedfiles = None
        self._hasbase = None
        self._hascache = None
        self._reviewed = None
        self._comment = None
        self._filetable = None
        self._client = None
        self._pool = None
        self._fileset = None
        self.discriminator = None
        if jobid is not None:
            self.jobid = jobid
        if job is not None:
            self.job = job
        if name is not None:
            self.name = name
        if type is not None:
            self.type = type
        if level is not None:
            self.level = level
        if clientid is not None:
            self.clientid = clientid
        if jobstatus is not None:
            self.jobstatus = jobstatus
        if schedtime is not None:
            self.schedtime = schedtime
        if schedtime_epoch is not None:
            self.schedtime_epoch = schedtime_epoch
        if starttime is not None:
            self.starttime = starttime
        if starttime_epoch is not None:
            self.starttime_epoch = starttime_epoch
        if endtime is not None:
            self.endtime = endtime
        if endtime_epoch is not None:
            self.endtime_epoch = endtime_epoch
        if realendtime is not None:
            self.realendtime = realendtime
        if realendtime_epoch is not None:
            self.realendtime_epoch = realendtime_epoch
        if jobtdate is not None:
            self.jobtdate = jobtdate
        if volsessionid is not None:
            self.volsessionid = volsessionid
        if volsessiontime is not None:
            self.volsessiontime = volsessiontime
        if jobfiles is not None:
            self.jobfiles = jobfiles
        if jobbytes is not None:
            self.jobbytes = jobbytes
        if readbytes is not None:
            self.readbytes = readbytes
        if joberrors is not None:
            self.joberrors = joberrors
        if jobmissingfiles is not None:
            self.jobmissingfiles = jobmissingfiles
        if poolid is not None:
            self.poolid = poolid
        if filesetid is not None:
            self.filesetid = filesetid
        if priorjobid is not None:
            self.priorjobid = priorjobid
        if purgedfiles is not None:
            self.purgedfiles = purgedfiles
        if hasbase is not None:
            self.hasbase = hasbase
        if hascache is not None:
            self.hascache = hascache
        if reviewed is not None:
            self.reviewed = reviewed
        if comment is not None:
            self.comment = comment
        if filetable is not None:
            self.filetable = filetable
        if client is not None:
            self.client = client
        if pool is not None:
            self.pool = pool
        if fileset is not None:
            self.fileset = fileset

    @property
    def jobid(self):
        """Gets the jobid of this Job.  # noqa: E501

        Job identifier  # noqa: E501

        :return: The jobid of this Job.  # noqa: E501
        :rtype: int
        """
        return self._jobid

    @jobid.setter
    def jobid(self, jobid):
        """Sets the jobid of this Job.

        Job identifier  # noqa: E501

        :param jobid: The jobid of this Job.  # noqa: E501
        :type: int
        """

        self._jobid = jobid

    @property
    def job(self):
        """Gets the job of this Job.  # noqa: E501

        Job name with date and time  # noqa: E501

        :return: The job of this Job.  # noqa: E501
        :rtype: str
        """
        return self._job

    @job.setter
    def job(self, job):
        """Sets the job of this Job.

        Job name with date and time  # noqa: E501

        :param job: The job of this Job.  # noqa: E501
        :type: str
        """

        self._job = job

    @property
    def name(self):
        """Gets the name of this Job.  # noqa: E501

        Job name  # noqa: E501

        :return: The name of this Job.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Job.

        Job name  # noqa: E501

        :param name: The name of this Job.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def type(self):
        """Gets the type of this Job.  # noqa: E501

        Job type  # noqa: E501

        :return: The type of this Job.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Job.

        Job type  # noqa: E501

        :param type: The type of this Job.  # noqa: E501
        :type: str
        """
        allowed_values = ["B", "M", "V", "R", "I", "D", "A", "C", "c", "g"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def level(self):
        """Gets the level of this Job.  # noqa: E501

        Job level  # noqa: E501

        :return: The level of this Job.  # noqa: E501
        :rtype: str
        """
        return self._level

    @level.setter
    def level(self, level):
        """Sets the level of this Job.

        Job level  # noqa: E501

        :param level: The level of this Job.  # noqa: E501
        :type: str
        """
        allowed_values = ["F", "I", "D", "B", "f", "V", "C", "O", "d"]  # noqa: E501
        if level not in allowed_values:
            raise ValueError(
                "Invalid value for `level` ({0}), must be one of {1}"  # noqa: E501
                .format(level, allowed_values)
            )

        self._level = level

    @property
    def clientid(self):
        """Gets the clientid of this Job.  # noqa: E501

        Client identifier  # noqa: E501

        :return: The clientid of this Job.  # noqa: E501
        :rtype: int
        """
        return self._clientid

    @clientid.setter
    def clientid(self, clientid):
        """Sets the clientid of this Job.

        Client identifier  # noqa: E501

        :param clientid: The clientid of this Job.  # noqa: E501
        :type: int
        """

        self._clientid = clientid

    @property
    def jobstatus(self):
        """Gets the jobstatus of this Job.  # noqa: E501

        Job status. Note, some statuses can be not visible outside (used internally by Bacula)  # noqa: E501

        :return: The jobstatus of this Job.  # noqa: E501
        :rtype: str
        """
        return self._jobstatus

    @jobstatus.setter
    def jobstatus(self, jobstatus):
        """Sets the jobstatus of this Job.

        Job status. Note, some statuses can be not visible outside (used internally by Bacula)  # noqa: E501

        :param jobstatus: The jobstatus of this Job.  # noqa: E501
        :type: str
        """
        allowed_values = ["C", "R", "B", "T", "W", "E", "e", "f", "D", "A", "I", "F", "S", "m", "M", "s", "j", "c", "d", "t", "p", "i", "a", "l", "L"]  # noqa: E501
        if jobstatus not in allowed_values:
            raise ValueError(
                "Invalid value for `jobstatus` ({0}), must be one of {1}"  # noqa: E501
                .format(jobstatus, allowed_values)
            )

        self._jobstatus = jobstatus

    @property
    def schedtime(self):
        """Gets the schedtime of this Job.  # noqa: E501

        Scheduled time (YYY-MM-DD HH:MM:SS)  # noqa: E501

        :return: The schedtime of this Job.  # noqa: E501
        :rtype: str
        """
        return self._schedtime

    @schedtime.setter
    def schedtime(self, schedtime):
        """Sets the schedtime of this Job.

        Scheduled time (YYY-MM-DD HH:MM:SS)  # noqa: E501

        :param schedtime: The schedtime of this Job.  # noqa: E501
        :type: str
        """

        self._schedtime = schedtime

    @property
    def schedtime_epoch(self):
        """Gets the schedtime_epoch of this Job.  # noqa: E501

        Scheduled time in Unix timestamp form  # noqa: E501

        :return: The schedtime_epoch of this Job.  # noqa: E501
        :rtype: int
        """
        return self._schedtime_epoch

    @schedtime_epoch.setter
    def schedtime_epoch(self, schedtime_epoch):
        """Sets the schedtime_epoch of this Job.

        Scheduled time in Unix timestamp form  # noqa: E501

        :param schedtime_epoch: The schedtime_epoch of this Job.  # noqa: E501
        :type: int
        """

        self._schedtime_epoch = schedtime_epoch

    @property
    def starttime(self):
        """Gets the starttime of this Job.  # noqa: E501

        Start time (YYYY-MM-DD HH:M:SS)  # noqa: E501

        :return: The starttime of this Job.  # noqa: E501
        :rtype: str
        """
        return self._starttime

    @starttime.setter
    def starttime(self, starttime):
        """Sets the starttime of this Job.

        Start time (YYYY-MM-DD HH:M:SS)  # noqa: E501

        :param starttime: The starttime of this Job.  # noqa: E501
        :type: str
        """

        self._starttime = starttime

    @property
    def starttime_epoch(self):
        """Gets the starttime_epoch of this Job.  # noqa: E501

        Start time in Unix timestamp form  # noqa: E501

        :return: The starttime_epoch of this Job.  # noqa: E501
        :rtype: int
        """
        return self._starttime_epoch

    @starttime_epoch.setter
    def starttime_epoch(self, starttime_epoch):
        """Sets the starttime_epoch of this Job.

        Start time in Unix timestamp form  # noqa: E501

        :param starttime_epoch: The starttime_epoch of this Job.  # noqa: E501
        :type: int
        """

        self._starttime_epoch = starttime_epoch

    @property
    def endtime(self):
        """Gets the endtime of this Job.  # noqa: E501

        End time (YYYY-MM-DD HH:M:SS)  # noqa: E501

        :return: The endtime of this Job.  # noqa: E501
        :rtype: str
        """
        return self._endtime

    @endtime.setter
    def endtime(self, endtime):
        """Sets the endtime of this Job.

        End time (YYYY-MM-DD HH:M:SS)  # noqa: E501

        :param endtime: The endtime of this Job.  # noqa: E501
        :type: str
        """

        self._endtime = endtime

    @property
    def endtime_epoch(self):
        """Gets the endtime_epoch of this Job.  # noqa: E501

        End time in Unix timestamp form  # noqa: E501

        :return: The endtime_epoch of this Job.  # noqa: E501
        :rtype: int
        """
        return self._endtime_epoch

    @endtime_epoch.setter
    def endtime_epoch(self, endtime_epoch):
        """Sets the endtime_epoch of this Job.

        End time in Unix timestamp form  # noqa: E501

        :param endtime_epoch: The endtime_epoch of this Job.  # noqa: E501
        :type: int
        """

        self._endtime_epoch = endtime_epoch

    @property
    def realendtime(self):
        """Gets the realendtime of this Job.  # noqa: E501

        Real end time (YYYY-MM-DD HH:M:SS)  # noqa: E501

        :return: The realendtime of this Job.  # noqa: E501
        :rtype: str
        """
        return self._realendtime

    @realendtime.setter
    def realendtime(self, realendtime):
        """Sets the realendtime of this Job.

        Real end time (YYYY-MM-DD HH:M:SS)  # noqa: E501

        :param realendtime: The realendtime of this Job.  # noqa: E501
        :type: str
        """

        self._realendtime = realendtime

    @property
    def realendtime_epoch(self):
        """Gets the realendtime_epoch of this Job.  # noqa: E501

        Real end time in Unix timestamp form  # noqa: E501

        :return: The realendtime_epoch of this Job.  # noqa: E501
        :rtype: int
        """
        return self._realendtime_epoch

    @realendtime_epoch.setter
    def realendtime_epoch(self, realendtime_epoch):
        """Sets the realendtime_epoch of this Job.

        Real end time in Unix timestamp form  # noqa: E501

        :param realendtime_epoch: The realendtime_epoch of this Job.  # noqa: E501
        :type: int
        """

        self._realendtime_epoch = realendtime_epoch

    @property
    def jobtdate(self):
        """Gets the jobtdate of this Job.  # noqa: E501

        Backup time/date in Unix timestamp form  # noqa: E501

        :return: The jobtdate of this Job.  # noqa: E501
        :rtype: int
        """
        return self._jobtdate

    @jobtdate.setter
    def jobtdate(self, jobtdate):
        """Sets the jobtdate of this Job.

        Backup time/date in Unix timestamp form  # noqa: E501

        :param jobtdate: The jobtdate of this Job.  # noqa: E501
        :type: int
        """

        self._jobtdate = jobtdate

    @property
    def volsessionid(self):
        """Gets the volsessionid of this Job.  # noqa: E501

        Volume session identifier  # noqa: E501

        :return: The volsessionid of this Job.  # noqa: E501
        :rtype: int
        """
        return self._volsessionid

    @volsessionid.setter
    def volsessionid(self, volsessionid):
        """Sets the volsessionid of this Job.

        Volume session identifier  # noqa: E501

        :param volsessionid: The volsessionid of this Job.  # noqa: E501
        :type: int
        """

        self._volsessionid = volsessionid

    @property
    def volsessiontime(self):
        """Gets the volsessiontime of this Job.  # noqa: E501

        Volume session time  # noqa: E501

        :return: The volsessiontime of this Job.  # noqa: E501
        :rtype: int
        """
        return self._volsessiontime

    @volsessiontime.setter
    def volsessiontime(self, volsessiontime):
        """Sets the volsessiontime of this Job.

        Volume session time  # noqa: E501

        :param volsessiontime: The volsessiontime of this Job.  # noqa: E501
        :type: int
        """

        self._volsessiontime = volsessiontime

    @property
    def jobfiles(self):
        """Gets the jobfiles of this Job.  # noqa: E501

        Job file count  # noqa: E501

        :return: The jobfiles of this Job.  # noqa: E501
        :rtype: int
        """
        return self._jobfiles

    @jobfiles.setter
    def jobfiles(self, jobfiles):
        """Sets the jobfiles of this Job.

        Job file count  # noqa: E501

        :param jobfiles: The jobfiles of this Job.  # noqa: E501
        :type: int
        """

        self._jobfiles = jobfiles

    @property
    def jobbytes(self):
        """Gets the jobbytes of this Job.  # noqa: E501

        Job size in bytes  # noqa: E501

        :return: The jobbytes of this Job.  # noqa: E501
        :rtype: int
        """
        return self._jobbytes

    @jobbytes.setter
    def jobbytes(self, jobbytes):
        """Sets the jobbytes of this Job.

        Job size in bytes  # noqa: E501

        :param jobbytes: The jobbytes of this Job.  # noqa: E501
        :type: int
        """

        self._jobbytes = jobbytes

    @property
    def readbytes(self):
        """Gets the readbytes of this Job.  # noqa: E501

        Read bytes  # noqa: E501

        :return: The readbytes of this Job.  # noqa: E501
        :rtype: int
        """
        return self._readbytes

    @readbytes.setter
    def readbytes(self, readbytes):
        """Sets the readbytes of this Job.

        Read bytes  # noqa: E501

        :param readbytes: The readbytes of this Job.  # noqa: E501
        :type: int
        """

        self._readbytes = readbytes

    @property
    def joberrors(self):
        """Gets the joberrors of this Job.  # noqa: E501

        Job error count  # noqa: E501

        :return: The joberrors of this Job.  # noqa: E501
        :rtype: int
        """
        return self._joberrors

    @joberrors.setter
    def joberrors(self, joberrors):
        """Sets the joberrors of this Job.

        Job error count  # noqa: E501

        :param joberrors: The joberrors of this Job.  # noqa: E501
        :type: int
        """

        self._joberrors = joberrors

    @property
    def jobmissingfiles(self):
        """Gets the jobmissingfiles of this Job.  # noqa: E501

        Job missing file count  # noqa: E501

        :return: The jobmissingfiles of this Job.  # noqa: E501
        :rtype: int
        """
        return self._jobmissingfiles

    @jobmissingfiles.setter
    def jobmissingfiles(self, jobmissingfiles):
        """Sets the jobmissingfiles of this Job.

        Job missing file count  # noqa: E501

        :param jobmissingfiles: The jobmissingfiles of this Job.  # noqa: E501
        :type: int
        """

        self._jobmissingfiles = jobmissingfiles

    @property
    def poolid(self):
        """Gets the poolid of this Job.  # noqa: E501

        Pool identifier  # noqa: E501

        :return: The poolid of this Job.  # noqa: E501
        :rtype: int
        """
        return self._poolid

    @poolid.setter
    def poolid(self, poolid):
        """Sets the poolid of this Job.

        Pool identifier  # noqa: E501

        :param poolid: The poolid of this Job.  # noqa: E501
        :type: int
        """

        self._poolid = poolid

    @property
    def filesetid(self):
        """Gets the filesetid of this Job.  # noqa: E501

        FileSet identifier  # noqa: E501

        :return: The filesetid of this Job.  # noqa: E501
        :rtype: int
        """
        return self._filesetid

    @filesetid.setter
    def filesetid(self, filesetid):
        """Sets the filesetid of this Job.

        FileSet identifier  # noqa: E501

        :param filesetid: The filesetid of this Job.  # noqa: E501
        :type: int
        """

        self._filesetid = filesetid

    @property
    def priorjobid(self):
        """Gets the priorjobid of this Job.  # noqa: E501

        JobId of migrated (prior) job  # noqa: E501

        :return: The priorjobid of this Job.  # noqa: E501
        :rtype: int
        """
        return self._priorjobid

    @priorjobid.setter
    def priorjobid(self, priorjobid):
        """Sets the priorjobid of this Job.

        JobId of migrated (prior) job  # noqa: E501

        :param priorjobid: The priorjobid of this Job.  # noqa: E501
        :type: int
        """

        self._priorjobid = priorjobid

    @property
    def purgedfiles(self):
        """Gets the purgedfiles of this Job.  # noqa: E501

        Purged file count  # noqa: E501

        :return: The purgedfiles of this Job.  # noqa: E501
        :rtype: int
        """
        return self._purgedfiles

    @purgedfiles.setter
    def purgedfiles(self, purgedfiles):
        """Sets the purgedfiles of this Job.

        Purged file count  # noqa: E501

        :param purgedfiles: The purgedfiles of this Job.  # noqa: E501
        :type: int
        """

        self._purgedfiles = purgedfiles

    @property
    def hasbase(self):
        """Gets the hasbase of this Job.  # noqa: E501

        Has base jobs, 1 if job uses base job, otherwise 0  # noqa: E501

        :return: The hasbase of this Job.  # noqa: E501
        :rtype: int
        """
        return self._hasbase

    @hasbase.setter
    def hasbase(self, hasbase):
        """Sets the hasbase of this Job.

        Has base jobs, 1 if job uses base job, otherwise 0  # noqa: E501

        :param hasbase: The hasbase of this Job.  # noqa: E501
        :type: int
        """

        self._hasbase = hasbase

    @property
    def hascache(self):
        """Gets the hascache of this Job.  # noqa: E501

        Has Bvfs cache, 1 if job has Bvfs cache, otherwise 0  # noqa: E501

        :return: The hascache of this Job.  # noqa: E501
        :rtype: int
        """
        return self._hascache

    @hascache.setter
    def hascache(self, hascache):
        """Sets the hascache of this Job.

        Has Bvfs cache, 1 if job has Bvfs cache, otherwise 0  # noqa: E501

        :param hascache: The hascache of this Job.  # noqa: E501
        :type: int
        """

        self._hascache = hascache

    @property
    def reviewed(self):
        """Gets the reviewed of this Job.  # noqa: E501

        Reviewed  # noqa: E501

        :return: The reviewed of this Job.  # noqa: E501
        :rtype: int
        """
        return self._reviewed

    @reviewed.setter
    def reviewed(self, reviewed):
        """Sets the reviewed of this Job.

        Reviewed  # noqa: E501

        :param reviewed: The reviewed of this Job.  # noqa: E501
        :type: int
        """

        self._reviewed = reviewed

    @property
    def comment(self):
        """Gets the comment of this Job.  # noqa: E501

        Job comment  # noqa: E501

        :return: The comment of this Job.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this Job.

        Job comment  # noqa: E501

        :param comment: The comment of this Job.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def filetable(self):
        """Gets the filetable of this Job.  # noqa: E501

        File table  # noqa: E501

        :return: The filetable of this Job.  # noqa: E501
        :rtype: str
        """
        return self._filetable

    @filetable.setter
    def filetable(self, filetable):
        """Sets the filetable of this Job.

        File table  # noqa: E501

        :param filetable: The filetable of this Job.  # noqa: E501
        :type: str
        """

        self._filetable = filetable

    @property
    def client(self):
        """Gets the client of this Job.  # noqa: E501

        Client name  # noqa: E501

        :return: The client of this Job.  # noqa: E501
        :rtype: str
        """
        return self._client

    @client.setter
    def client(self, client):
        """Sets the client of this Job.

        Client name  # noqa: E501

        :param client: The client of this Job.  # noqa: E501
        :type: str
        """

        self._client = client

    @property
    def pool(self):
        """Gets the pool of this Job.  # noqa: E501

        Pool name  # noqa: E501

        :return: The pool of this Job.  # noqa: E501
        :rtype: str
        """
        return self._pool

    @pool.setter
    def pool(self, pool):
        """Sets the pool of this Job.

        Pool name  # noqa: E501

        :param pool: The pool of this Job.  # noqa: E501
        :type: str
        """

        self._pool = pool

    @property
    def fileset(self):
        """Gets the fileset of this Job.  # noqa: E501

        FileSet name  # noqa: E501

        :return: The fileset of this Job.  # noqa: E501
        :rtype: str
        """
        return self._fileset

    @fileset.setter
    def fileset(self, fileset):
        """Sets the fileset of this Job.

        FileSet name  # noqa: E501

        :param fileset: The fileset of this Job.  # noqa: E501
        :type: str
        """

        self._fileset = fileset

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Job, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Job):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
