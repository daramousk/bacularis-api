# coding: utf-8

"""
    Bacularis API

    This is the Bacularis API documentation.  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: marcin.haba@bacula.pl
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Schedule(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'level': 'str',
        'type': 'str',
        'name': 'str',
        'client': 'str',
        'fileset': 'str',
        'schedtime_epoch': 'str',
        'schedtime': 'str',
        'priority': 'str',
        'schedule': 'str'
    }

    attribute_map = {
        'level': 'level',
        'type': 'type',
        'name': 'name',
        'client': 'client',
        'fileset': 'fileset',
        'schedtime_epoch': 'schedtime_epoch',
        'schedtime': 'schedtime',
        'priority': 'priority',
        'schedule': 'schedule'
    }

    def __init__(self, level=None, type=None, name=None, client=None, fileset=None, schedtime_epoch=None, schedtime=None, priority=None, schedule=None):  # noqa: E501
        """Schedule - a model defined in Swagger"""  # noqa: E501
        self._level = None
        self._type = None
        self._name = None
        self._client = None
        self._fileset = None
        self._schedtime_epoch = None
        self._schedtime = None
        self._priority = None
        self._schedule = None
        self.discriminator = None
        if level is not None:
            self.level = level
        if type is not None:
            self.type = type
        if name is not None:
            self.name = name
        if client is not None:
            self.client = client
        if fileset is not None:
            self.fileset = fileset
        if schedtime_epoch is not None:
            self.schedtime_epoch = schedtime_epoch
        if schedtime is not None:
            self.schedtime = schedtime
        if priority is not None:
            self.priority = priority
        if schedule is not None:
            self.schedule = schedule

    @property
    def level(self):
        """Gets the level of this Schedule.  # noqa: E501

        Job level letter  # noqa: E501

        :return: The level of this Schedule.  # noqa: E501
        :rtype: str
        """
        return self._level

    @level.setter
    def level(self, level):
        """Sets the level of this Schedule.

        Job level letter  # noqa: E501

        :param level: The level of this Schedule.  # noqa: E501
        :type: str
        """
        allowed_values = ["F", "I", "D", "B", "f", "V", "C", "O", "d"]  # noqa: E501
        if level not in allowed_values:
            raise ValueError(
                "Invalid value for `level` ({0}), must be one of {1}"  # noqa: E501
                .format(level, allowed_values)
            )

        self._level = level

    @property
    def type(self):
        """Gets the type of this Schedule.  # noqa: E501

        Job type letter  # noqa: E501

        :return: The type of this Schedule.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Schedule.

        Job type letter  # noqa: E501

        :param type: The type of this Schedule.  # noqa: E501
        :type: str
        """
        allowed_values = ["B", "M", "V", "R", "I", "D", "A", "C", "c", "g"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def name(self):
        """Gets the name of this Schedule.  # noqa: E501

        Job name  # noqa: E501

        :return: The name of this Schedule.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Schedule.

        Job name  # noqa: E501

        :param name: The name of this Schedule.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def client(self):
        """Gets the client of this Schedule.  # noqa: E501

        Client name  # noqa: E501

        :return: The client of this Schedule.  # noqa: E501
        :rtype: str
        """
        return self._client

    @client.setter
    def client(self, client):
        """Sets the client of this Schedule.

        Client name  # noqa: E501

        :param client: The client of this Schedule.  # noqa: E501
        :type: str
        """

        self._client = client

    @property
    def fileset(self):
        """Gets the fileset of this Schedule.  # noqa: E501

        FileSet name  # noqa: E501

        :return: The fileset of this Schedule.  # noqa: E501
        :rtype: str
        """
        return self._fileset

    @fileset.setter
    def fileset(self, fileset):
        """Sets the fileset of this Schedule.

        FileSet name  # noqa: E501

        :param fileset: The fileset of this Schedule.  # noqa: E501
        :type: str
        """

        self._fileset = fileset

    @property
    def schedtime_epoch(self):
        """Gets the schedtime_epoch of this Schedule.  # noqa: E501

        Scheduled time (UNIX timestamp format)  # noqa: E501

        :return: The schedtime_epoch of this Schedule.  # noqa: E501
        :rtype: str
        """
        return self._schedtime_epoch

    @schedtime_epoch.setter
    def schedtime_epoch(self, schedtime_epoch):
        """Sets the schedtime_epoch of this Schedule.

        Scheduled time (UNIX timestamp format)  # noqa: E501

        :param schedtime_epoch: The schedtime_epoch of this Schedule.  # noqa: E501
        :type: str
        """

        self._schedtime_epoch = schedtime_epoch

    @property
    def schedtime(self):
        """Gets the schedtime of this Schedule.  # noqa: E501

        Scheduled date in time (YYYY-MM-DD HH:M:SS)  # noqa: E501

        :return: The schedtime of this Schedule.  # noqa: E501
        :rtype: str
        """
        return self._schedtime

    @schedtime.setter
    def schedtime(self, schedtime):
        """Sets the schedtime of this Schedule.

        Scheduled date in time (YYYY-MM-DD HH:M:SS)  # noqa: E501

        :param schedtime: The schedtime of this Schedule.  # noqa: E501
        :type: str
        """

        self._schedtime = schedtime

    @property
    def priority(self):
        """Gets the priority of this Schedule.  # noqa: E501

        Job priority  # noqa: E501

        :return: The priority of this Schedule.  # noqa: E501
        :rtype: str
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this Schedule.

        Job priority  # noqa: E501

        :param priority: The priority of this Schedule.  # noqa: E501
        :type: str
        """

        self._priority = priority

    @property
    def schedule(self):
        """Gets the schedule of this Schedule.  # noqa: E501

        Schedule name  # noqa: E501

        :return: The schedule of this Schedule.  # noqa: E501
        :rtype: str
        """
        return self._schedule

    @schedule.setter
    def schedule(self, schedule):
        """Sets the schedule of this Schedule.

        Schedule name  # noqa: E501

        :param schedule: The schedule of this Schedule.  # noqa: E501
        :type: str
        """

        self._schedule = schedule

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Schedule, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Schedule):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
