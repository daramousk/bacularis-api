# coding: utf-8

"""
    Bacularis API

    This is the Bacularis API documentation.  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: marcin.haba@bacula.pl
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20080OutputRunning(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'level': 'str',
        'type': 'str',
        'status': 'str',
        'status_desc': 'str',
        'comment': 'str',
        'jobbytes': 'str',
        'jobfiles': 'str',
        'job': 'str',
        'name': 'str',
        'clientname': 'str',
        'fileset': 'str',
        'storage': 'str',
        'rstorage': 'str',
        'schedtime_epoch': 'str',
        'schedtime': 'str',
        'starttime_epoch': 'str',
        'starttime': 'str',
        'priority': 'str',
        'errors': 'str'
    }

    attribute_map = {
        'level': 'level',
        'type': 'type',
        'status': 'status',
        'status_desc': 'status_desc',
        'comment': 'comment',
        'jobbytes': 'jobbytes',
        'jobfiles': 'jobfiles',
        'job': 'job',
        'name': 'name',
        'clientname': 'clientname',
        'fileset': 'fileset',
        'storage': 'storage',
        'rstorage': 'rstorage',
        'schedtime_epoch': 'schedtime_epoch',
        'schedtime': 'schedtime',
        'starttime_epoch': 'starttime_epoch',
        'starttime': 'starttime',
        'priority': 'priority',
        'errors': 'errors'
    }

    def __init__(self, level=None, type=None, status=None, status_desc=None, comment=None, jobbytes=None, jobfiles=None, job=None, name=None, clientname=None, fileset=None, storage=None, rstorage=None, schedtime_epoch=None, schedtime=None, starttime_epoch=None, starttime=None, priority=None, errors=None):  # noqa: E501
        """InlineResponse20080OutputRunning - a model defined in Swagger"""  # noqa: E501
        self._level = None
        self._type = None
        self._status = None
        self._status_desc = None
        self._comment = None
        self._jobbytes = None
        self._jobfiles = None
        self._job = None
        self._name = None
        self._clientname = None
        self._fileset = None
        self._storage = None
        self._rstorage = None
        self._schedtime_epoch = None
        self._schedtime = None
        self._starttime_epoch = None
        self._starttime = None
        self._priority = None
        self._errors = None
        self.discriminator = None
        if level is not None:
            self.level = level
        if type is not None:
            self.type = type
        if status is not None:
            self.status = status
        if status_desc is not None:
            self.status_desc = status_desc
        if comment is not None:
            self.comment = comment
        if jobbytes is not None:
            self.jobbytes = jobbytes
        if jobfiles is not None:
            self.jobfiles = jobfiles
        if job is not None:
            self.job = job
        if name is not None:
            self.name = name
        if clientname is not None:
            self.clientname = clientname
        if fileset is not None:
            self.fileset = fileset
        if storage is not None:
            self.storage = storage
        if rstorage is not None:
            self.rstorage = rstorage
        if schedtime_epoch is not None:
            self.schedtime_epoch = schedtime_epoch
        if schedtime is not None:
            self.schedtime = schedtime
        if starttime_epoch is not None:
            self.starttime_epoch = starttime_epoch
        if starttime is not None:
            self.starttime = starttime
        if priority is not None:
            self.priority = priority
        if errors is not None:
            self.errors = errors

    @property
    def level(self):
        """Gets the level of this InlineResponse20080OutputRunning.  # noqa: E501

        Job level  # noqa: E501

        :return: The level of this InlineResponse20080OutputRunning.  # noqa: E501
        :rtype: str
        """
        return self._level

    @level.setter
    def level(self, level):
        """Sets the level of this InlineResponse20080OutputRunning.

        Job level  # noqa: E501

        :param level: The level of this InlineResponse20080OutputRunning.  # noqa: E501
        :type: str
        """

        self._level = level

    @property
    def type(self):
        """Gets the type of this InlineResponse20080OutputRunning.  # noqa: E501

        Job type  # noqa: E501

        :return: The type of this InlineResponse20080OutputRunning.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this InlineResponse20080OutputRunning.

        Job type  # noqa: E501

        :param type: The type of this InlineResponse20080OutputRunning.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def status(self):
        """Gets the status of this InlineResponse20080OutputRunning.  # noqa: E501

        Job status letter  # noqa: E501

        :return: The status of this InlineResponse20080OutputRunning.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this InlineResponse20080OutputRunning.

        Job status letter  # noqa: E501

        :param status: The status of this InlineResponse20080OutputRunning.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def status_desc(self):
        """Gets the status_desc of this InlineResponse20080OutputRunning.  # noqa: E501

        Status description  # noqa: E501

        :return: The status_desc of this InlineResponse20080OutputRunning.  # noqa: E501
        :rtype: str
        """
        return self._status_desc

    @status_desc.setter
    def status_desc(self, status_desc):
        """Sets the status_desc of this InlineResponse20080OutputRunning.

        Status description  # noqa: E501

        :param status_desc: The status_desc of this InlineResponse20080OutputRunning.  # noqa: E501
        :type: str
        """

        self._status_desc = status_desc

    @property
    def comment(self):
        """Gets the comment of this InlineResponse20080OutputRunning.  # noqa: E501

        Comment  # noqa: E501

        :return: The comment of this InlineResponse20080OutputRunning.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this InlineResponse20080OutputRunning.

        Comment  # noqa: E501

        :param comment: The comment of this InlineResponse20080OutputRunning.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def jobbytes(self):
        """Gets the jobbytes of this InlineResponse20080OutputRunning.  # noqa: E501

        jobbytes  # noqa: E501

        :return: The jobbytes of this InlineResponse20080OutputRunning.  # noqa: E501
        :rtype: str
        """
        return self._jobbytes

    @jobbytes.setter
    def jobbytes(self, jobbytes):
        """Sets the jobbytes of this InlineResponse20080OutputRunning.

        jobbytes  # noqa: E501

        :param jobbytes: The jobbytes of this InlineResponse20080OutputRunning.  # noqa: E501
        :type: str
        """

        self._jobbytes = jobbytes

    @property
    def jobfiles(self):
        """Gets the jobfiles of this InlineResponse20080OutputRunning.  # noqa: E501

        Job files  # noqa: E501

        :return: The jobfiles of this InlineResponse20080OutputRunning.  # noqa: E501
        :rtype: str
        """
        return self._jobfiles

    @jobfiles.setter
    def jobfiles(self, jobfiles):
        """Sets the jobfiles of this InlineResponse20080OutputRunning.

        Job files  # noqa: E501

        :param jobfiles: The jobfiles of this InlineResponse20080OutputRunning.  # noqa: E501
        :type: str
        """

        self._jobfiles = jobfiles

    @property
    def job(self):
        """Gets the job of this InlineResponse20080OutputRunning.  # noqa: E501

        Job uname  # noqa: E501

        :return: The job of this InlineResponse20080OutputRunning.  # noqa: E501
        :rtype: str
        """
        return self._job

    @job.setter
    def job(self, job):
        """Sets the job of this InlineResponse20080OutputRunning.

        Job uname  # noqa: E501

        :param job: The job of this InlineResponse20080OutputRunning.  # noqa: E501
        :type: str
        """

        self._job = job

    @property
    def name(self):
        """Gets the name of this InlineResponse20080OutputRunning.  # noqa: E501

        Job name  # noqa: E501

        :return: The name of this InlineResponse20080OutputRunning.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InlineResponse20080OutputRunning.

        Job name  # noqa: E501

        :param name: The name of this InlineResponse20080OutputRunning.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def clientname(self):
        """Gets the clientname of this InlineResponse20080OutputRunning.  # noqa: E501

        Client name  # noqa: E501

        :return: The clientname of this InlineResponse20080OutputRunning.  # noqa: E501
        :rtype: str
        """
        return self._clientname

    @clientname.setter
    def clientname(self, clientname):
        """Sets the clientname of this InlineResponse20080OutputRunning.

        Client name  # noqa: E501

        :param clientname: The clientname of this InlineResponse20080OutputRunning.  # noqa: E501
        :type: str
        """

        self._clientname = clientname

    @property
    def fileset(self):
        """Gets the fileset of this InlineResponse20080OutputRunning.  # noqa: E501

        Fileset name  # noqa: E501

        :return: The fileset of this InlineResponse20080OutputRunning.  # noqa: E501
        :rtype: str
        """
        return self._fileset

    @fileset.setter
    def fileset(self, fileset):
        """Sets the fileset of this InlineResponse20080OutputRunning.

        Fileset name  # noqa: E501

        :param fileset: The fileset of this InlineResponse20080OutputRunning.  # noqa: E501
        :type: str
        """

        self._fileset = fileset

    @property
    def storage(self):
        """Gets the storage of this InlineResponse20080OutputRunning.  # noqa: E501

        Storage name  # noqa: E501

        :return: The storage of this InlineResponse20080OutputRunning.  # noqa: E501
        :rtype: str
        """
        return self._storage

    @storage.setter
    def storage(self, storage):
        """Sets the storage of this InlineResponse20080OutputRunning.

        Storage name  # noqa: E501

        :param storage: The storage of this InlineResponse20080OutputRunning.  # noqa: E501
        :type: str
        """

        self._storage = storage

    @property
    def rstorage(self):
        """Gets the rstorage of this InlineResponse20080OutputRunning.  # noqa: E501

        Restore storage name  # noqa: E501

        :return: The rstorage of this InlineResponse20080OutputRunning.  # noqa: E501
        :rtype: str
        """
        return self._rstorage

    @rstorage.setter
    def rstorage(self, rstorage):
        """Sets the rstorage of this InlineResponse20080OutputRunning.

        Restore storage name  # noqa: E501

        :param rstorage: The rstorage of this InlineResponse20080OutputRunning.  # noqa: E501
        :type: str
        """

        self._rstorage = rstorage

    @property
    def schedtime_epoch(self):
        """Gets the schedtime_epoch of this InlineResponse20080OutputRunning.  # noqa: E501

        Schedule time epoch  # noqa: E501

        :return: The schedtime_epoch of this InlineResponse20080OutputRunning.  # noqa: E501
        :rtype: str
        """
        return self._schedtime_epoch

    @schedtime_epoch.setter
    def schedtime_epoch(self, schedtime_epoch):
        """Sets the schedtime_epoch of this InlineResponse20080OutputRunning.

        Schedule time epoch  # noqa: E501

        :param schedtime_epoch: The schedtime_epoch of this InlineResponse20080OutputRunning.  # noqa: E501
        :type: str
        """

        self._schedtime_epoch = schedtime_epoch

    @property
    def schedtime(self):
        """Gets the schedtime of this InlineResponse20080OutputRunning.  # noqa: E501

        Schedule time  # noqa: E501

        :return: The schedtime of this InlineResponse20080OutputRunning.  # noqa: E501
        :rtype: str
        """
        return self._schedtime

    @schedtime.setter
    def schedtime(self, schedtime):
        """Sets the schedtime of this InlineResponse20080OutputRunning.

        Schedule time  # noqa: E501

        :param schedtime: The schedtime of this InlineResponse20080OutputRunning.  # noqa: E501
        :type: str
        """

        self._schedtime = schedtime

    @property
    def starttime_epoch(self):
        """Gets the starttime_epoch of this InlineResponse20080OutputRunning.  # noqa: E501

        Start time epoch  # noqa: E501

        :return: The starttime_epoch of this InlineResponse20080OutputRunning.  # noqa: E501
        :rtype: str
        """
        return self._starttime_epoch

    @starttime_epoch.setter
    def starttime_epoch(self, starttime_epoch):
        """Sets the starttime_epoch of this InlineResponse20080OutputRunning.

        Start time epoch  # noqa: E501

        :param starttime_epoch: The starttime_epoch of this InlineResponse20080OutputRunning.  # noqa: E501
        :type: str
        """

        self._starttime_epoch = starttime_epoch

    @property
    def starttime(self):
        """Gets the starttime of this InlineResponse20080OutputRunning.  # noqa: E501

        Start time  # noqa: E501

        :return: The starttime of this InlineResponse20080OutputRunning.  # noqa: E501
        :rtype: str
        """
        return self._starttime

    @starttime.setter
    def starttime(self, starttime):
        """Sets the starttime of this InlineResponse20080OutputRunning.

        Start time  # noqa: E501

        :param starttime: The starttime of this InlineResponse20080OutputRunning.  # noqa: E501
        :type: str
        """

        self._starttime = starttime

    @property
    def priority(self):
        """Gets the priority of this InlineResponse20080OutputRunning.  # noqa: E501

        Priority  # noqa: E501

        :return: The priority of this InlineResponse20080OutputRunning.  # noqa: E501
        :rtype: str
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this InlineResponse20080OutputRunning.

        Priority  # noqa: E501

        :param priority: The priority of this InlineResponse20080OutputRunning.  # noqa: E501
        :type: str
        """

        self._priority = priority

    @property
    def errors(self):
        """Gets the errors of this InlineResponse20080OutputRunning.  # noqa: E501

        Errors  # noqa: E501

        :return: The errors of this InlineResponse20080OutputRunning.  # noqa: E501
        :rtype: str
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this InlineResponse20080OutputRunning.

        Errors  # noqa: E501

        :param errors: The errors of this InlineResponse20080OutputRunning.  # noqa: E501
        :type: str
        """

        self._errors = errors

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20080OutputRunning, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20080OutputRunning):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
