# coding: utf-8

"""
    Bacularis API

    This is the Bacularis API documentation.  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: marcin.haba@bacula.pl
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Pool(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'poolid': 'int',
        'name': 'str',
        'numvols': 'int',
        'maxvols': 'int',
        'useonce': 'int',
        'usecatalog': 'int',
        'acceptanyvolume': 'int',
        'volretention': 'int',
        'voluseduration': 'int',
        'maxvoljobs': 'int',
        'maxvolfiles': 'int',
        'maxvolbytes': 'int',
        'autoprune': 'int',
        'recycle': 'int',
        'actiononpurge': 'int',
        'pooltype': 'str',
        'labeltype': 'int',
        'labelformat': 'str',
        'enabled': 'int',
        'scratchpoolid': 'int',
        'recyclepoolid': 'int',
        'nextpoolid': 'int',
        'migrationhighbytes': 'int',
        'migrationlowbytes': 'int',
        'migrationtime': 'int',
        'cacheretention': 'int'
    }

    attribute_map = {
        'poolid': 'poolid',
        'name': 'name',
        'numvols': 'numvols',
        'maxvols': 'maxvols',
        'useonce': 'useonce',
        'usecatalog': 'usecatalog',
        'acceptanyvolume': 'acceptanyvolume',
        'volretention': 'volretention',
        'voluseduration': 'voluseduration',
        'maxvoljobs': 'maxvoljobs',
        'maxvolfiles': 'maxvolfiles',
        'maxvolbytes': 'maxvolbytes',
        'autoprune': 'autoprune',
        'recycle': 'recycle',
        'actiononpurge': 'actiononpurge',
        'pooltype': 'pooltype',
        'labeltype': 'labeltype',
        'labelformat': 'labelformat',
        'enabled': 'enabled',
        'scratchpoolid': 'scratchpoolid',
        'recyclepoolid': 'recyclepoolid',
        'nextpoolid': 'nextpoolid',
        'migrationhighbytes': 'migrationhighbytes',
        'migrationlowbytes': 'migrationlowbytes',
        'migrationtime': 'migrationtime',
        'cacheretention': 'cacheretention'
    }

    def __init__(self, poolid=None, name=None, numvols=None, maxvols=None, useonce=None, usecatalog=None, acceptanyvolume=None, volretention=None, voluseduration=None, maxvoljobs=None, maxvolfiles=None, maxvolbytes=None, autoprune=None, recycle=None, actiononpurge=None, pooltype=None, labeltype=None, labelformat=None, enabled=None, scratchpoolid=None, recyclepoolid=None, nextpoolid=None, migrationhighbytes=None, migrationlowbytes=None, migrationtime=None, cacheretention=None):  # noqa: E501
        """Pool - a model defined in Swagger"""  # noqa: E501
        self._poolid = None
        self._name = None
        self._numvols = None
        self._maxvols = None
        self._useonce = None
        self._usecatalog = None
        self._acceptanyvolume = None
        self._volretention = None
        self._voluseduration = None
        self._maxvoljobs = None
        self._maxvolfiles = None
        self._maxvolbytes = None
        self._autoprune = None
        self._recycle = None
        self._actiononpurge = None
        self._pooltype = None
        self._labeltype = None
        self._labelformat = None
        self._enabled = None
        self._scratchpoolid = None
        self._recyclepoolid = None
        self._nextpoolid = None
        self._migrationhighbytes = None
        self._migrationlowbytes = None
        self._migrationtime = None
        self._cacheretention = None
        self.discriminator = None
        if poolid is not None:
            self.poolid = poolid
        if name is not None:
            self.name = name
        if numvols is not None:
            self.numvols = numvols
        if maxvols is not None:
            self.maxvols = maxvols
        if useonce is not None:
            self.useonce = useonce
        if usecatalog is not None:
            self.usecatalog = usecatalog
        if acceptanyvolume is not None:
            self.acceptanyvolume = acceptanyvolume
        if volretention is not None:
            self.volretention = volretention
        if voluseduration is not None:
            self.voluseduration = voluseduration
        if maxvoljobs is not None:
            self.maxvoljobs = maxvoljobs
        if maxvolfiles is not None:
            self.maxvolfiles = maxvolfiles
        if maxvolbytes is not None:
            self.maxvolbytes = maxvolbytes
        if autoprune is not None:
            self.autoprune = autoprune
        if recycle is not None:
            self.recycle = recycle
        if actiononpurge is not None:
            self.actiononpurge = actiononpurge
        if pooltype is not None:
            self.pooltype = pooltype
        if labeltype is not None:
            self.labeltype = labeltype
        if labelformat is not None:
            self.labelformat = labelformat
        if enabled is not None:
            self.enabled = enabled
        if scratchpoolid is not None:
            self.scratchpoolid = scratchpoolid
        if recyclepoolid is not None:
            self.recyclepoolid = recyclepoolid
        if nextpoolid is not None:
            self.nextpoolid = nextpoolid
        if migrationhighbytes is not None:
            self.migrationhighbytes = migrationhighbytes
        if migrationlowbytes is not None:
            self.migrationlowbytes = migrationlowbytes
        if migrationtime is not None:
            self.migrationtime = migrationtime
        if cacheretention is not None:
            self.cacheretention = cacheretention

    @property
    def poolid(self):
        """Gets the poolid of this Pool.  # noqa: E501

        Unique pool identifier  # noqa: E501

        :return: The poolid of this Pool.  # noqa: E501
        :rtype: int
        """
        return self._poolid

    @poolid.setter
    def poolid(self, poolid):
        """Sets the poolid of this Pool.

        Unique pool identifier  # noqa: E501

        :param poolid: The poolid of this Pool.  # noqa: E501
        :type: int
        """

        self._poolid = poolid

    @property
    def name(self):
        """Gets the name of this Pool.  # noqa: E501

        Pool name  # noqa: E501

        :return: The name of this Pool.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Pool.

        Pool name  # noqa: E501

        :param name: The name of this Pool.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def numvols(self):
        """Gets the numvols of this Pool.  # noqa: E501

        Number of volumes in pool  # noqa: E501

        :return: The numvols of this Pool.  # noqa: E501
        :rtype: int
        """
        return self._numvols

    @numvols.setter
    def numvols(self, numvols):
        """Sets the numvols of this Pool.

        Number of volumes in pool  # noqa: E501

        :param numvols: The numvols of this Pool.  # noqa: E501
        :type: int
        """

        self._numvols = numvols

    @property
    def maxvols(self):
        """Gets the maxvols of this Pool.  # noqa: E501

        Maximum number volumes in pool  # noqa: E501

        :return: The maxvols of this Pool.  # noqa: E501
        :rtype: int
        """
        return self._maxvols

    @maxvols.setter
    def maxvols(self, maxvols):
        """Sets the maxvols of this Pool.

        Maximum number volumes in pool  # noqa: E501

        :param maxvols: The maxvols of this Pool.  # noqa: E501
        :type: int
        """

        self._maxvols = maxvols

    @property
    def useonce(self):
        """Gets the useonce of this Pool.  # noqa: E501

        Use volume only once (deprecated)  # noqa: E501

        :return: The useonce of this Pool.  # noqa: E501
        :rtype: int
        """
        return self._useonce

    @useonce.setter
    def useonce(self, useonce):
        """Sets the useonce of this Pool.

        Use volume only once (deprecated)  # noqa: E501

        :param useonce: The useonce of this Pool.  # noqa: E501
        :type: int
        """

        self._useonce = useonce

    @property
    def usecatalog(self):
        """Gets the usecatalog of this Pool.  # noqa: E501

        Use catalog  # noqa: E501

        :return: The usecatalog of this Pool.  # noqa: E501
        :rtype: int
        """
        return self._usecatalog

    @usecatalog.setter
    def usecatalog(self, usecatalog):
        """Sets the usecatalog of this Pool.

        Use catalog  # noqa: E501

        :param usecatalog: The usecatalog of this Pool.  # noqa: E501
        :type: int
        """

        self._usecatalog = usecatalog

    @property
    def acceptanyvolume(self):
        """Gets the acceptanyvolume of this Pool.  # noqa: E501

        Accept any volume sequence  # noqa: E501

        :return: The acceptanyvolume of this Pool.  # noqa: E501
        :rtype: int
        """
        return self._acceptanyvolume

    @acceptanyvolume.setter
    def acceptanyvolume(self, acceptanyvolume):
        """Sets the acceptanyvolume of this Pool.

        Accept any volume sequence  # noqa: E501

        :param acceptanyvolume: The acceptanyvolume of this Pool.  # noqa: E501
        :type: int
        """

        self._acceptanyvolume = acceptanyvolume

    @property
    def volretention(self):
        """Gets the volretention of this Pool.  # noqa: E501

        Volume retention time  # noqa: E501

        :return: The volretention of this Pool.  # noqa: E501
        :rtype: int
        """
        return self._volretention

    @volretention.setter
    def volretention(self, volretention):
        """Sets the volretention of this Pool.

        Volume retention time  # noqa: E501

        :param volretention: The volretention of this Pool.  # noqa: E501
        :type: int
        """

        self._volretention = volretention

    @property
    def voluseduration(self):
        """Gets the voluseduration of this Pool.  # noqa: E501

        Volume use duration  # noqa: E501

        :return: The voluseduration of this Pool.  # noqa: E501
        :rtype: int
        """
        return self._voluseduration

    @voluseduration.setter
    def voluseduration(self, voluseduration):
        """Sets the voluseduration of this Pool.

        Volume use duration  # noqa: E501

        :param voluseduration: The voluseduration of this Pool.  # noqa: E501
        :type: int
        """

        self._voluseduration = voluseduration

    @property
    def maxvoljobs(self):
        """Gets the maxvoljobs of this Pool.  # noqa: E501

        Maximum number of jobs on volume  # noqa: E501

        :return: The maxvoljobs of this Pool.  # noqa: E501
        :rtype: int
        """
        return self._maxvoljobs

    @maxvoljobs.setter
    def maxvoljobs(self, maxvoljobs):
        """Sets the maxvoljobs of this Pool.

        Maximum number of jobs on volume  # noqa: E501

        :param maxvoljobs: The maxvoljobs of this Pool.  # noqa: E501
        :type: int
        """

        self._maxvoljobs = maxvoljobs

    @property
    def maxvolfiles(self):
        """Gets the maxvolfiles of this Pool.  # noqa: E501

        Maximum number of files on volume  # noqa: E501

        :return: The maxvolfiles of this Pool.  # noqa: E501
        :rtype: int
        """
        return self._maxvolfiles

    @maxvolfiles.setter
    def maxvolfiles(self, maxvolfiles):
        """Sets the maxvolfiles of this Pool.

        Maximum number of files on volume  # noqa: E501

        :param maxvolfiles: The maxvolfiles of this Pool.  # noqa: E501
        :type: int
        """

        self._maxvolfiles = maxvolfiles

    @property
    def maxvolbytes(self):
        """Gets the maxvolbytes of this Pool.  # noqa: E501

        Maximum number of bytes on volume  # noqa: E501

        :return: The maxvolbytes of this Pool.  # noqa: E501
        :rtype: int
        """
        return self._maxvolbytes

    @maxvolbytes.setter
    def maxvolbytes(self, maxvolbytes):
        """Sets the maxvolbytes of this Pool.

        Maximum number of bytes on volume  # noqa: E501

        :param maxvolbytes: The maxvolbytes of this Pool.  # noqa: E501
        :type: int
        """

        self._maxvolbytes = maxvolbytes

    @property
    def autoprune(self):
        """Gets the autoprune of this Pool.  # noqa: E501

        AutoPrune (automatic pruning) for volume  # noqa: E501

        :return: The autoprune of this Pool.  # noqa: E501
        :rtype: int
        """
        return self._autoprune

    @autoprune.setter
    def autoprune(self, autoprune):
        """Sets the autoprune of this Pool.

        AutoPrune (automatic pruning) for volume  # noqa: E501

        :param autoprune: The autoprune of this Pool.  # noqa: E501
        :type: int
        """

        self._autoprune = autoprune

    @property
    def recycle(self):
        """Gets the recycle of this Pool.  # noqa: E501

        If set to 1 it enables volume recycling  # noqa: E501

        :return: The recycle of this Pool.  # noqa: E501
        :rtype: int
        """
        return self._recycle

    @recycle.setter
    def recycle(self, recycle):
        """Sets the recycle of this Pool.

        If set to 1 it enables volume recycling  # noqa: E501

        :param recycle: The recycle of this Pool.  # noqa: E501
        :type: int
        """

        self._recycle = recycle

    @property
    def actiononpurge(self):
        """Gets the actiononpurge of this Pool.  # noqa: E501

        Action on purge to do on volumes  # noqa: E501

        :return: The actiononpurge of this Pool.  # noqa: E501
        :rtype: int
        """
        return self._actiononpurge

    @actiononpurge.setter
    def actiononpurge(self, actiononpurge):
        """Sets the actiononpurge of this Pool.

        Action on purge to do on volumes  # noqa: E501

        :param actiononpurge: The actiononpurge of this Pool.  # noqa: E501
        :type: int
        """

        self._actiononpurge = actiononpurge

    @property
    def pooltype(self):
        """Gets the pooltype of this Pool.  # noqa: E501

        Pool type. Currently is possible to set only one value: 'Backup'  # noqa: E501

        :return: The pooltype of this Pool.  # noqa: E501
        :rtype: str
        """
        return self._pooltype

    @pooltype.setter
    def pooltype(self, pooltype):
        """Sets the pooltype of this Pool.

        Pool type. Currently is possible to set only one value: 'Backup'  # noqa: E501

        :param pooltype: The pooltype of this Pool.  # noqa: E501
        :type: str
        """

        self._pooltype = pooltype

    @property
    def labeltype(self):
        """Gets the labeltype of this Pool.  # noqa: E501

        Label type  # noqa: E501

        :return: The labeltype of this Pool.  # noqa: E501
        :rtype: int
        """
        return self._labeltype

    @labeltype.setter
    def labeltype(self, labeltype):
        """Sets the labeltype of this Pool.

        Label type  # noqa: E501

        :param labeltype: The labeltype of this Pool.  # noqa: E501
        :type: int
        """

        self._labeltype = labeltype

    @property
    def labelformat(self):
        """Gets the labelformat of this Pool.  # noqa: E501

        Label format  # noqa: E501

        :return: The labelformat of this Pool.  # noqa: E501
        :rtype: str
        """
        return self._labelformat

    @labelformat.setter
    def labelformat(self, labelformat):
        """Sets the labelformat of this Pool.

        Label format  # noqa: E501

        :param labelformat: The labelformat of this Pool.  # noqa: E501
        :type: str
        """

        self._labelformat = labelformat

    @property
    def enabled(self):
        """Gets the enabled of this Pool.  # noqa: E501

        Determines if volume is enabled or not  # noqa: E501

        :return: The enabled of this Pool.  # noqa: E501
        :rtype: int
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this Pool.

        Determines if volume is enabled or not  # noqa: E501

        :param enabled: The enabled of this Pool.  # noqa: E501
        :type: int
        """

        self._enabled = enabled

    @property
    def scratchpoolid(self):
        """Gets the scratchpoolid of this Pool.  # noqa: E501

        Scratch pool identifier  # noqa: E501

        :return: The scratchpoolid of this Pool.  # noqa: E501
        :rtype: int
        """
        return self._scratchpoolid

    @scratchpoolid.setter
    def scratchpoolid(self, scratchpoolid):
        """Sets the scratchpoolid of this Pool.

        Scratch pool identifier  # noqa: E501

        :param scratchpoolid: The scratchpoolid of this Pool.  # noqa: E501
        :type: int
        """

        self._scratchpoolid = scratchpoolid

    @property
    def recyclepoolid(self):
        """Gets the recyclepoolid of this Pool.  # noqa: E501

        Recycle pool identifier  # noqa: E501

        :return: The recyclepoolid of this Pool.  # noqa: E501
        :rtype: int
        """
        return self._recyclepoolid

    @recyclepoolid.setter
    def recyclepoolid(self, recyclepoolid):
        """Sets the recyclepoolid of this Pool.

        Recycle pool identifier  # noqa: E501

        :param recyclepoolid: The recyclepoolid of this Pool.  # noqa: E501
        :type: int
        """

        self._recyclepoolid = recyclepoolid

    @property
    def nextpoolid(self):
        """Gets the nextpoolid of this Pool.  # noqa: E501

        Next pool identifier  # noqa: E501

        :return: The nextpoolid of this Pool.  # noqa: E501
        :rtype: int
        """
        return self._nextpoolid

    @nextpoolid.setter
    def nextpoolid(self, nextpoolid):
        """Sets the nextpoolid of this Pool.

        Next pool identifier  # noqa: E501

        :param nextpoolid: The nextpoolid of this Pool.  # noqa: E501
        :type: int
        """

        self._nextpoolid = nextpoolid

    @property
    def migrationhighbytes(self):
        """Gets the migrationhighbytes of this Pool.  # noqa: E501

        Migration high bytes  # noqa: E501

        :return: The migrationhighbytes of this Pool.  # noqa: E501
        :rtype: int
        """
        return self._migrationhighbytes

    @migrationhighbytes.setter
    def migrationhighbytes(self, migrationhighbytes):
        """Sets the migrationhighbytes of this Pool.

        Migration high bytes  # noqa: E501

        :param migrationhighbytes: The migrationhighbytes of this Pool.  # noqa: E501
        :type: int
        """

        self._migrationhighbytes = migrationhighbytes

    @property
    def migrationlowbytes(self):
        """Gets the migrationlowbytes of this Pool.  # noqa: E501

        Migration low bytes  # noqa: E501

        :return: The migrationlowbytes of this Pool.  # noqa: E501
        :rtype: int
        """
        return self._migrationlowbytes

    @migrationlowbytes.setter
    def migrationlowbytes(self, migrationlowbytes):
        """Sets the migrationlowbytes of this Pool.

        Migration low bytes  # noqa: E501

        :param migrationlowbytes: The migrationlowbytes of this Pool.  # noqa: E501
        :type: int
        """

        self._migrationlowbytes = migrationlowbytes

    @property
    def migrationtime(self):
        """Gets the migrationtime of this Pool.  # noqa: E501

        Migration time  # noqa: E501

        :return: The migrationtime of this Pool.  # noqa: E501
        :rtype: int
        """
        return self._migrationtime

    @migrationtime.setter
    def migrationtime(self, migrationtime):
        """Sets the migrationtime of this Pool.

        Migration time  # noqa: E501

        :param migrationtime: The migrationtime of this Pool.  # noqa: E501
        :type: int
        """

        self._migrationtime = migrationtime

    @property
    def cacheretention(self):
        """Gets the cacheretention of this Pool.  # noqa: E501

        Cache retention time  # noqa: E501

        :return: The cacheretention of this Pool.  # noqa: E501
        :rtype: int
        """
        return self._cacheretention

    @cacheretention.setter
    def cacheretention(self, cacheretention):
        """Sets the cacheretention of this Pool.

        Cache retention time  # noqa: E501

        :param cacheretention: The cacheretention of this Pool.  # noqa: E501
        :type: int
        """

        self._cacheretention = cacheretention

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Pool, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Pool):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
