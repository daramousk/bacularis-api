# coding: utf-8

"""
    Bacularis API

    This is the Bacularis API documentation.  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: marcin.haba@bacula.pl
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20022Output(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'job_count': 'int',
        'most_occupied_client': 'str',
        'most_occupied_client_count': 'int',
        'most_occupied_job': 'str',
        'most_occupied_job_count': 'int',
        'most_occupied_pool': 'str',
        'most_occupied_pool_count': 'int',
        'bytes': 'int',
        'files': 'int'
    }

    attribute_map = {
        'job_count': 'job_count',
        'most_occupied_client': 'most_occupied_client',
        'most_occupied_client_count': 'most_occupied_client_count',
        'most_occupied_job': 'most_occupied_job',
        'most_occupied_job_count': 'most_occupied_job_count',
        'most_occupied_pool': 'most_occupied_pool',
        'most_occupied_pool_count': 'most_occupied_pool_count',
        'bytes': 'bytes',
        'files': 'files'
    }

    def __init__(self, job_count=None, most_occupied_client=None, most_occupied_client_count=None, most_occupied_job=None, most_occupied_job_count=None, most_occupied_pool=None, most_occupied_pool_count=None, bytes=None, files=None):  # noqa: E501
        """InlineResponse20022Output - a model defined in Swagger"""  # noqa: E501
        self._job_count = None
        self._most_occupied_client = None
        self._most_occupied_client_count = None
        self._most_occupied_job = None
        self._most_occupied_job_count = None
        self._most_occupied_pool = None
        self._most_occupied_pool_count = None
        self._bytes = None
        self._files = None
        self.discriminator = None
        if job_count is not None:
            self.job_count = job_count
        if most_occupied_client is not None:
            self.most_occupied_client = most_occupied_client
        if most_occupied_client_count is not None:
            self.most_occupied_client_count = most_occupied_client_count
        if most_occupied_job is not None:
            self.most_occupied_job = most_occupied_job
        if most_occupied_job_count is not None:
            self.most_occupied_job_count = most_occupied_job_count
        if most_occupied_pool is not None:
            self.most_occupied_pool = most_occupied_pool
        if most_occupied_pool_count is not None:
            self.most_occupied_pool_count = most_occupied_pool_count
        if bytes is not None:
            self.bytes = bytes
        if files is not None:
            self.files = files

    @property
    def job_count(self):
        """Gets the job_count of this InlineResponse20022Output.  # noqa: E501

        Total number of jobs  # noqa: E501

        :return: The job_count of this InlineResponse20022Output.  # noqa: E501
        :rtype: int
        """
        return self._job_count

    @job_count.setter
    def job_count(self, job_count):
        """Sets the job_count of this InlineResponse20022Output.

        Total number of jobs  # noqa: E501

        :param job_count: The job_count of this InlineResponse20022Output.  # noqa: E501
        :type: int
        """

        self._job_count = job_count

    @property
    def most_occupied_client(self):
        """Gets the most_occupied_client of this InlineResponse20022Output.  # noqa: E501

        The most occupied client by jobs  # noqa: E501

        :return: The most_occupied_client of this InlineResponse20022Output.  # noqa: E501
        :rtype: str
        """
        return self._most_occupied_client

    @most_occupied_client.setter
    def most_occupied_client(self, most_occupied_client):
        """Sets the most_occupied_client of this InlineResponse20022Output.

        The most occupied client by jobs  # noqa: E501

        :param most_occupied_client: The most_occupied_client of this InlineResponse20022Output.  # noqa: E501
        :type: str
        """

        self._most_occupied_client = most_occupied_client

    @property
    def most_occupied_client_count(self):
        """Gets the most_occupied_client_count of this InlineResponse20022Output.  # noqa: E501

        Job count ran on the most occupied client  # noqa: E501

        :return: The most_occupied_client_count of this InlineResponse20022Output.  # noqa: E501
        :rtype: int
        """
        return self._most_occupied_client_count

    @most_occupied_client_count.setter
    def most_occupied_client_count(self, most_occupied_client_count):
        """Sets the most_occupied_client_count of this InlineResponse20022Output.

        Job count ran on the most occupied client  # noqa: E501

        :param most_occupied_client_count: The most_occupied_client_count of this InlineResponse20022Output.  # noqa: E501
        :type: int
        """

        self._most_occupied_client_count = most_occupied_client_count

    @property
    def most_occupied_job(self):
        """Gets the most_occupied_job of this InlineResponse20022Output.  # noqa: E501

        The most often running job  # noqa: E501

        :return: The most_occupied_job of this InlineResponse20022Output.  # noqa: E501
        :rtype: str
        """
        return self._most_occupied_job

    @most_occupied_job.setter
    def most_occupied_job(self, most_occupied_job):
        """Sets the most_occupied_job of this InlineResponse20022Output.

        The most often running job  # noqa: E501

        :param most_occupied_job: The most_occupied_job of this InlineResponse20022Output.  # noqa: E501
        :type: str
        """

        self._most_occupied_job = most_occupied_job

    @property
    def most_occupied_job_count(self):
        """Gets the most_occupied_job_count of this InlineResponse20022Output.  # noqa: E501

        Job count the most often running job  # noqa: E501

        :return: The most_occupied_job_count of this InlineResponse20022Output.  # noqa: E501
        :rtype: int
        """
        return self._most_occupied_job_count

    @most_occupied_job_count.setter
    def most_occupied_job_count(self, most_occupied_job_count):
        """Sets the most_occupied_job_count of this InlineResponse20022Output.

        Job count the most often running job  # noqa: E501

        :param most_occupied_job_count: The most_occupied_job_count of this InlineResponse20022Output.  # noqa: E501
        :type: int
        """

        self._most_occupied_job_count = most_occupied_job_count

    @property
    def most_occupied_pool(self):
        """Gets the most_occupied_pool of this InlineResponse20022Output.  # noqa: E501

        The most occupied pool by jobs  # noqa: E501

        :return: The most_occupied_pool of this InlineResponse20022Output.  # noqa: E501
        :rtype: str
        """
        return self._most_occupied_pool

    @most_occupied_pool.setter
    def most_occupied_pool(self, most_occupied_pool):
        """Sets the most_occupied_pool of this InlineResponse20022Output.

        The most occupied pool by jobs  # noqa: E501

        :param most_occupied_pool: The most_occupied_pool of this InlineResponse20022Output.  # noqa: E501
        :type: str
        """

        self._most_occupied_pool = most_occupied_pool

    @property
    def most_occupied_pool_count(self):
        """Gets the most_occupied_pool_count of this InlineResponse20022Output.  # noqa: E501

        Job count ran on the most occupied pool  # noqa: E501

        :return: The most_occupied_pool_count of this InlineResponse20022Output.  # noqa: E501
        :rtype: int
        """
        return self._most_occupied_pool_count

    @most_occupied_pool_count.setter
    def most_occupied_pool_count(self, most_occupied_pool_count):
        """Sets the most_occupied_pool_count of this InlineResponse20022Output.

        Job count ran on the most occupied pool  # noqa: E501

        :param most_occupied_pool_count: The most_occupied_pool_count of this InlineResponse20022Output.  # noqa: E501
        :type: int
        """

        self._most_occupied_pool_count = most_occupied_pool_count

    @property
    def bytes(self):
        """Gets the bytes of this InlineResponse20022Output.  # noqa: E501

        Total number backed up bytes  # noqa: E501

        :return: The bytes of this InlineResponse20022Output.  # noqa: E501
        :rtype: int
        """
        return self._bytes

    @bytes.setter
    def bytes(self, bytes):
        """Sets the bytes of this InlineResponse20022Output.

        Total number backed up bytes  # noqa: E501

        :param bytes: The bytes of this InlineResponse20022Output.  # noqa: E501
        :type: int
        """

        self._bytes = bytes

    @property
    def files(self):
        """Gets the files of this InlineResponse20022Output.  # noqa: E501

        Total number backed up files  # noqa: E501

        :return: The files of this InlineResponse20022Output.  # noqa: E501
        :rtype: int
        """
        return self._files

    @files.setter
    def files(self, files):
        """Sets the files of this InlineResponse20022Output.

        Total number backed up files  # noqa: E501

        :param files: The files of this InlineResponse20022Output.  # noqa: E501
        :type: int
        """

        self._files = files

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20022Output, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20022Output):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
