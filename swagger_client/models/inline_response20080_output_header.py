# coding: utf-8

"""
    Bacularis API

    This is the Bacularis API documentation.  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: marcin.haba@bacula.pl
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20080OutputHeader(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'version': 'str',
        'uname': 'str',
        'started_epoch': 'str',
        'started': 'str',
        'reloaded_epoch': 'str',
        'reloaded': 'str',
        'jobs_run': 'str',
        'jobs_running': 'str',
        'nclients': 'str',
        'nstores': 'str',
        'npools': 'str',
        'ncats': 'str',
        'nfset': 'str',
        'nscheds': 'str',
        'plugins': 'str'
    }

    attribute_map = {
        'version': 'version',
        'uname': 'uname',
        'started_epoch': 'started_epoch',
        'started': 'started',
        'reloaded_epoch': 'reloaded_epoch',
        'reloaded': 'reloaded',
        'jobs_run': 'jobs_run',
        'jobs_running': 'jobs_running',
        'nclients': 'nclients',
        'nstores': 'nstores',
        'npools': 'npools',
        'ncats': 'ncats',
        'nfset': 'nfset',
        'nscheds': 'nscheds',
        'plugins': 'plugins'
    }

    def __init__(self, version=None, uname=None, started_epoch=None, started=None, reloaded_epoch=None, reloaded=None, jobs_run=None, jobs_running=None, nclients=None, nstores=None, npools=None, ncats=None, nfset=None, nscheds=None, plugins=None):  # noqa: E501
        """InlineResponse20080OutputHeader - a model defined in Swagger"""  # noqa: E501
        self._version = None
        self._uname = None
        self._started_epoch = None
        self._started = None
        self._reloaded_epoch = None
        self._reloaded = None
        self._jobs_run = None
        self._jobs_running = None
        self._nclients = None
        self._nstores = None
        self._npools = None
        self._ncats = None
        self._nfset = None
        self._nscheds = None
        self._plugins = None
        self.discriminator = None
        if version is not None:
            self.version = version
        if uname is not None:
            self.uname = uname
        if started_epoch is not None:
            self.started_epoch = started_epoch
        if started is not None:
            self.started = started
        if reloaded_epoch is not None:
            self.reloaded_epoch = reloaded_epoch
        if reloaded is not None:
            self.reloaded = reloaded
        if jobs_run is not None:
            self.jobs_run = jobs_run
        if jobs_running is not None:
            self.jobs_running = jobs_running
        if nclients is not None:
            self.nclients = nclients
        if nstores is not None:
            self.nstores = nstores
        if npools is not None:
            self.npools = npools
        if ncats is not None:
            self.ncats = ncats
        if nfset is not None:
            self.nfset = nfset
        if nscheds is not None:
            self.nscheds = nscheds
        if plugins is not None:
            self.plugins = plugins

    @property
    def version(self):
        """Gets the version of this InlineResponse20080OutputHeader.  # noqa: E501

        Director version  # noqa: E501

        :return: The version of this InlineResponse20080OutputHeader.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this InlineResponse20080OutputHeader.

        Director version  # noqa: E501

        :param version: The version of this InlineResponse20080OutputHeader.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def uname(self):
        """Gets the uname of this InlineResponse20080OutputHeader.  # noqa: E501

        Director uname  # noqa: E501

        :return: The uname of this InlineResponse20080OutputHeader.  # noqa: E501
        :rtype: str
        """
        return self._uname

    @uname.setter
    def uname(self, uname):
        """Sets the uname of this InlineResponse20080OutputHeader.

        Director uname  # noqa: E501

        :param uname: The uname of this InlineResponse20080OutputHeader.  # noqa: E501
        :type: str
        """

        self._uname = uname

    @property
    def started_epoch(self):
        """Gets the started_epoch of this InlineResponse20080OutputHeader.  # noqa: E501

        Started epoch  # noqa: E501

        :return: The started_epoch of this InlineResponse20080OutputHeader.  # noqa: E501
        :rtype: str
        """
        return self._started_epoch

    @started_epoch.setter
    def started_epoch(self, started_epoch):
        """Sets the started_epoch of this InlineResponse20080OutputHeader.

        Started epoch  # noqa: E501

        :param started_epoch: The started_epoch of this InlineResponse20080OutputHeader.  # noqa: E501
        :type: str
        """

        self._started_epoch = started_epoch

    @property
    def started(self):
        """Gets the started of this InlineResponse20080OutputHeader.  # noqa: E501

        Started time  # noqa: E501

        :return: The started of this InlineResponse20080OutputHeader.  # noqa: E501
        :rtype: str
        """
        return self._started

    @started.setter
    def started(self, started):
        """Sets the started of this InlineResponse20080OutputHeader.

        Started time  # noqa: E501

        :param started: The started of this InlineResponse20080OutputHeader.  # noqa: E501
        :type: str
        """

        self._started = started

    @property
    def reloaded_epoch(self):
        """Gets the reloaded_epoch of this InlineResponse20080OutputHeader.  # noqa: E501

        Reloaded epoch  # noqa: E501

        :return: The reloaded_epoch of this InlineResponse20080OutputHeader.  # noqa: E501
        :rtype: str
        """
        return self._reloaded_epoch

    @reloaded_epoch.setter
    def reloaded_epoch(self, reloaded_epoch):
        """Sets the reloaded_epoch of this InlineResponse20080OutputHeader.

        Reloaded epoch  # noqa: E501

        :param reloaded_epoch: The reloaded_epoch of this InlineResponse20080OutputHeader.  # noqa: E501
        :type: str
        """

        self._reloaded_epoch = reloaded_epoch

    @property
    def reloaded(self):
        """Gets the reloaded of this InlineResponse20080OutputHeader.  # noqa: E501

        Reloaded time  # noqa: E501

        :return: The reloaded of this InlineResponse20080OutputHeader.  # noqa: E501
        :rtype: str
        """
        return self._reloaded

    @reloaded.setter
    def reloaded(self, reloaded):
        """Sets the reloaded of this InlineResponse20080OutputHeader.

        Reloaded time  # noqa: E501

        :param reloaded: The reloaded of this InlineResponse20080OutputHeader.  # noqa: E501
        :type: str
        """

        self._reloaded = reloaded

    @property
    def jobs_run(self):
        """Gets the jobs_run of this InlineResponse20080OutputHeader.  # noqa: E501

        Jobs run  # noqa: E501

        :return: The jobs_run of this InlineResponse20080OutputHeader.  # noqa: E501
        :rtype: str
        """
        return self._jobs_run

    @jobs_run.setter
    def jobs_run(self, jobs_run):
        """Sets the jobs_run of this InlineResponse20080OutputHeader.

        Jobs run  # noqa: E501

        :param jobs_run: The jobs_run of this InlineResponse20080OutputHeader.  # noqa: E501
        :type: str
        """

        self._jobs_run = jobs_run

    @property
    def jobs_running(self):
        """Gets the jobs_running of this InlineResponse20080OutputHeader.  # noqa: E501

        Jobs running  # noqa: E501

        :return: The jobs_running of this InlineResponse20080OutputHeader.  # noqa: E501
        :rtype: str
        """
        return self._jobs_running

    @jobs_running.setter
    def jobs_running(self, jobs_running):
        """Sets the jobs_running of this InlineResponse20080OutputHeader.

        Jobs running  # noqa: E501

        :param jobs_running: The jobs_running of this InlineResponse20080OutputHeader.  # noqa: E501
        :type: str
        """

        self._jobs_running = jobs_running

    @property
    def nclients(self):
        """Gets the nclients of this InlineResponse20080OutputHeader.  # noqa: E501

        Number of clients  # noqa: E501

        :return: The nclients of this InlineResponse20080OutputHeader.  # noqa: E501
        :rtype: str
        """
        return self._nclients

    @nclients.setter
    def nclients(self, nclients):
        """Sets the nclients of this InlineResponse20080OutputHeader.

        Number of clients  # noqa: E501

        :param nclients: The nclients of this InlineResponse20080OutputHeader.  # noqa: E501
        :type: str
        """

        self._nclients = nclients

    @property
    def nstores(self):
        """Gets the nstores of this InlineResponse20080OutputHeader.  # noqa: E501

        Number of storages  # noqa: E501

        :return: The nstores of this InlineResponse20080OutputHeader.  # noqa: E501
        :rtype: str
        """
        return self._nstores

    @nstores.setter
    def nstores(self, nstores):
        """Sets the nstores of this InlineResponse20080OutputHeader.

        Number of storages  # noqa: E501

        :param nstores: The nstores of this InlineResponse20080OutputHeader.  # noqa: E501
        :type: str
        """

        self._nstores = nstores

    @property
    def npools(self):
        """Gets the npools of this InlineResponse20080OutputHeader.  # noqa: E501

        Number of pools  # noqa: E501

        :return: The npools of this InlineResponse20080OutputHeader.  # noqa: E501
        :rtype: str
        """
        return self._npools

    @npools.setter
    def npools(self, npools):
        """Sets the npools of this InlineResponse20080OutputHeader.

        Number of pools  # noqa: E501

        :param npools: The npools of this InlineResponse20080OutputHeader.  # noqa: E501
        :type: str
        """

        self._npools = npools

    @property
    def ncats(self):
        """Gets the ncats of this InlineResponse20080OutputHeader.  # noqa: E501

        Number of cats  # noqa: E501

        :return: The ncats of this InlineResponse20080OutputHeader.  # noqa: E501
        :rtype: str
        """
        return self._ncats

    @ncats.setter
    def ncats(self, ncats):
        """Sets the ncats of this InlineResponse20080OutputHeader.

        Number of cats  # noqa: E501

        :param ncats: The ncats of this InlineResponse20080OutputHeader.  # noqa: E501
        :type: str
        """

        self._ncats = ncats

    @property
    def nfset(self):
        """Gets the nfset of this InlineResponse20080OutputHeader.  # noqa: E501

        Number of filesets  # noqa: E501

        :return: The nfset of this InlineResponse20080OutputHeader.  # noqa: E501
        :rtype: str
        """
        return self._nfset

    @nfset.setter
    def nfset(self, nfset):
        """Sets the nfset of this InlineResponse20080OutputHeader.

        Number of filesets  # noqa: E501

        :param nfset: The nfset of this InlineResponse20080OutputHeader.  # noqa: E501
        :type: str
        """

        self._nfset = nfset

    @property
    def nscheds(self):
        """Gets the nscheds of this InlineResponse20080OutputHeader.  # noqa: E501

        Number of schedules  # noqa: E501

        :return: The nscheds of this InlineResponse20080OutputHeader.  # noqa: E501
        :rtype: str
        """
        return self._nscheds

    @nscheds.setter
    def nscheds(self, nscheds):
        """Sets the nscheds of this InlineResponse20080OutputHeader.

        Number of schedules  # noqa: E501

        :param nscheds: The nscheds of this InlineResponse20080OutputHeader.  # noqa: E501
        :type: str
        """

        self._nscheds = nscheds

    @property
    def plugins(self):
        """Gets the plugins of this InlineResponse20080OutputHeader.  # noqa: E501

        Plugins  # noqa: E501

        :return: The plugins of this InlineResponse20080OutputHeader.  # noqa: E501
        :rtype: str
        """
        return self._plugins

    @plugins.setter
    def plugins(self, plugins):
        """Sets the plugins of this InlineResponse20080OutputHeader.

        Plugins  # noqa: E501

        :param plugins: The plugins of this InlineResponse20080OutputHeader.  # noqa: E501
        :type: str
        """

        self._plugins = plugins

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20080OutputHeader, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20080OutputHeader):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
