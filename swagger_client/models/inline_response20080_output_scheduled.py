# coding: utf-8

"""
    Bacularis API

    This is the Bacularis API documentation.  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: marcin.haba@bacula.pl
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20080OutputScheduled(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'level': 'str',
        'type': 'str',
        'priority': 'str',
        'schedtime_epocha': 'str',
        'schedtime': 'str',
        'volume': 'str',
        'pool': 'str',
        'storage': 'str'
    }

    attribute_map = {
        'level': 'level',
        'type': 'type',
        'priority': 'priority',
        'schedtime_epocha': 'schedtime_epocha',
        'schedtime': 'schedtime',
        'volume': 'volume',
        'pool': 'pool',
        'storage': 'storage'
    }

    def __init__(self, level=None, type=None, priority=None, schedtime_epocha=None, schedtime=None, volume=None, pool=None, storage=None):  # noqa: E501
        """InlineResponse20080OutputScheduled - a model defined in Swagger"""  # noqa: E501
        self._level = None
        self._type = None
        self._priority = None
        self._schedtime_epocha = None
        self._schedtime = None
        self._volume = None
        self._pool = None
        self._storage = None
        self.discriminator = None
        if level is not None:
            self.level = level
        if type is not None:
            self.type = type
        if priority is not None:
            self.priority = priority
        if schedtime_epocha is not None:
            self.schedtime_epocha = schedtime_epocha
        if schedtime is not None:
            self.schedtime = schedtime
        if volume is not None:
            self.volume = volume
        if pool is not None:
            self.pool = pool
        if storage is not None:
            self.storage = storage

    @property
    def level(self):
        """Gets the level of this InlineResponse20080OutputScheduled.  # noqa: E501

        Job level  # noqa: E501

        :return: The level of this InlineResponse20080OutputScheduled.  # noqa: E501
        :rtype: str
        """
        return self._level

    @level.setter
    def level(self, level):
        """Sets the level of this InlineResponse20080OutputScheduled.

        Job level  # noqa: E501

        :param level: The level of this InlineResponse20080OutputScheduled.  # noqa: E501
        :type: str
        """

        self._level = level

    @property
    def type(self):
        """Gets the type of this InlineResponse20080OutputScheduled.  # noqa: E501

        Job type  # noqa: E501

        :return: The type of this InlineResponse20080OutputScheduled.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this InlineResponse20080OutputScheduled.

        Job type  # noqa: E501

        :param type: The type of this InlineResponse20080OutputScheduled.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def priority(self):
        """Gets the priority of this InlineResponse20080OutputScheduled.  # noqa: E501

        Priority  # noqa: E501

        :return: The priority of this InlineResponse20080OutputScheduled.  # noqa: E501
        :rtype: str
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this InlineResponse20080OutputScheduled.

        Priority  # noqa: E501

        :param priority: The priority of this InlineResponse20080OutputScheduled.  # noqa: E501
        :type: str
        """

        self._priority = priority

    @property
    def schedtime_epocha(self):
        """Gets the schedtime_epocha of this InlineResponse20080OutputScheduled.  # noqa: E501

        Scheduled time epoch  # noqa: E501

        :return: The schedtime_epocha of this InlineResponse20080OutputScheduled.  # noqa: E501
        :rtype: str
        """
        return self._schedtime_epocha

    @schedtime_epocha.setter
    def schedtime_epocha(self, schedtime_epocha):
        """Sets the schedtime_epocha of this InlineResponse20080OutputScheduled.

        Scheduled time epoch  # noqa: E501

        :param schedtime_epocha: The schedtime_epocha of this InlineResponse20080OutputScheduled.  # noqa: E501
        :type: str
        """

        self._schedtime_epocha = schedtime_epocha

    @property
    def schedtime(self):
        """Gets the schedtime of this InlineResponse20080OutputScheduled.  # noqa: E501

        Scheduled time  # noqa: E501

        :return: The schedtime of this InlineResponse20080OutputScheduled.  # noqa: E501
        :rtype: str
        """
        return self._schedtime

    @schedtime.setter
    def schedtime(self, schedtime):
        """Sets the schedtime of this InlineResponse20080OutputScheduled.

        Scheduled time  # noqa: E501

        :param schedtime: The schedtime of this InlineResponse20080OutputScheduled.  # noqa: E501
        :type: str
        """

        self._schedtime = schedtime

    @property
    def volume(self):
        """Gets the volume of this InlineResponse20080OutputScheduled.  # noqa: E501

        Volume name  # noqa: E501

        :return: The volume of this InlineResponse20080OutputScheduled.  # noqa: E501
        :rtype: str
        """
        return self._volume

    @volume.setter
    def volume(self, volume):
        """Sets the volume of this InlineResponse20080OutputScheduled.

        Volume name  # noqa: E501

        :param volume: The volume of this InlineResponse20080OutputScheduled.  # noqa: E501
        :type: str
        """

        self._volume = volume

    @property
    def pool(self):
        """Gets the pool of this InlineResponse20080OutputScheduled.  # noqa: E501

        Pool name  # noqa: E501

        :return: The pool of this InlineResponse20080OutputScheduled.  # noqa: E501
        :rtype: str
        """
        return self._pool

    @pool.setter
    def pool(self, pool):
        """Sets the pool of this InlineResponse20080OutputScheduled.

        Pool name  # noqa: E501

        :param pool: The pool of this InlineResponse20080OutputScheduled.  # noqa: E501
        :type: str
        """

        self._pool = pool

    @property
    def storage(self):
        """Gets the storage of this InlineResponse20080OutputScheduled.  # noqa: E501

        Storage name  # noqa: E501

        :return: The storage of this InlineResponse20080OutputScheduled.  # noqa: E501
        :rtype: str
        """
        return self._storage

    @storage.setter
    def storage(self, storage):
        """Sets the storage of this InlineResponse20080OutputScheduled.

        Storage name  # noqa: E501

        :param storage: The storage of this InlineResponse20080OutputScheduled.  # noqa: E501
        :type: str
        """

        self._storage = storage

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20080OutputScheduled, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20080OutputScheduled):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
