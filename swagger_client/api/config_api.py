# coding: utf-8

"""
    Bacularis API

    This is the Bacularis API documentation.  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: marcin.haba@bacula.pl
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class ConfigApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def api_v2_config_component_type_get(self, component_type, **kwargs):  # noqa: E501
        """Get component config  # noqa: E501

        Get specific component config  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_config_component_type_get(component_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str component_type: Component type: dir, sd, fd or bcons (required)
        :param bool apply_jobdefs: Apply JobDefs in results (this parameter is taken into account only for Job resources)
        :return: InlineResponse20064
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_config_component_type_get_with_http_info(component_type, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_config_component_type_get_with_http_info(component_type, **kwargs)  # noqa: E501
            return data

    def api_v2_config_component_type_get_with_http_info(self, component_type, **kwargs):  # noqa: E501
        """Get component config  # noqa: E501

        Get specific component config  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_config_component_type_get_with_http_info(component_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str component_type: Component type: dir, sd, fd or bcons (required)
        :param bool apply_jobdefs: Apply JobDefs in results (this parameter is taken into account only for Job resources)
        :return: InlineResponse20064
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['component_type', 'apply_jobdefs']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_config_component_type_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'component_type' is set
        if ('component_type' not in params or
                params['component_type'] is None):
            raise ValueError("Missing the required parameter `component_type` when calling `api_v2_config_component_type_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'component_type' in params:
            path_params['component_type'] = params['component_type']  # noqa: E501

        query_params = []
        if 'apply_jobdefs' in params:
            query_params.append(('apply_jobdefs', params['apply_jobdefs']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/config/{component_type}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20064',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v2_config_component_type_put(self, component_type, config, **kwargs):  # noqa: E501
        """Set component config  # noqa: E501

        Set specific component config  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_config_component_type_put(component_type, config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str component_type: Component type: dir, sd, fd or bcons (required)
        :param str config: Config in JSON form to set (required)
        :return: InlineResponse20065
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_config_component_type_put_with_http_info(component_type, config, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_config_component_type_put_with_http_info(component_type, config, **kwargs)  # noqa: E501
            return data

    def api_v2_config_component_type_put_with_http_info(self, component_type, config, **kwargs):  # noqa: E501
        """Set component config  # noqa: E501

        Set specific component config  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_config_component_type_put_with_http_info(component_type, config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str component_type: Component type: dir, sd, fd or bcons (required)
        :param str config: Config in JSON form to set (required)
        :return: InlineResponse20065
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['component_type', 'config']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_config_component_type_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'component_type' is set
        if ('component_type' not in params or
                params['component_type'] is None):
            raise ValueError("Missing the required parameter `component_type` when calling `api_v2_config_component_type_put`")  # noqa: E501
        # verify the required parameter 'config' is set
        if ('config' not in params or
                params['config'] is None):
            raise ValueError("Missing the required parameter `config` when calling `api_v2_config_component_type_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'component_type' in params:
            path_params['component_type'] = params['component_type']  # noqa: E501

        query_params = []

        header_params = {}
        if 'config' in params:
            header_params['config'] = params['config']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/config/{component_type}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20065',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v2_config_component_type_resource_type_get(self, component_type, resource_type, **kwargs):  # noqa: E501
        """Get component resources config  # noqa: E501

        Get component resources config by type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_config_component_type_resource_type_get(component_type, resource_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str component_type: Component type: dir, sd, fd or bcons (required)
        :param str resource_type: Resource type: Client, Pool, Job...etc. (required)
        :param bool apply_jobdefs: Apply JobDefs in results (this parameter is taken into account only for Job resources)
        :return: InlineResponse20066
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_config_component_type_resource_type_get_with_http_info(component_type, resource_type, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_config_component_type_resource_type_get_with_http_info(component_type, resource_type, **kwargs)  # noqa: E501
            return data

    def api_v2_config_component_type_resource_type_get_with_http_info(self, component_type, resource_type, **kwargs):  # noqa: E501
        """Get component resources config  # noqa: E501

        Get component resources config by type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_config_component_type_resource_type_get_with_http_info(component_type, resource_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str component_type: Component type: dir, sd, fd or bcons (required)
        :param str resource_type: Resource type: Client, Pool, Job...etc. (required)
        :param bool apply_jobdefs: Apply JobDefs in results (this parameter is taken into account only for Job resources)
        :return: InlineResponse20066
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['component_type', 'resource_type', 'apply_jobdefs']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_config_component_type_resource_type_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'component_type' is set
        if ('component_type' not in params or
                params['component_type'] is None):
            raise ValueError("Missing the required parameter `component_type` when calling `api_v2_config_component_type_resource_type_get`")  # noqa: E501
        # verify the required parameter 'resource_type' is set
        if ('resource_type' not in params or
                params['resource_type'] is None):
            raise ValueError("Missing the required parameter `resource_type` when calling `api_v2_config_component_type_resource_type_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'component_type' in params:
            path_params['component_type'] = params['component_type']  # noqa: E501
        if 'resource_type' in params:
            path_params['resource_type'] = params['resource_type']  # noqa: E501

        query_params = []
        if 'apply_jobdefs' in params:
            query_params.append(('apply_jobdefs', params['apply_jobdefs']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/config/{component_type}/{resource_type}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20066',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v2_config_component_type_resource_type_put(self, component_type, resource_type, config, **kwargs):  # noqa: E501
        """Set component resources config  # noqa: E501

        Set specific component resources config  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_config_component_type_resource_type_put(component_type, resource_type, config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str component_type: Component type: dir, sd, fd or bcons (required)
        :param str resource_type: Resource type: Client, Pool, Job...etc. (required)
        :param str config: Config in JSON form to set (required)
        :return: InlineResponse20067
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_config_component_type_resource_type_put_with_http_info(component_type, resource_type, config, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_config_component_type_resource_type_put_with_http_info(component_type, resource_type, config, **kwargs)  # noqa: E501
            return data

    def api_v2_config_component_type_resource_type_put_with_http_info(self, component_type, resource_type, config, **kwargs):  # noqa: E501
        """Set component resources config  # noqa: E501

        Set specific component resources config  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_config_component_type_resource_type_put_with_http_info(component_type, resource_type, config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str component_type: Component type: dir, sd, fd or bcons (required)
        :param str resource_type: Resource type: Client, Pool, Job...etc. (required)
        :param str config: Config in JSON form to set (required)
        :return: InlineResponse20067
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['component_type', 'resource_type', 'config']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_config_component_type_resource_type_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'component_type' is set
        if ('component_type' not in params or
                params['component_type'] is None):
            raise ValueError("Missing the required parameter `component_type` when calling `api_v2_config_component_type_resource_type_put`")  # noqa: E501
        # verify the required parameter 'resource_type' is set
        if ('resource_type' not in params or
                params['resource_type'] is None):
            raise ValueError("Missing the required parameter `resource_type` when calling `api_v2_config_component_type_resource_type_put`")  # noqa: E501
        # verify the required parameter 'config' is set
        if ('config' not in params or
                params['config'] is None):
            raise ValueError("Missing the required parameter `config` when calling `api_v2_config_component_type_resource_type_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'component_type' in params:
            path_params['component_type'] = params['component_type']  # noqa: E501
        if 'resource_type' in params:
            path_params['resource_type'] = params['resource_type']  # noqa: E501

        query_params = []

        header_params = {}
        if 'config' in params:
            header_params['config'] = params['config']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/config/{component_type}/{resource_type}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20067',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v2_config_component_type_resource_type_resource_name_get(self, component_type, resource_type, resource_name, **kwargs):  # noqa: E501
        """Get component resource config  # noqa: E501

        Get component resource config by name  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_config_component_type_resource_type_resource_name_get(component_type, resource_type, resource_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str component_type: Component type: dir, sd, fd or bcons (required)
        :param str resource_type: Resource type: Client, Pool, Job...etc. (required)
        :param str resource_name: Resource name (required)
        :param bool apply_jobdefs: Apply JobDefs in results (this parameter is taken into account only for Job resources)
        :return: InlineResponse20068
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_config_component_type_resource_type_resource_name_get_with_http_info(component_type, resource_type, resource_name, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_config_component_type_resource_type_resource_name_get_with_http_info(component_type, resource_type, resource_name, **kwargs)  # noqa: E501
            return data

    def api_v2_config_component_type_resource_type_resource_name_get_with_http_info(self, component_type, resource_type, resource_name, **kwargs):  # noqa: E501
        """Get component resource config  # noqa: E501

        Get component resource config by name  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_config_component_type_resource_type_resource_name_get_with_http_info(component_type, resource_type, resource_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str component_type: Component type: dir, sd, fd or bcons (required)
        :param str resource_type: Resource type: Client, Pool, Job...etc. (required)
        :param str resource_name: Resource name (required)
        :param bool apply_jobdefs: Apply JobDefs in results (this parameter is taken into account only for Job resources)
        :return: InlineResponse20068
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['component_type', 'resource_type', 'resource_name', 'apply_jobdefs']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_config_component_type_resource_type_resource_name_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'component_type' is set
        if ('component_type' not in params or
                params['component_type'] is None):
            raise ValueError("Missing the required parameter `component_type` when calling `api_v2_config_component_type_resource_type_resource_name_get`")  # noqa: E501
        # verify the required parameter 'resource_type' is set
        if ('resource_type' not in params or
                params['resource_type'] is None):
            raise ValueError("Missing the required parameter `resource_type` when calling `api_v2_config_component_type_resource_type_resource_name_get`")  # noqa: E501
        # verify the required parameter 'resource_name' is set
        if ('resource_name' not in params or
                params['resource_name'] is None):
            raise ValueError("Missing the required parameter `resource_name` when calling `api_v2_config_component_type_resource_type_resource_name_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'component_type' in params:
            path_params['component_type'] = params['component_type']  # noqa: E501
        if 'resource_type' in params:
            path_params['resource_type'] = params['resource_type']  # noqa: E501
        if 'resource_name' in params:
            path_params['resource_name'] = params['resource_name']  # noqa: E501

        query_params = []
        if 'apply_jobdefs' in params:
            query_params.append(('apply_jobdefs', params['apply_jobdefs']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/config/{component_type}/{resource_type}/{resource_name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20068',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v2_config_component_type_resource_type_resource_name_put(self, component_type, resource_type, resource_name, config, **kwargs):  # noqa: E501
        """Set component resource config  # noqa: E501

        Set specific component resource config  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_config_component_type_resource_type_resource_name_put(component_type, resource_type, resource_name, config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str component_type: Component type: dir, sd, fd or bcons (required)
        :param str resource_type: Resource type: Client, Pool, Job...etc. (required)
        :param str resource_name: Resource name (required)
        :param str config: Config in JSON form to set (required)
        :return: InlineResponse20069
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_config_component_type_resource_type_resource_name_put_with_http_info(component_type, resource_type, resource_name, config, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_config_component_type_resource_type_resource_name_put_with_http_info(component_type, resource_type, resource_name, config, **kwargs)  # noqa: E501
            return data

    def api_v2_config_component_type_resource_type_resource_name_put_with_http_info(self, component_type, resource_type, resource_name, config, **kwargs):  # noqa: E501
        """Set component resource config  # noqa: E501

        Set specific component resource config  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_config_component_type_resource_type_resource_name_put_with_http_info(component_type, resource_type, resource_name, config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str component_type: Component type: dir, sd, fd or bcons (required)
        :param str resource_type: Resource type: Client, Pool, Job...etc. (required)
        :param str resource_name: Resource name (required)
        :param str config: Config in JSON form to set (required)
        :return: InlineResponse20069
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['component_type', 'resource_type', 'resource_name', 'config']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_config_component_type_resource_type_resource_name_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'component_type' is set
        if ('component_type' not in params or
                params['component_type'] is None):
            raise ValueError("Missing the required parameter `component_type` when calling `api_v2_config_component_type_resource_type_resource_name_put`")  # noqa: E501
        # verify the required parameter 'resource_type' is set
        if ('resource_type' not in params or
                params['resource_type'] is None):
            raise ValueError("Missing the required parameter `resource_type` when calling `api_v2_config_component_type_resource_type_resource_name_put`")  # noqa: E501
        # verify the required parameter 'resource_name' is set
        if ('resource_name' not in params or
                params['resource_name'] is None):
            raise ValueError("Missing the required parameter `resource_name` when calling `api_v2_config_component_type_resource_type_resource_name_put`")  # noqa: E501
        # verify the required parameter 'config' is set
        if ('config' not in params or
                params['config'] is None):
            raise ValueError("Missing the required parameter `config` when calling `api_v2_config_component_type_resource_type_resource_name_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'component_type' in params:
            path_params['component_type'] = params['component_type']  # noqa: E501
        if 'resource_type' in params:
            path_params['resource_type'] = params['resource_type']  # noqa: E501
        if 'resource_name' in params:
            path_params['resource_name'] = params['resource_name']  # noqa: E501

        query_params = []

        header_params = {}
        if 'config' in params:
            header_params['config'] = params['config']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/config/{component_type}/{resource_type}/{resource_name}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20069',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v2_config_get(self, **kwargs):  # noqa: E501
        """Get components information  # noqa: E501

        Get components information such as component types and component names  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_config_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse20063
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_config_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_config_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_v2_config_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get components information  # noqa: E501

        Get components information such as component types and component names  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_config_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse20063
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_config_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/config', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20063',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
