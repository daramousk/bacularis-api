# coding: utf-8

"""
    Bacularis API

    This is the Bacularis API documentation.  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: marcin.haba@bacula.pl
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class ClientsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def api_v2_clients_clientid_bandwidth_put(self, clientid, **kwargs):  # noqa: E501
        """Set Client bandwidth limit  # noqa: E501

        Set Client bandwidth limit in bytes  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_clients_clientid_bandwidth_put(clientid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int clientid: Client identifier (required)
        :param int limit: Bandwidth limit in bytes
        :return: InlineResponse2006
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_clients_clientid_bandwidth_put_with_http_info(clientid, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_clients_clientid_bandwidth_put_with_http_info(clientid, **kwargs)  # noqa: E501
            return data

    def api_v2_clients_clientid_bandwidth_put_with_http_info(self, clientid, **kwargs):  # noqa: E501
        """Set Client bandwidth limit  # noqa: E501

        Set Client bandwidth limit in bytes  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_clients_clientid_bandwidth_put_with_http_info(clientid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int clientid: Client identifier (required)
        :param int limit: Bandwidth limit in bytes
        :return: InlineResponse2006
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['clientid', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_clients_clientid_bandwidth_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'clientid' is set
        if ('clientid' not in params or
                params['clientid'] is None):
            raise ValueError("Missing the required parameter `clientid` when calling `api_v2_clients_clientid_bandwidth_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'clientid' in params:
            path_params['clientid'] = params['clientid']  # noqa: E501

        query_params = []

        header_params = {}
        if 'limit' in params:
            header_params['limit'] = params['limit']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/clients/{clientid}/bandwidth', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2006',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v2_clients_clientid_get(self, clientid, **kwargs):  # noqa: E501
        """Find client by ClientId  # noqa: E501

        Get client by specific Client identifier.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_clients_clientid_get(clientid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int clientid: Client identifier (required)
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_clients_clientid_get_with_http_info(clientid, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_clients_clientid_get_with_http_info(clientid, **kwargs)  # noqa: E501
            return data

    def api_v2_clients_clientid_get_with_http_info(self, clientid, **kwargs):  # noqa: E501
        """Find client by ClientId  # noqa: E501

        Get client by specific Client identifier.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_clients_clientid_get_with_http_info(clientid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int clientid: Client identifier (required)
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['clientid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_clients_clientid_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'clientid' is set
        if ('clientid' not in params or
                params['clientid'] is None):
            raise ValueError("Missing the required parameter `clientid` when calling `api_v2_clients_clientid_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'clientid' in params:
            path_params['clientid'] = params['clientid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/clients/{clientid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2001',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v2_clients_clientid_jobs_get(self, clientid, **kwargs):  # noqa: E501
        """Jobs for client  # noqa: E501

        Get jobs done by specific client  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_clients_clientid_jobs_get(clientid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int clientid: Client identifier (required)
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_clients_clientid_jobs_get_with_http_info(clientid, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_clients_clientid_jobs_get_with_http_info(clientid, **kwargs)  # noqa: E501
            return data

    def api_v2_clients_clientid_jobs_get_with_http_info(self, clientid, **kwargs):  # noqa: E501
        """Jobs for client  # noqa: E501

        Get jobs done by specific client  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_clients_clientid_jobs_get_with_http_info(clientid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int clientid: Client identifier (required)
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['clientid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_clients_clientid_jobs_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'clientid' is set
        if ('clientid' not in params or
                params['clientid'] is None):
            raise ValueError("Missing the required parameter `clientid` when calling `api_v2_clients_clientid_jobs_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'clientid' in params:
            path_params['clientid'] = params['clientid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/clients/{clientid}/jobs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2004',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v2_clients_clientid_ls_get(self, clientid, path, **kwargs):  # noqa: E501
        """List Client files/directories  # noqa: E501

        Get list Client files/directories for specific path  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_clients_clientid_ls_get(clientid, path, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int clientid: Client identifier (required)
        :param str path: Path on Client (required)
        :return: InlineResponse2005
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_clients_clientid_ls_get_with_http_info(clientid, path, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_clients_clientid_ls_get_with_http_info(clientid, path, **kwargs)  # noqa: E501
            return data

    def api_v2_clients_clientid_ls_get_with_http_info(self, clientid, path, **kwargs):  # noqa: E501
        """List Client files/directories  # noqa: E501

        Get list Client files/directories for specific path  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_clients_clientid_ls_get_with_http_info(clientid, path, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int clientid: Client identifier (required)
        :param str path: Path on Client (required)
        :return: InlineResponse2005
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['clientid', 'path']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_clients_clientid_ls_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'clientid' is set
        if ('clientid' not in params or
                params['clientid'] is None):
            raise ValueError("Missing the required parameter `clientid` when calling `api_v2_clients_clientid_ls_get`")  # noqa: E501
        # verify the required parameter 'path' is set
        if ('path' not in params or
                params['path'] is None):
            raise ValueError("Missing the required parameter `path` when calling `api_v2_clients_clientid_ls_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'clientid' in params:
            path_params['clientid'] = params['clientid']  # noqa: E501

        query_params = []
        if 'path' in params:
            query_params.append(('path', params['path']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/clients/{clientid}/ls', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2005',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v2_clients_clientid_show_get(self, clientid, **kwargs):  # noqa: E501
        """Show client  # noqa: E501

        Get 'show clients' bconsole command output for specific client  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_clients_clientid_show_get(clientid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int clientid: Client identifier (required)
        :param str output: Output format
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_clients_clientid_show_get_with_http_info(clientid, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_clients_clientid_show_get_with_http_info(clientid, **kwargs)  # noqa: E501
            return data

    def api_v2_clients_clientid_show_get_with_http_info(self, clientid, **kwargs):  # noqa: E501
        """Show client  # noqa: E501

        Get 'show clients' bconsole command output for specific client  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_clients_clientid_show_get_with_http_info(clientid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int clientid: Client identifier (required)
        :param str output: Output format
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['clientid', 'output']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_clients_clientid_show_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'clientid' is set
        if ('clientid' not in params or
                params['clientid'] is None):
            raise ValueError("Missing the required parameter `clientid` when calling `api_v2_clients_clientid_show_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'clientid' in params:
            path_params['clientid'] = params['clientid']  # noqa: E501

        query_params = []
        if 'output' in params:
            query_params.append(('output', params['output']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/clients/{clientid}/show', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2002',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v2_clients_clientid_status_get(self, clientid, **kwargs):  # noqa: E501
        """Client status  # noqa: E501

        Get client status for specific client  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_clients_clientid_status_get(clientid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int clientid: Client identifier (required)
        :param str output: Output format
        :param str type: Output type using together with output=json parameter.
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_clients_clientid_status_get_with_http_info(clientid, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_clients_clientid_status_get_with_http_info(clientid, **kwargs)  # noqa: E501
            return data

    def api_v2_clients_clientid_status_get_with_http_info(self, clientid, **kwargs):  # noqa: E501
        """Client status  # noqa: E501

        Get client status for specific client  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_clients_clientid_status_get_with_http_info(clientid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int clientid: Client identifier (required)
        :param str output: Output format
        :param str type: Output type using together with output=json parameter.
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['clientid', 'output', 'type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_clients_clientid_status_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'clientid' is set
        if ('clientid' not in params or
                params['clientid'] is None):
            raise ValueError("Missing the required parameter `clientid` when calling `api_v2_clients_clientid_status_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'clientid' in params:
            path_params['clientid'] = params['clientid']  # noqa: E501

        query_params = []
        if 'output' in params:
            query_params.append(('output', params['output']))  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/clients/{clientid}/status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2003',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v2_clients_get(self, **kwargs):  # noqa: E501
        """Client list  # noqa: E501

        Get client list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_clients_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int limit: Item limit
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_clients_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_clients_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_v2_clients_get_with_http_info(self, **kwargs):  # noqa: E501
        """Client list  # noqa: E501

        Get client list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_clients_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int limit: Item limit
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_clients_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/clients', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v2_clients_show_get(self, **kwargs):  # noqa: E501
        """Show clients  # noqa: E501

        Get 'show clients' bconsole command output  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_clients_show_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Client name
        :param str output: Output format
        :return: InlineResponse2007
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_clients_show_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_clients_show_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_v2_clients_show_get_with_http_info(self, **kwargs):  # noqa: E501
        """Show clients  # noqa: E501

        Get 'show clients' bconsole command output  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_clients_show_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Client name
        :param str output: Output format
        :return: InlineResponse2007
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'output']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_clients_show_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'output' in params:
            query_params.append(('output', params['output']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/clients/show', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2007',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
