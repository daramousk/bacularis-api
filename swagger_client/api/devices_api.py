# coding: utf-8

"""
    Bacularis API

    This is the Bacularis API documentation.  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: marcin.haba@bacula.pl
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class DevicesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def api_v2_devices_device_name_list_get(self, device_name, **kwargs):  # noqa: E501
        """List autochanger volume names (requires barcode reader)  # noqa: E501

        List autochanger volume names (requires barcode reader)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_devices_device_name_list_get(device_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device_name: Autochanger tape drive device name (required)
        :return: InlineResponse20074
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_devices_device_name_list_get_with_http_info(device_name, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_devices_device_name_list_get_with_http_info(device_name, **kwargs)  # noqa: E501
            return data

    def api_v2_devices_device_name_list_get_with_http_info(self, device_name, **kwargs):  # noqa: E501
        """List autochanger volume names (requires barcode reader)  # noqa: E501

        List autochanger volume names (requires barcode reader)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_devices_device_name_list_get_with_http_info(device_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device_name: Autochanger tape drive device name (required)
        :return: InlineResponse20074
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_devices_device_name_list_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device_name' is set
        if ('device_name' not in params or
                params['device_name'] is None):
            raise ValueError("Missing the required parameter `device_name` when calling `api_v2_devices_device_name_list_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'device_name' in params:
            path_params['device_name'] = params['device_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/devices/{device_name}/list', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20074',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v2_devices_device_name_listall_get(self, device_name, **kwargs):  # noqa: E501
        """List all autochanger slots and drives  # noqa: E501

        List all autochanger slots and drives  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_devices_device_name_listall_get(device_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device_name: Autochanger tape drive device name (required)
        :return: InlineResponse20075
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_devices_device_name_listall_get_with_http_info(device_name, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_devices_device_name_listall_get_with_http_info(device_name, **kwargs)  # noqa: E501
            return data

    def api_v2_devices_device_name_listall_get_with_http_info(self, device_name, **kwargs):  # noqa: E501
        """List all autochanger slots and drives  # noqa: E501

        List all autochanger slots and drives  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_devices_device_name_listall_get_with_http_info(device_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device_name: Autochanger tape drive device name (required)
        :return: InlineResponse20075
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_devices_device_name_listall_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device_name' is set
        if ('device_name' not in params or
                params['device_name'] is None):
            raise ValueError("Missing the required parameter `device_name` when calling `api_v2_devices_device_name_listall_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'device_name' in params:
            path_params['device_name'] = params['device_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/devices/{device_name}/listall', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20075',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v2_devices_device_name_load_get(self, device_name, out_id, **kwargs):  # noqa: E501
        """Get autochanger tape drive load output  # noqa: E501

        Get autochanger tape drive load output by output identifier  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_devices_device_name_load_get(device_name, out_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device_name: Autochanger tape drive device name (required)
        :param str out_id: Output identifier acquired during load drive start. (required)
        :return: InlineResponse20070
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_devices_device_name_load_get_with_http_info(device_name, out_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_devices_device_name_load_get_with_http_info(device_name, out_id, **kwargs)  # noqa: E501
            return data

    def api_v2_devices_device_name_load_get_with_http_info(self, device_name, out_id, **kwargs):  # noqa: E501
        """Get autochanger tape drive load output  # noqa: E501

        Get autochanger tape drive load output by output identifier  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_devices_device_name_load_get_with_http_info(device_name, out_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device_name: Autochanger tape drive device name (required)
        :param str out_id: Output identifier acquired during load drive start. (required)
        :return: InlineResponse20070
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_name', 'out_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_devices_device_name_load_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device_name' is set
        if ('device_name' not in params or
                params['device_name'] is None):
            raise ValueError("Missing the required parameter `device_name` when calling `api_v2_devices_device_name_load_get`")  # noqa: E501
        # verify the required parameter 'out_id' is set
        if ('out_id' not in params or
                params['out_id'] is None):
            raise ValueError("Missing the required parameter `out_id` when calling `api_v2_devices_device_name_load_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'device_name' in params:
            path_params['device_name'] = params['device_name']  # noqa: E501

        query_params = []
        if 'out_id' in params:
            query_params.append(('out_id', params['out_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/devices/{device_name}/load', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20070',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v2_devices_device_name_load_put(self, device_name, drive, slot, **kwargs):  # noqa: E501
        """Load device  # noqa: E501

        Load autochanger tape drive device.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_devices_device_name_load_put(device_name, drive, slot, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device_name: Autochanger tape drive device name (required)
        :param str drive: Drive name (required)
        :param int slot: Slot number (required)
        :return: InlineResponse20071
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_devices_device_name_load_put_with_http_info(device_name, drive, slot, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_devices_device_name_load_put_with_http_info(device_name, drive, slot, **kwargs)  # noqa: E501
            return data

    def api_v2_devices_device_name_load_put_with_http_info(self, device_name, drive, slot, **kwargs):  # noqa: E501
        """Load device  # noqa: E501

        Load autochanger tape drive device.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_devices_device_name_load_put_with_http_info(device_name, drive, slot, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device_name: Autochanger tape drive device name (required)
        :param str drive: Drive name (required)
        :param int slot: Slot number (required)
        :return: InlineResponse20071
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_name', 'drive', 'slot']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_devices_device_name_load_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device_name' is set
        if ('device_name' not in params or
                params['device_name'] is None):
            raise ValueError("Missing the required parameter `device_name` when calling `api_v2_devices_device_name_load_put`")  # noqa: E501
        # verify the required parameter 'drive' is set
        if ('drive' not in params or
                params['drive'] is None):
            raise ValueError("Missing the required parameter `drive` when calling `api_v2_devices_device_name_load_put`")  # noqa: E501
        # verify the required parameter 'slot' is set
        if ('slot' not in params or
                params['slot'] is None):
            raise ValueError("Missing the required parameter `slot` when calling `api_v2_devices_device_name_load_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'device_name' in params:
            path_params['device_name'] = params['device_name']  # noqa: E501

        query_params = []
        if 'drive' in params:
            query_params.append(('drive', params['drive']))  # noqa: E501
        if 'slot' in params:
            query_params.append(('slot', params['slot']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/devices/{device_name}/load', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20071',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v2_devices_device_name_loaded_get(self, device_name, drive, **kwargs):  # noqa: E501
        """Get loaded slot in given tape drive  # noqa: E501

        Get loaded slot in given autochanger tape drive  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_devices_device_name_loaded_get(device_name, drive, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device_name: Autochanger tape drive device name (required)
        :param str drive: Drive name (required)
        :return: InlineResponse20073
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_devices_device_name_loaded_get_with_http_info(device_name, drive, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_devices_device_name_loaded_get_with_http_info(device_name, drive, **kwargs)  # noqa: E501
            return data

    def api_v2_devices_device_name_loaded_get_with_http_info(self, device_name, drive, **kwargs):  # noqa: E501
        """Get loaded slot in given tape drive  # noqa: E501

        Get loaded slot in given autochanger tape drive  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_devices_device_name_loaded_get_with_http_info(device_name, drive, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device_name: Autochanger tape drive device name (required)
        :param str drive: Drive name (required)
        :return: InlineResponse20073
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_name', 'drive']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_devices_device_name_loaded_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device_name' is set
        if ('device_name' not in params or
                params['device_name'] is None):
            raise ValueError("Missing the required parameter `device_name` when calling `api_v2_devices_device_name_loaded_get`")  # noqa: E501
        # verify the required parameter 'drive' is set
        if ('drive' not in params or
                params['drive'] is None):
            raise ValueError("Missing the required parameter `drive` when calling `api_v2_devices_device_name_loaded_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'device_name' in params:
            path_params['device_name'] = params['device_name']  # noqa: E501

        query_params = []
        if 'drive' in params:
            query_params.append(('drive', params['drive']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/devices/{device_name}/loaded', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20073',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v2_devices_device_name_slots_get(self, device_name, **kwargs):  # noqa: E501
        """Get how many slots has autochanger  # noqa: E501

        Get how many slots has autochanger  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_devices_device_name_slots_get(device_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device_name: Autochanger tape drive device name (required)
        :return: InlineResponse20076
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_devices_device_name_slots_get_with_http_info(device_name, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_devices_device_name_slots_get_with_http_info(device_name, **kwargs)  # noqa: E501
            return data

    def api_v2_devices_device_name_slots_get_with_http_info(self, device_name, **kwargs):  # noqa: E501
        """Get how many slots has autochanger  # noqa: E501

        Get how many slots has autochanger  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_devices_device_name_slots_get_with_http_info(device_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device_name: Autochanger tape drive device name (required)
        :return: InlineResponse20076
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_devices_device_name_slots_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device_name' is set
        if ('device_name' not in params or
                params['device_name'] is None):
            raise ValueError("Missing the required parameter `device_name` when calling `api_v2_devices_device_name_slots_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'device_name' in params:
            path_params['device_name'] = params['device_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/devices/{device_name}/slots', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20076',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v2_devices_device_name_transfer_get(self, device_name, out_id, **kwargs):  # noqa: E501
        """Get output from transfering tape from source slot to destination slot  # noqa: E501

        Get output from ransfering tape from source slot to destination slot  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_devices_device_name_transfer_get(device_name, out_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device_name: Autochanger tape drive device name (required)
        :param str out_id: Output identifier acquired during transfer tape start. (required)
        :return: InlineResponse20077
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_devices_device_name_transfer_get_with_http_info(device_name, out_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_devices_device_name_transfer_get_with_http_info(device_name, out_id, **kwargs)  # noqa: E501
            return data

    def api_v2_devices_device_name_transfer_get_with_http_info(self, device_name, out_id, **kwargs):  # noqa: E501
        """Get output from transfering tape from source slot to destination slot  # noqa: E501

        Get output from ransfering tape from source slot to destination slot  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_devices_device_name_transfer_get_with_http_info(device_name, out_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device_name: Autochanger tape drive device name (required)
        :param str out_id: Output identifier acquired during transfer tape start. (required)
        :return: InlineResponse20077
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_name', 'out_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_devices_device_name_transfer_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device_name' is set
        if ('device_name' not in params or
                params['device_name'] is None):
            raise ValueError("Missing the required parameter `device_name` when calling `api_v2_devices_device_name_transfer_get`")  # noqa: E501
        # verify the required parameter 'out_id' is set
        if ('out_id' not in params or
                params['out_id'] is None):
            raise ValueError("Missing the required parameter `out_id` when calling `api_v2_devices_device_name_transfer_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'device_name' in params:
            path_params['device_name'] = params['device_name']  # noqa: E501

        query_params = []
        if 'out_id' in params:
            query_params.append(('out_id', params['out_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/devices/{device_name}/transfer', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20077',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v2_devices_device_name_transfer_put(self, device_name, drive, slotsrc, destsrc, **kwargs):  # noqa: E501
        """Transfer tape from source slot to destination slot  # noqa: E501

        Transfer tape from source slot to destination slot  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_devices_device_name_transfer_put(device_name, drive, slotsrc, destsrc, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device_name: Autochanger tape drive device name (required)
        :param str drive: Drive name (required)
        :param int slotsrc: Source slot number (required)
        :param int destsrc: Destination slot number (required)
        :return: InlineResponse20071
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_devices_device_name_transfer_put_with_http_info(device_name, drive, slotsrc, destsrc, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_devices_device_name_transfer_put_with_http_info(device_name, drive, slotsrc, destsrc, **kwargs)  # noqa: E501
            return data

    def api_v2_devices_device_name_transfer_put_with_http_info(self, device_name, drive, slotsrc, destsrc, **kwargs):  # noqa: E501
        """Transfer tape from source slot to destination slot  # noqa: E501

        Transfer tape from source slot to destination slot  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_devices_device_name_transfer_put_with_http_info(device_name, drive, slotsrc, destsrc, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device_name: Autochanger tape drive device name (required)
        :param str drive: Drive name (required)
        :param int slotsrc: Source slot number (required)
        :param int destsrc: Destination slot number (required)
        :return: InlineResponse20071
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_name', 'drive', 'slotsrc', 'destsrc']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_devices_device_name_transfer_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device_name' is set
        if ('device_name' not in params or
                params['device_name'] is None):
            raise ValueError("Missing the required parameter `device_name` when calling `api_v2_devices_device_name_transfer_put`")  # noqa: E501
        # verify the required parameter 'drive' is set
        if ('drive' not in params or
                params['drive'] is None):
            raise ValueError("Missing the required parameter `drive` when calling `api_v2_devices_device_name_transfer_put`")  # noqa: E501
        # verify the required parameter 'slotsrc' is set
        if ('slotsrc' not in params or
                params['slotsrc'] is None):
            raise ValueError("Missing the required parameter `slotsrc` when calling `api_v2_devices_device_name_transfer_put`")  # noqa: E501
        # verify the required parameter 'destsrc' is set
        if ('destsrc' not in params or
                params['destsrc'] is None):
            raise ValueError("Missing the required parameter `destsrc` when calling `api_v2_devices_device_name_transfer_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'device_name' in params:
            path_params['device_name'] = params['device_name']  # noqa: E501

        query_params = []
        if 'drive' in params:
            query_params.append(('drive', params['drive']))  # noqa: E501
        if 'slotsrc' in params:
            query_params.append(('slotsrc', params['slotsrc']))  # noqa: E501
        if 'destsrc' in params:
            query_params.append(('destsrc', params['destsrc']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/devices/{device_name}/transfer', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20071',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v2_devices_device_name_unload_get(self, device_name, out_id, **kwargs):  # noqa: E501
        """Get autochanger tape drive unload output  # noqa: E501

        Get autochanger tape drive unload output by output identifier  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_devices_device_name_unload_get(device_name, out_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device_name: Autochanger tape drive device name (required)
        :param str out_id: Output identifier acquired during unload drive start. (required)
        :return: InlineResponse20072
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_devices_device_name_unload_get_with_http_info(device_name, out_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_devices_device_name_unload_get_with_http_info(device_name, out_id, **kwargs)  # noqa: E501
            return data

    def api_v2_devices_device_name_unload_get_with_http_info(self, device_name, out_id, **kwargs):  # noqa: E501
        """Get autochanger tape drive unload output  # noqa: E501

        Get autochanger tape drive unload output by output identifier  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_devices_device_name_unload_get_with_http_info(device_name, out_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device_name: Autochanger tape drive device name (required)
        :param str out_id: Output identifier acquired during unload drive start. (required)
        :return: InlineResponse20072
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_name', 'out_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_devices_device_name_unload_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device_name' is set
        if ('device_name' not in params or
                params['device_name'] is None):
            raise ValueError("Missing the required parameter `device_name` when calling `api_v2_devices_device_name_unload_get`")  # noqa: E501
        # verify the required parameter 'out_id' is set
        if ('out_id' not in params or
                params['out_id'] is None):
            raise ValueError("Missing the required parameter `out_id` when calling `api_v2_devices_device_name_unload_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'device_name' in params:
            path_params['device_name'] = params['device_name']  # noqa: E501

        query_params = []
        if 'out_id' in params:
            query_params.append(('out_id', params['out_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/devices/{device_name}/unload', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20072',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v2_devices_device_name_unload_put(self, device_name, drive, slot, **kwargs):  # noqa: E501
        """Unload device  # noqa: E501

        Unload autochanger tape drive device.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_devices_device_name_unload_put(device_name, drive, slot, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device_name: Autochanger tape drive device name (required)
        :param str drive: Drive name (required)
        :param int slot: Slot number (required)
        :return: InlineResponse20071
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_devices_device_name_unload_put_with_http_info(device_name, drive, slot, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_devices_device_name_unload_put_with_http_info(device_name, drive, slot, **kwargs)  # noqa: E501
            return data

    def api_v2_devices_device_name_unload_put_with_http_info(self, device_name, drive, slot, **kwargs):  # noqa: E501
        """Unload device  # noqa: E501

        Unload autochanger tape drive device.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_devices_device_name_unload_put_with_http_info(device_name, drive, slot, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device_name: Autochanger tape drive device name (required)
        :param str drive: Drive name (required)
        :param int slot: Slot number (required)
        :return: InlineResponse20071
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_name', 'drive', 'slot']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_devices_device_name_unload_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device_name' is set
        if ('device_name' not in params or
                params['device_name'] is None):
            raise ValueError("Missing the required parameter `device_name` when calling `api_v2_devices_device_name_unload_put`")  # noqa: E501
        # verify the required parameter 'drive' is set
        if ('drive' not in params or
                params['drive'] is None):
            raise ValueError("Missing the required parameter `drive` when calling `api_v2_devices_device_name_unload_put`")  # noqa: E501
        # verify the required parameter 'slot' is set
        if ('slot' not in params or
                params['slot'] is None):
            raise ValueError("Missing the required parameter `slot` when calling `api_v2_devices_device_name_unload_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'device_name' in params:
            path_params['device_name'] = params['device_name']  # noqa: E501

        query_params = []
        if 'drive' in params:
            query_params.append(('drive', params['drive']))  # noqa: E501
        if 'slot' in params:
            query_params.append(('slot', params['slot']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/devices/{device_name}/unload', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20071',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
