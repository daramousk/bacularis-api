# coding: utf-8

"""
    Bacularis API

    This is the Bacularis API documentation.  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: marcin.haba@bacula.pl
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class StoragesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def api_v2_storages_get(self, **kwargs):  # noqa: E501
        """Storage list  # noqa: E501

        Get storage list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_storages_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int limit: Item limit
        :return: InlineResponse20024
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_storages_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_storages_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_v2_storages_get_with_http_info(self, **kwargs):  # noqa: E501
        """Storage list  # noqa: E501

        Get storage list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_storages_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int limit: Item limit
        :return: InlineResponse20024
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_storages_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/storages', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20024',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v2_storages_show_get(self, **kwargs):  # noqa: E501
        """Show storages  # noqa: E501

        Get 'show storages' bconsole command output  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_storages_show_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Storage name
        :param str output: Output format
        :return: InlineResponse20031
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_storages_show_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_storages_show_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_v2_storages_show_get_with_http_info(self, **kwargs):  # noqa: E501
        """Show storages  # noqa: E501

        Get 'show storages' bconsole command output  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_storages_show_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Storage name
        :param str output: Output format
        :return: InlineResponse20031
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'output']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_storages_show_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'output' in params:
            query_params.append(('output', params['output']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/storages/show', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20031',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v2_storages_storageid_get(self, storageid, **kwargs):  # noqa: E501
        """Find storage by StorageId  # noqa: E501

        Get storage by specific Storage identifier.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_storages_storageid_get(storageid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int storageid: Storage identifier (required)
        :return: InlineResponse20025
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_storages_storageid_get_with_http_info(storageid, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_storages_storageid_get_with_http_info(storageid, **kwargs)  # noqa: E501
            return data

    def api_v2_storages_storageid_get_with_http_info(self, storageid, **kwargs):  # noqa: E501
        """Find storage by StorageId  # noqa: E501

        Get storage by specific Storage identifier.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_storages_storageid_get_with_http_info(storageid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int storageid: Storage identifier (required)
        :return: InlineResponse20025
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['storageid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_storages_storageid_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'storageid' is set
        if ('storageid' not in params or
                params['storageid'] is None):
            raise ValueError("Missing the required parameter `storageid` when calling `api_v2_storages_storageid_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'storageid' in params:
            path_params['storageid'] = params['storageid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/storages/{storageid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20025',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v2_storages_storageid_mount_get(self, storageid, drive, device, slot, **kwargs):  # noqa: E501
        """Mount storage  # noqa: E501

        Mount storage  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_storages_storageid_mount_get(storageid, drive, device, slot, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int storageid: Storage identifier (required)
        :param int drive: Storage drive (required)
        :param str device: Storage device (can be used instead drive) (required)
        :param int slot: Storage slot (required)
        :return: InlineResponse20028
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_storages_storageid_mount_get_with_http_info(storageid, drive, device, slot, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_storages_storageid_mount_get_with_http_info(storageid, drive, device, slot, **kwargs)  # noqa: E501
            return data

    def api_v2_storages_storageid_mount_get_with_http_info(self, storageid, drive, device, slot, **kwargs):  # noqa: E501
        """Mount storage  # noqa: E501

        Mount storage  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_storages_storageid_mount_get_with_http_info(storageid, drive, device, slot, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int storageid: Storage identifier (required)
        :param int drive: Storage drive (required)
        :param str device: Storage device (can be used instead drive) (required)
        :param int slot: Storage slot (required)
        :return: InlineResponse20028
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['storageid', 'drive', 'device', 'slot']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_storages_storageid_mount_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'storageid' is set
        if ('storageid' not in params or
                params['storageid'] is None):
            raise ValueError("Missing the required parameter `storageid` when calling `api_v2_storages_storageid_mount_get`")  # noqa: E501
        # verify the required parameter 'drive' is set
        if ('drive' not in params or
                params['drive'] is None):
            raise ValueError("Missing the required parameter `drive` when calling `api_v2_storages_storageid_mount_get`")  # noqa: E501
        # verify the required parameter 'device' is set
        if ('device' not in params or
                params['device'] is None):
            raise ValueError("Missing the required parameter `device` when calling `api_v2_storages_storageid_mount_get`")  # noqa: E501
        # verify the required parameter 'slot' is set
        if ('slot' not in params or
                params['slot'] is None):
            raise ValueError("Missing the required parameter `slot` when calling `api_v2_storages_storageid_mount_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'storageid' in params:
            path_params['storageid'] = params['storageid']  # noqa: E501

        query_params = []
        if 'drive' in params:
            query_params.append(('drive', params['drive']))  # noqa: E501
        if 'device' in params:
            query_params.append(('device', params['device']))  # noqa: E501
        if 'slot' in params:
            query_params.append(('slot', params['slot']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/storages/{storageid}/mount', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20028',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v2_storages_storageid_release_get(self, storageid, drive, device, **kwargs):  # noqa: E501
        """Release storage  # noqa: E501

        Release storage  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_storages_storageid_release_get(storageid, drive, device, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int storageid: Storage identifier (required)
        :param int drive: Storage drive (required)
        :param str device: Storage device (can be used instead drive) (required)
        :return: InlineResponse20030
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_storages_storageid_release_get_with_http_info(storageid, drive, device, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_storages_storageid_release_get_with_http_info(storageid, drive, device, **kwargs)  # noqa: E501
            return data

    def api_v2_storages_storageid_release_get_with_http_info(self, storageid, drive, device, **kwargs):  # noqa: E501
        """Release storage  # noqa: E501

        Release storage  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_storages_storageid_release_get_with_http_info(storageid, drive, device, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int storageid: Storage identifier (required)
        :param int drive: Storage drive (required)
        :param str device: Storage device (can be used instead drive) (required)
        :return: InlineResponse20030
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['storageid', 'drive', 'device']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_storages_storageid_release_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'storageid' is set
        if ('storageid' not in params or
                params['storageid'] is None):
            raise ValueError("Missing the required parameter `storageid` when calling `api_v2_storages_storageid_release_get`")  # noqa: E501
        # verify the required parameter 'drive' is set
        if ('drive' not in params or
                params['drive'] is None):
            raise ValueError("Missing the required parameter `drive` when calling `api_v2_storages_storageid_release_get`")  # noqa: E501
        # verify the required parameter 'device' is set
        if ('device' not in params or
                params['device'] is None):
            raise ValueError("Missing the required parameter `device` when calling `api_v2_storages_storageid_release_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'storageid' in params:
            path_params['storageid'] = params['storageid']  # noqa: E501

        query_params = []
        if 'drive' in params:
            query_params.append(('drive', params['drive']))  # noqa: E501
        if 'device' in params:
            query_params.append(('device', params['device']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/storages/{storageid}/release', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20030',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v2_storages_storageid_show_get(self, storageid, **kwargs):  # noqa: E501
        """Show storage  # noqa: E501

        Get 'show storages' bconsole command output for specific storage  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_storages_storageid_show_get(storageid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int storageid: Storage identifier (required)
        :param str output: Output format
        :return: InlineResponse20026
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_storages_storageid_show_get_with_http_info(storageid, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_storages_storageid_show_get_with_http_info(storageid, **kwargs)  # noqa: E501
            return data

    def api_v2_storages_storageid_show_get_with_http_info(self, storageid, **kwargs):  # noqa: E501
        """Show storage  # noqa: E501

        Get 'show storages' bconsole command output for specific storage  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_storages_storageid_show_get_with_http_info(storageid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int storageid: Storage identifier (required)
        :param str output: Output format
        :return: InlineResponse20026
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['storageid', 'output']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_storages_storageid_show_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'storageid' is set
        if ('storageid' not in params or
                params['storageid'] is None):
            raise ValueError("Missing the required parameter `storageid` when calling `api_v2_storages_storageid_show_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'storageid' in params:
            path_params['storageid'] = params['storageid']  # noqa: E501

        query_params = []
        if 'output' in params:
            query_params.append(('output', params['output']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/storages/{storageid}/show', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20026',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v2_storages_storageid_status_get(self, storageid, **kwargs):  # noqa: E501
        """Storage status  # noqa: E501

        Get storage status for specific storage  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_storages_storageid_status_get(storageid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int storageid: Storage identifier (required)
        :param str output: Output format
        :param str type: Output type using together with output=json parameter.
        :return: InlineResponse20027
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_storages_storageid_status_get_with_http_info(storageid, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_storages_storageid_status_get_with_http_info(storageid, **kwargs)  # noqa: E501
            return data

    def api_v2_storages_storageid_status_get_with_http_info(self, storageid, **kwargs):  # noqa: E501
        """Storage status  # noqa: E501

        Get storage status for specific storage  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_storages_storageid_status_get_with_http_info(storageid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int storageid: Storage identifier (required)
        :param str output: Output format
        :param str type: Output type using together with output=json parameter.
        :return: InlineResponse20027
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['storageid', 'output', 'type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_storages_storageid_status_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'storageid' is set
        if ('storageid' not in params or
                params['storageid'] is None):
            raise ValueError("Missing the required parameter `storageid` when calling `api_v2_storages_storageid_status_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'storageid' in params:
            path_params['storageid'] = params['storageid']  # noqa: E501

        query_params = []
        if 'output' in params:
            query_params.append(('output', params['output']))  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/storages/{storageid}/status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20027',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v2_storages_storageid_umount_get(self, storageid, drive, device, **kwargs):  # noqa: E501
        """Umount storage  # noqa: E501

        Umount storage  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_storages_storageid_umount_get(storageid, drive, device, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int storageid: Storage identifier (required)
        :param int drive: Storage drive (required)
        :param str device: Storage device (can be used instead drive) (required)
        :return: InlineResponse20029
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_storages_storageid_umount_get_with_http_info(storageid, drive, device, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_storages_storageid_umount_get_with_http_info(storageid, drive, device, **kwargs)  # noqa: E501
            return data

    def api_v2_storages_storageid_umount_get_with_http_info(self, storageid, drive, device, **kwargs):  # noqa: E501
        """Umount storage  # noqa: E501

        Umount storage  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_storages_storageid_umount_get_with_http_info(storageid, drive, device, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int storageid: Storage identifier (required)
        :param int drive: Storage drive (required)
        :param str device: Storage device (can be used instead drive) (required)
        :return: InlineResponse20029
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['storageid', 'drive', 'device']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_storages_storageid_umount_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'storageid' is set
        if ('storageid' not in params or
                params['storageid'] is None):
            raise ValueError("Missing the required parameter `storageid` when calling `api_v2_storages_storageid_umount_get`")  # noqa: E501
        # verify the required parameter 'drive' is set
        if ('drive' not in params or
                params['drive'] is None):
            raise ValueError("Missing the required parameter `drive` when calling `api_v2_storages_storageid_umount_get`")  # noqa: E501
        # verify the required parameter 'device' is set
        if ('device' not in params or
                params['device'] is None):
            raise ValueError("Missing the required parameter `device` when calling `api_v2_storages_storageid_umount_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'storageid' in params:
            path_params['storageid'] = params['storageid']  # noqa: E501

        query_params = []
        if 'drive' in params:
            query_params.append(('drive', params['drive']))  # noqa: E501
        if 'device' in params:
            query_params.append(('device', params['device']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/storages/{storageid}/umount', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20029',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
