# coding: utf-8

"""
    Bacularis API

    This is the Bacularis API documentation.  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: marcin.haba@bacula.pl
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class BvfsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def api_v2_bvfs_cleanup_put(self, path, **kwargs):  # noqa: E501
        """Cleanup BVFS (remove temporary table)  # noqa: E501

        Cleanup BVFS  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_bvfs_cleanup_put(path, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int path: Path in format b2[0-9]+ (required)
        :return: InlineResponse20062
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_bvfs_cleanup_put_with_http_info(path, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_bvfs_cleanup_put_with_http_info(path, **kwargs)  # noqa: E501
            return data

    def api_v2_bvfs_cleanup_put_with_http_info(self, path, **kwargs):  # noqa: E501
        """Cleanup BVFS (remove temporary table)  # noqa: E501

        Cleanup BVFS  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_bvfs_cleanup_put_with_http_info(path, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int path: Path in format b2[0-9]+ (required)
        :return: InlineResponse20062
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['path']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_bvfs_cleanup_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'path' is set
        if ('path' not in params or
                params['path'] is None):
            raise ValueError("Missing the required parameter `path` when calling `api_v2_bvfs_cleanup_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'path' in params:
            header_params['path'] = params['path']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/bvfs/cleanup', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20062',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v2_bvfs_clear_put(self, **kwargs):  # noqa: E501
        """Clear BVFS cache  # noqa: E501

        Clear BVFS cache  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_bvfs_clear_put(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse20061
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_bvfs_clear_put_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_bvfs_clear_put_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_v2_bvfs_clear_put_with_http_info(self, **kwargs):  # noqa: E501
        """Clear BVFS cache  # noqa: E501

        Clear BVFS cache  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_bvfs_clear_put_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse20061
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_bvfs_clear_put" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/bvfs/clear', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20061',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v2_bvfs_getjobids_get(self, jobid, **kwargs):  # noqa: E501
        """BVFS get particular jobids to restore  # noqa: E501

        BVFS get particular jobids to restore job with given jobid  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_bvfs_getjobids_get(jobid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int jobid: Job identifier (required)
        :return: InlineResponse20059
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_bvfs_getjobids_get_with_http_info(jobid, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_bvfs_getjobids_get_with_http_info(jobid, **kwargs)  # noqa: E501
            return data

    def api_v2_bvfs_getjobids_get_with_http_info(self, jobid, **kwargs):  # noqa: E501
        """BVFS get particular jobids to restore  # noqa: E501

        BVFS get particular jobids to restore job with given jobid  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_bvfs_getjobids_get_with_http_info(jobid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int jobid: Job identifier (required)
        :return: InlineResponse20059
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['jobid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_bvfs_getjobids_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'jobid' is set
        if ('jobid' not in params or
                params['jobid'] is None):
            raise ValueError("Missing the required parameter `jobid` when calling `api_v2_bvfs_getjobids_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'jobid' in params:
            query_params.append(('jobid', params['jobid']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/bvfs/getjobids', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20059',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v2_bvfs_lsdirs_get(self, jobids, path, pathid, **kwargs):  # noqa: E501
        """BVFS list directories  # noqa: E501

        BVFS list directories  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_bvfs_lsdirs_get(jobids, path, pathid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str jobids: Comma separated job identifiers (required)
        :param str path: Path to list (used instead of pathid parameter) (required)
        :param int pathid: Path identifier to list path (used instead of path parameter) (required)
        :param str offset: Offset
        :param str limit: Limit
        :param str output: Output format
        :return: InlineResponse20056
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_bvfs_lsdirs_get_with_http_info(jobids, path, pathid, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_bvfs_lsdirs_get_with_http_info(jobids, path, pathid, **kwargs)  # noqa: E501
            return data

    def api_v2_bvfs_lsdirs_get_with_http_info(self, jobids, path, pathid, **kwargs):  # noqa: E501
        """BVFS list directories  # noqa: E501

        BVFS list directories  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_bvfs_lsdirs_get_with_http_info(jobids, path, pathid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str jobids: Comma separated job identifiers (required)
        :param str path: Path to list (used instead of pathid parameter) (required)
        :param int pathid: Path identifier to list path (used instead of path parameter) (required)
        :param str offset: Offset
        :param str limit: Limit
        :param str output: Output format
        :return: InlineResponse20056
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['jobids', 'path', 'pathid', 'offset', 'limit', 'output']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_bvfs_lsdirs_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'jobids' is set
        if ('jobids' not in params or
                params['jobids'] is None):
            raise ValueError("Missing the required parameter `jobids` when calling `api_v2_bvfs_lsdirs_get`")  # noqa: E501
        # verify the required parameter 'path' is set
        if ('path' not in params or
                params['path'] is None):
            raise ValueError("Missing the required parameter `path` when calling `api_v2_bvfs_lsdirs_get`")  # noqa: E501
        # verify the required parameter 'pathid' is set
        if ('pathid' not in params or
                params['pathid'] is None):
            raise ValueError("Missing the required parameter `pathid` when calling `api_v2_bvfs_lsdirs_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'jobids' in params:
            query_params.append(('jobids', params['jobids']))  # noqa: E501
        if 'path' in params:
            query_params.append(('path', params['path']))  # noqa: E501
        if 'pathid' in params:
            query_params.append(('pathid', params['pathid']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'output' in params:
            query_params.append(('output', params['output']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/bvfs/lsdirs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20056',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v2_bvfs_lsfiles_get(self, jobids, path, pathid, **kwargs):  # noqa: E501
        """BVFS list files  # noqa: E501

        BVFS list files  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_bvfs_lsfiles_get(jobids, path, pathid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str jobids: Comma separated job identifiers (required)
        :param str path: Path to list (used instead of pathid parameter) (required)
        :param int pathid: Path identifier to list path (used instead of path parameter) (required)
        :param str offset: Offset
        :param str limit: Limit
        :param str output: Output format
        :return: InlineResponse20057
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_bvfs_lsfiles_get_with_http_info(jobids, path, pathid, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_bvfs_lsfiles_get_with_http_info(jobids, path, pathid, **kwargs)  # noqa: E501
            return data

    def api_v2_bvfs_lsfiles_get_with_http_info(self, jobids, path, pathid, **kwargs):  # noqa: E501
        """BVFS list files  # noqa: E501

        BVFS list files  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_bvfs_lsfiles_get_with_http_info(jobids, path, pathid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str jobids: Comma separated job identifiers (required)
        :param str path: Path to list (used instead of pathid parameter) (required)
        :param int pathid: Path identifier to list path (used instead of path parameter) (required)
        :param str offset: Offset
        :param str limit: Limit
        :param str output: Output format
        :return: InlineResponse20057
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['jobids', 'path', 'pathid', 'offset', 'limit', 'output']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_bvfs_lsfiles_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'jobids' is set
        if ('jobids' not in params or
                params['jobids'] is None):
            raise ValueError("Missing the required parameter `jobids` when calling `api_v2_bvfs_lsfiles_get`")  # noqa: E501
        # verify the required parameter 'path' is set
        if ('path' not in params or
                params['path'] is None):
            raise ValueError("Missing the required parameter `path` when calling `api_v2_bvfs_lsfiles_get`")  # noqa: E501
        # verify the required parameter 'pathid' is set
        if ('pathid' not in params or
                params['pathid'] is None):
            raise ValueError("Missing the required parameter `pathid` when calling `api_v2_bvfs_lsfiles_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'jobids' in params:
            query_params.append(('jobids', params['jobids']))  # noqa: E501
        if 'path' in params:
            query_params.append(('path', params['path']))  # noqa: E501
        if 'pathid' in params:
            query_params.append(('pathid', params['pathid']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'output' in params:
            query_params.append(('output', params['output']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/bvfs/lsfiles', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20057',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v2_bvfs_restore_post(self, path, jobids, **kwargs):  # noqa: E501
        """Prepare BVFS restore  # noqa: E501

        Prepare BVFS restore  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_bvfs_restore_post(path, jobids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int path: Path in format b2[0-9]+ (required)
        :param int jobids: Comma separated job identifiers (required)
        :param str fileid: Comma seprated file identifiers
        :param str dirid: Comma seprated directory identifiers
        :param str findex: Comma seprated directory file indexes
        :return: InlineResponse20060
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_bvfs_restore_post_with_http_info(path, jobids, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_bvfs_restore_post_with_http_info(path, jobids, **kwargs)  # noqa: E501
            return data

    def api_v2_bvfs_restore_post_with_http_info(self, path, jobids, **kwargs):  # noqa: E501
        """Prepare BVFS restore  # noqa: E501

        Prepare BVFS restore  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_bvfs_restore_post_with_http_info(path, jobids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int path: Path in format b2[0-9]+ (required)
        :param int jobids: Comma separated job identifiers (required)
        :param str fileid: Comma seprated file identifiers
        :param str dirid: Comma seprated directory identifiers
        :param str findex: Comma seprated directory file indexes
        :return: InlineResponse20060
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['path', 'jobids', 'fileid', 'dirid', 'findex']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_bvfs_restore_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'path' is set
        if ('path' not in params or
                params['path'] is None):
            raise ValueError("Missing the required parameter `path` when calling `api_v2_bvfs_restore_post`")  # noqa: E501
        # verify the required parameter 'jobids' is set
        if ('jobids' not in params or
                params['jobids'] is None):
            raise ValueError("Missing the required parameter `jobids` when calling `api_v2_bvfs_restore_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'path' in params:
            header_params['path'] = params['path']  # noqa: E501
        if 'jobids' in params:
            header_params['jobids'] = params['jobids']  # noqa: E501
        if 'fileid' in params:
            header_params['fileid'] = params['fileid']  # noqa: E501
        if 'dirid' in params:
            header_params['dirid'] = params['dirid']  # noqa: E501
        if 'findex' in params:
            header_params['findex'] = params['findex']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/bvfs/restore', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20060',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v2_bvfs_update_put(self, **kwargs):  # noqa: E501
        """Update BVFS cache  # noqa: E501

        Update BVFS cache for specific jobs identifiers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_bvfs_update_put(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse20055
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_bvfs_update_put_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_bvfs_update_put_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_v2_bvfs_update_put_with_http_info(self, **kwargs):  # noqa: E501
        """Update BVFS cache  # noqa: E501

        Update BVFS cache for specific jobs identifiers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_bvfs_update_put_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse20055
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_bvfs_update_put" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/bvfs/update', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20055',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v2_bvfs_versions_get(self, clientid, client, jobid, pathid, filenameid, **kwargs):  # noqa: E501
        """BVFS list file versions  # noqa: E501

        BVFS list file versions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_bvfs_versions_get(clientid, client, jobid, pathid, filenameid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int clientid: Client identifier (can be used instead of client value) (required)
        :param str client: Client name (can be used instead clientid) (required)
        :param int jobid: Job identifier (required)
        :param int pathid: Path identifier (required)
        :param int filenameid: Filename identifier (required)
        :param int copies: If set to 1, lists copy job file versions together with backup job file versions
        :param str output: Output format
        :return: InlineResponse20058
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_bvfs_versions_get_with_http_info(clientid, client, jobid, pathid, filenameid, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_bvfs_versions_get_with_http_info(clientid, client, jobid, pathid, filenameid, **kwargs)  # noqa: E501
            return data

    def api_v2_bvfs_versions_get_with_http_info(self, clientid, client, jobid, pathid, filenameid, **kwargs):  # noqa: E501
        """BVFS list file versions  # noqa: E501

        BVFS list file versions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_bvfs_versions_get_with_http_info(clientid, client, jobid, pathid, filenameid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int clientid: Client identifier (can be used instead of client value) (required)
        :param str client: Client name (can be used instead clientid) (required)
        :param int jobid: Job identifier (required)
        :param int pathid: Path identifier (required)
        :param int filenameid: Filename identifier (required)
        :param int copies: If set to 1, lists copy job file versions together with backup job file versions
        :param str output: Output format
        :return: InlineResponse20058
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['clientid', 'client', 'jobid', 'pathid', 'filenameid', 'copies', 'output']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_bvfs_versions_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'clientid' is set
        if ('clientid' not in params or
                params['clientid'] is None):
            raise ValueError("Missing the required parameter `clientid` when calling `api_v2_bvfs_versions_get`")  # noqa: E501
        # verify the required parameter 'client' is set
        if ('client' not in params or
                params['client'] is None):
            raise ValueError("Missing the required parameter `client` when calling `api_v2_bvfs_versions_get`")  # noqa: E501
        # verify the required parameter 'jobid' is set
        if ('jobid' not in params or
                params['jobid'] is None):
            raise ValueError("Missing the required parameter `jobid` when calling `api_v2_bvfs_versions_get`")  # noqa: E501
        # verify the required parameter 'pathid' is set
        if ('pathid' not in params or
                params['pathid'] is None):
            raise ValueError("Missing the required parameter `pathid` when calling `api_v2_bvfs_versions_get`")  # noqa: E501
        # verify the required parameter 'filenameid' is set
        if ('filenameid' not in params or
                params['filenameid'] is None):
            raise ValueError("Missing the required parameter `filenameid` when calling `api_v2_bvfs_versions_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'clientid' in params:
            query_params.append(('clientid', params['clientid']))  # noqa: E501
        if 'client' in params:
            query_params.append(('client', params['client']))  # noqa: E501
        if 'jobid' in params:
            query_params.append(('jobid', params['jobid']))  # noqa: E501
        if 'pathid' in params:
            query_params.append(('pathid', params['pathid']))  # noqa: E501
        if 'filenameid' in params:
            query_params.append(('filenameid', params['filenameid']))  # noqa: E501
        if 'copies' in params:
            query_params.append(('copies', params['copies']))  # noqa: E501
        if 'output' in params:
            query_params.append(('output', params['output']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/bvfs/versions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20058',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
