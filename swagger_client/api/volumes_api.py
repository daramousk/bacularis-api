# coding: utf-8

"""
    Bacularis API

    This is the Bacularis API documentation.  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: marcin.haba@bacula.pl
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class VolumesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def api_v2_volumes_get(self, **kwargs):  # noqa: E501
        """Volume list  # noqa: E501

        Get volume list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_volumes_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int limit: Item limit
        :return: InlineResponse20039
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_volumes_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_volumes_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_v2_volumes_get_with_http_info(self, **kwargs):  # noqa: E501
        """Volume list  # noqa: E501

        Get volume list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_volumes_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int limit: Item limit
        :return: InlineResponse20039
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_volumes_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/volumes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20039',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v2_volumes_label_barcodes_get(self, out_id, **kwargs):  # noqa: E501
        """Get label barcodes volume output  # noqa: E501

        Get label barcodes volume output by output identifier  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_volumes_label_barcodes_get(out_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str out_id: Output identifier acquired during label start. (required)
        :return: InlineResponse20046
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_volumes_label_barcodes_get_with_http_info(out_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_volumes_label_barcodes_get_with_http_info(out_id, **kwargs)  # noqa: E501
            return data

    def api_v2_volumes_label_barcodes_get_with_http_info(self, out_id, **kwargs):  # noqa: E501
        """Get label barcodes volume output  # noqa: E501

        Get label barcodes volume output by output identifier  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_volumes_label_barcodes_get_with_http_info(out_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str out_id: Output identifier acquired during label start. (required)
        :return: InlineResponse20046
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['out_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_volumes_label_barcodes_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'out_id' is set
        if ('out_id' not in params or
                params['out_id'] is None):
            raise ValueError("Missing the required parameter `out_id` when calling `api_v2_volumes_label_barcodes_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'out_id' in params:
            query_params.append(('out_id', params['out_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/volumes/label/barcodes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20046',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v2_volumes_label_barcodes_post(self, slots, drive, storageid, storage, poolid, pool, **kwargs):  # noqa: E501
        """Label volume using barcodes  # noqa: E501

        Label volume with specified name (with using barcode).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_volumes_label_barcodes_post(slots, drive, storageid, storage, poolid, pool, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str slots: Slots numbers or slots range (ex. 1-3,5,10) (required)
        :param int drive: Drive number (required)
        :param int storageid: Storage identifier (required)
        :param str storage: Storage name can be used instead of storageid (required)
        :param int poolid: Pool identifier (required)
        :param str pool: Pool name can be used instead of poolid (required)
        :return: InlineResponse20047
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_volumes_label_barcodes_post_with_http_info(slots, drive, storageid, storage, poolid, pool, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_volumes_label_barcodes_post_with_http_info(slots, drive, storageid, storage, poolid, pool, **kwargs)  # noqa: E501
            return data

    def api_v2_volumes_label_barcodes_post_with_http_info(self, slots, drive, storageid, storage, poolid, pool, **kwargs):  # noqa: E501
        """Label volume using barcodes  # noqa: E501

        Label volume with specified name (with using barcode).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_volumes_label_barcodes_post_with_http_info(slots, drive, storageid, storage, poolid, pool, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str slots: Slots numbers or slots range (ex. 1-3,5,10) (required)
        :param int drive: Drive number (required)
        :param int storageid: Storage identifier (required)
        :param str storage: Storage name can be used instead of storageid (required)
        :param int poolid: Pool identifier (required)
        :param str pool: Pool name can be used instead of poolid (required)
        :return: InlineResponse20047
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['slots', 'drive', 'storageid', 'storage', 'poolid', 'pool']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_volumes_label_barcodes_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'slots' is set
        if ('slots' not in params or
                params['slots'] is None):
            raise ValueError("Missing the required parameter `slots` when calling `api_v2_volumes_label_barcodes_post`")  # noqa: E501
        # verify the required parameter 'drive' is set
        if ('drive' not in params or
                params['drive'] is None):
            raise ValueError("Missing the required parameter `drive` when calling `api_v2_volumes_label_barcodes_post`")  # noqa: E501
        # verify the required parameter 'storageid' is set
        if ('storageid' not in params or
                params['storageid'] is None):
            raise ValueError("Missing the required parameter `storageid` when calling `api_v2_volumes_label_barcodes_post`")  # noqa: E501
        # verify the required parameter 'storage' is set
        if ('storage' not in params or
                params['storage'] is None):
            raise ValueError("Missing the required parameter `storage` when calling `api_v2_volumes_label_barcodes_post`")  # noqa: E501
        # verify the required parameter 'poolid' is set
        if ('poolid' not in params or
                params['poolid'] is None):
            raise ValueError("Missing the required parameter `poolid` when calling `api_v2_volumes_label_barcodes_post`")  # noqa: E501
        # verify the required parameter 'pool' is set
        if ('pool' not in params or
                params['pool'] is None):
            raise ValueError("Missing the required parameter `pool` when calling `api_v2_volumes_label_barcodes_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'slots' in params:
            header_params['slots'] = params['slots']  # noqa: E501
        if 'drive' in params:
            header_params['drive'] = params['drive']  # noqa: E501
        if 'storageid' in params:
            header_params['storageid'] = params['storageid']  # noqa: E501
        if 'storage' in params:
            header_params['storage'] = params['storage']  # noqa: E501
        if 'poolid' in params:
            header_params['poolid'] = params['poolid']  # noqa: E501
        if 'pool' in params:
            header_params['pool'] = params['pool']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/volumes/label/barcodes', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20047',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v2_volumes_label_get(self, out_id, **kwargs):  # noqa: E501
        """Get label volume output  # noqa: E501

        Get label volume output by output identifier  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_volumes_label_get(out_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str out_id: Output identifier acquired during label start. (required)
        :return: InlineResponse20046
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_volumes_label_get_with_http_info(out_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_volumes_label_get_with_http_info(out_id, **kwargs)  # noqa: E501
            return data

    def api_v2_volumes_label_get_with_http_info(self, out_id, **kwargs):  # noqa: E501
        """Get label volume output  # noqa: E501

        Get label volume output by output identifier  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_volumes_label_get_with_http_info(out_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str out_id: Output identifier acquired during label start. (required)
        :return: InlineResponse20046
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['out_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_volumes_label_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'out_id' is set
        if ('out_id' not in params or
                params['out_id'] is None):
            raise ValueError("Missing the required parameter `out_id` when calling `api_v2_volumes_label_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'out_id' in params:
            query_params.append(('out_id', params['out_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/volumes/label', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20046',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v2_volumes_label_post(self, volume, slot, drive, storageid, storage, poolid, pool, **kwargs):  # noqa: E501
        """Label volume  # noqa: E501

        Label volume with specified name (without using barcode).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_volumes_label_post(volume, slot, drive, storageid, storage, poolid, pool, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str volume: Volume name (required)
        :param int slot: Slot number (required)
        :param int drive: Drive number (required)
        :param int storageid: Storage identifier (required)
        :param str storage: Storage name can be used instead of storageid (required)
        :param int poolid: Pool identifier (required)
        :param str pool: Pool name can be used instead of poolid (required)
        :return: InlineResponse20047
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_volumes_label_post_with_http_info(volume, slot, drive, storageid, storage, poolid, pool, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_volumes_label_post_with_http_info(volume, slot, drive, storageid, storage, poolid, pool, **kwargs)  # noqa: E501
            return data

    def api_v2_volumes_label_post_with_http_info(self, volume, slot, drive, storageid, storage, poolid, pool, **kwargs):  # noqa: E501
        """Label volume  # noqa: E501

        Label volume with specified name (without using barcode).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_volumes_label_post_with_http_info(volume, slot, drive, storageid, storage, poolid, pool, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str volume: Volume name (required)
        :param int slot: Slot number (required)
        :param int drive: Drive number (required)
        :param int storageid: Storage identifier (required)
        :param str storage: Storage name can be used instead of storageid (required)
        :param int poolid: Pool identifier (required)
        :param str pool: Pool name can be used instead of poolid (required)
        :return: InlineResponse20047
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['volume', 'slot', 'drive', 'storageid', 'storage', 'poolid', 'pool']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_volumes_label_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'volume' is set
        if ('volume' not in params or
                params['volume'] is None):
            raise ValueError("Missing the required parameter `volume` when calling `api_v2_volumes_label_post`")  # noqa: E501
        # verify the required parameter 'slot' is set
        if ('slot' not in params or
                params['slot'] is None):
            raise ValueError("Missing the required parameter `slot` when calling `api_v2_volumes_label_post`")  # noqa: E501
        # verify the required parameter 'drive' is set
        if ('drive' not in params or
                params['drive'] is None):
            raise ValueError("Missing the required parameter `drive` when calling `api_v2_volumes_label_post`")  # noqa: E501
        # verify the required parameter 'storageid' is set
        if ('storageid' not in params or
                params['storageid'] is None):
            raise ValueError("Missing the required parameter `storageid` when calling `api_v2_volumes_label_post`")  # noqa: E501
        # verify the required parameter 'storage' is set
        if ('storage' not in params or
                params['storage'] is None):
            raise ValueError("Missing the required parameter `storage` when calling `api_v2_volumes_label_post`")  # noqa: E501
        # verify the required parameter 'poolid' is set
        if ('poolid' not in params or
                params['poolid'] is None):
            raise ValueError("Missing the required parameter `poolid` when calling `api_v2_volumes_label_post`")  # noqa: E501
        # verify the required parameter 'pool' is set
        if ('pool' not in params or
                params['pool'] is None):
            raise ValueError("Missing the required parameter `pool` when calling `api_v2_volumes_label_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'volume' in params:
            header_params['volume'] = params['volume']  # noqa: E501
        if 'slot' in params:
            header_params['slot'] = params['slot']  # noqa: E501
        if 'drive' in params:
            header_params['drive'] = params['drive']  # noqa: E501
        if 'storageid' in params:
            header_params['storageid'] = params['storageid']  # noqa: E501
        if 'storage' in params:
            header_params['storage'] = params['storage']  # noqa: E501
        if 'poolid' in params:
            header_params['poolid'] = params['poolid']  # noqa: E501
        if 'pool' in params:
            header_params['pool'] = params['pool']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/volumes/label', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20047',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v2_volumes_mediaid_delete(self, mediaid, **kwargs):  # noqa: E501
        """Delete volume by MediaId  # noqa: E501

        Delete volume from the Catalog by specific Volume/Media identifier.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_volumes_mediaid_delete(mediaid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mediaid: Media/volume identifier (required)
        :return: InlineResponse20042
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_volumes_mediaid_delete_with_http_info(mediaid, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_volumes_mediaid_delete_with_http_info(mediaid, **kwargs)  # noqa: E501
            return data

    def api_v2_volumes_mediaid_delete_with_http_info(self, mediaid, **kwargs):  # noqa: E501
        """Delete volume by MediaId  # noqa: E501

        Delete volume from the Catalog by specific Volume/Media identifier.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_volumes_mediaid_delete_with_http_info(mediaid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mediaid: Media/volume identifier (required)
        :return: InlineResponse20042
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mediaid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_volumes_mediaid_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mediaid' is set
        if ('mediaid' not in params or
                params['mediaid'] is None):
            raise ValueError("Missing the required parameter `mediaid` when calling `api_v2_volumes_mediaid_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mediaid' in params:
            path_params['mediaid'] = params['mediaid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/volumes/{mediaid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20042',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v2_volumes_mediaid_get(self, mediaid, **kwargs):  # noqa: E501
        """Find volume by MediaId  # noqa: E501

        Get volume by specific Volume/Media identifier.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_volumes_mediaid_get(mediaid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mediaid: Media/volume identifier (required)
        :return: InlineResponse20040
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_volumes_mediaid_get_with_http_info(mediaid, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_volumes_mediaid_get_with_http_info(mediaid, **kwargs)  # noqa: E501
            return data

    def api_v2_volumes_mediaid_get_with_http_info(self, mediaid, **kwargs):  # noqa: E501
        """Find volume by MediaId  # noqa: E501

        Get volume by specific Volume/Media identifier.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_volumes_mediaid_get_with_http_info(mediaid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mediaid: Media/volume identifier (required)
        :return: InlineResponse20040
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mediaid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_volumes_mediaid_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mediaid' is set
        if ('mediaid' not in params or
                params['mediaid'] is None):
            raise ValueError("Missing the required parameter `mediaid` when calling `api_v2_volumes_mediaid_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mediaid' in params:
            path_params['mediaid'] = params['mediaid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/volumes/{mediaid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20040',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v2_volumes_mediaid_jobs_get(self, mediaid, **kwargs):  # noqa: E501
        """Jobs on volume  # noqa: E501

        Get jobs done on volume  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_volumes_mediaid_jobs_get(mediaid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mediaid: Media/volume identifier (required)
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_volumes_mediaid_jobs_get_with_http_info(mediaid, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_volumes_mediaid_jobs_get_with_http_info(mediaid, **kwargs)  # noqa: E501
            return data

    def api_v2_volumes_mediaid_jobs_get_with_http_info(self, mediaid, **kwargs):  # noqa: E501
        """Jobs on volume  # noqa: E501

        Get jobs done on volume  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_volumes_mediaid_jobs_get_with_http_info(mediaid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mediaid: Media/volume identifier (required)
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mediaid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_volumes_mediaid_jobs_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mediaid' is set
        if ('mediaid' not in params or
                params['mediaid'] is None):
            raise ValueError("Missing the required parameter `mediaid` when calling `api_v2_volumes_mediaid_jobs_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mediaid' in params:
            path_params['mediaid'] = params['mediaid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/volumes/{mediaid}/jobs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2004',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v2_volumes_mediaid_prune_put(self, mediaid, **kwargs):  # noqa: E501
        """Prune volume  # noqa: E501

        Do prunning on volume.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_volumes_mediaid_prune_put(mediaid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mediaid: Media/volume identifier (required)
        :return: InlineResponse20043
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_volumes_mediaid_prune_put_with_http_info(mediaid, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_volumes_mediaid_prune_put_with_http_info(mediaid, **kwargs)  # noqa: E501
            return data

    def api_v2_volumes_mediaid_prune_put_with_http_info(self, mediaid, **kwargs):  # noqa: E501
        """Prune volume  # noqa: E501

        Do prunning on volume.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_volumes_mediaid_prune_put_with_http_info(mediaid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mediaid: Media/volume identifier (required)
        :return: InlineResponse20043
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mediaid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_volumes_mediaid_prune_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mediaid' is set
        if ('mediaid' not in params or
                params['mediaid'] is None):
            raise ValueError("Missing the required parameter `mediaid` when calling `api_v2_volumes_mediaid_prune_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mediaid' in params:
            path_params['mediaid'] = params['mediaid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/volumes/{mediaid}/prune', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20043',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v2_volumes_mediaid_purge_put(self, mediaid, **kwargs):  # noqa: E501
        """Purge volume  # noqa: E501

        Do purging on volume.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_volumes_mediaid_purge_put(mediaid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mediaid: Media/volume identifier (required)
        :return: InlineResponse20044
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_volumes_mediaid_purge_put_with_http_info(mediaid, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_volumes_mediaid_purge_put_with_http_info(mediaid, **kwargs)  # noqa: E501
            return data

    def api_v2_volumes_mediaid_purge_put_with_http_info(self, mediaid, **kwargs):  # noqa: E501
        """Purge volume  # noqa: E501

        Do purging on volume.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_volumes_mediaid_purge_put_with_http_info(mediaid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mediaid: Media/volume identifier (required)
        :return: InlineResponse20044
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mediaid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_volumes_mediaid_purge_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mediaid' is set
        if ('mediaid' not in params or
                params['mediaid'] is None):
            raise ValueError("Missing the required parameter `mediaid` when calling `api_v2_volumes_mediaid_purge_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mediaid' in params:
            path_params['mediaid'] = params['mediaid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/volumes/{mediaid}/purge', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20044',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v2_volumes_mediaid_put(self, mediaid, **kwargs):  # noqa: E501
        """Update volume properties  # noqa: E501

        Update specific volume properties.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_volumes_mediaid_put(mediaid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mediaid: Media/volume identifier (required)
        :param str volstatus: Volume status
        :param int poolid: Update Volume Pool by Pool identifier
        :param int volretention: Volume retention time
        :param int voluseduration: Volume use duration time
        :param int maxvoljobs: Maximum volume jobs
        :param int maxvolfiles: Maximum volume files
        :param int maxvolbytes: Maximum volume bytes
        :param int slot: Volume slot
        :param int recycle: Volume recycle flag
        :param int enabled: Volume enabled flag
        :param int inchanger: Volume InChanger flag
        :return: InlineResponse20041
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_volumes_mediaid_put_with_http_info(mediaid, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_volumes_mediaid_put_with_http_info(mediaid, **kwargs)  # noqa: E501
            return data

    def api_v2_volumes_mediaid_put_with_http_info(self, mediaid, **kwargs):  # noqa: E501
        """Update volume properties  # noqa: E501

        Update specific volume properties.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_volumes_mediaid_put_with_http_info(mediaid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mediaid: Media/volume identifier (required)
        :param str volstatus: Volume status
        :param int poolid: Update Volume Pool by Pool identifier
        :param int volretention: Volume retention time
        :param int voluseduration: Volume use duration time
        :param int maxvoljobs: Maximum volume jobs
        :param int maxvolfiles: Maximum volume files
        :param int maxvolbytes: Maximum volume bytes
        :param int slot: Volume slot
        :param int recycle: Volume recycle flag
        :param int enabled: Volume enabled flag
        :param int inchanger: Volume InChanger flag
        :return: InlineResponse20041
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mediaid', 'volstatus', 'poolid', 'volretention', 'voluseduration', 'maxvoljobs', 'maxvolfiles', 'maxvolbytes', 'slot', 'recycle', 'enabled', 'inchanger']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_volumes_mediaid_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mediaid' is set
        if ('mediaid' not in params or
                params['mediaid'] is None):
            raise ValueError("Missing the required parameter `mediaid` when calling `api_v2_volumes_mediaid_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mediaid' in params:
            path_params['mediaid'] = params['mediaid']  # noqa: E501

        query_params = []

        header_params = {}
        if 'volstatus' in params:
            header_params['volstatus'] = params['volstatus']  # noqa: E501
        if 'poolid' in params:
            header_params['poolid'] = params['poolid']  # noqa: E501
        if 'volretention' in params:
            header_params['volretention'] = params['volretention']  # noqa: E501
        if 'voluseduration' in params:
            header_params['voluseduration'] = params['voluseduration']  # noqa: E501
        if 'maxvoljobs' in params:
            header_params['maxvoljobs'] = params['maxvoljobs']  # noqa: E501
        if 'maxvolfiles' in params:
            header_params['maxvolfiles'] = params['maxvolfiles']  # noqa: E501
        if 'maxvolbytes' in params:
            header_params['maxvolbytes'] = params['maxvolbytes']  # noqa: E501
        if 'slot' in params:
            header_params['slot'] = params['slot']  # noqa: E501
        if 'recycle' in params:
            header_params['recycle'] = params['recycle']  # noqa: E501
        if 'enabled' in params:
            header_params['enabled'] = params['enabled']  # noqa: E501
        if 'inchanger' in params:
            header_params['inchanger'] = params['inchanger']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/volumes/{mediaid}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20041',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v2_volumes_required_jobid_fileid_get(self, jobid, fileid, **kwargs):  # noqa: E501
        """Get volumes required to restore file  # noqa: E501

        Get volumes required to restore a file from a job  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_volumes_required_jobid_fileid_get(jobid, fileid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int jobid: Job identifier (required)
        :param int fileid: File identifier (required)
        :return: InlineResponse20045
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_volumes_required_jobid_fileid_get_with_http_info(jobid, fileid, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_volumes_required_jobid_fileid_get_with_http_info(jobid, fileid, **kwargs)  # noqa: E501
            return data

    def api_v2_volumes_required_jobid_fileid_get_with_http_info(self, jobid, fileid, **kwargs):  # noqa: E501
        """Get volumes required to restore file  # noqa: E501

        Get volumes required to restore a file from a job  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_volumes_required_jobid_fileid_get_with_http_info(jobid, fileid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int jobid: Job identifier (required)
        :param int fileid: File identifier (required)
        :return: InlineResponse20045
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['jobid', 'fileid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_volumes_required_jobid_fileid_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'jobid' is set
        if ('jobid' not in params or
                params['jobid'] is None):
            raise ValueError("Missing the required parameter `jobid` when calling `api_v2_volumes_required_jobid_fileid_get`")  # noqa: E501
        # verify the required parameter 'fileid' is set
        if ('fileid' not in params or
                params['fileid'] is None):
            raise ValueError("Missing the required parameter `fileid` when calling `api_v2_volumes_required_jobid_fileid_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'jobid' in params:
            path_params['jobid'] = params['jobid']  # noqa: E501
        if 'fileid' in params:
            path_params['fileid'] = params['fileid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/volumes/required/{jobid}/{fileid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20045',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v2_volumes_update_barcodes_get(self, out_id, **kwargs):  # noqa: E501
        """Get update slots output using barcodes  # noqa: E501

        Get update barcodes slots output by output identifier (with barcodes)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_volumes_update_barcodes_get(out_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str out_id: Output identifier acquired during update barcodes slots start. (required)
        :return: InlineResponse20048
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_volumes_update_barcodes_get_with_http_info(out_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_volumes_update_barcodes_get_with_http_info(out_id, **kwargs)  # noqa: E501
            return data

    def api_v2_volumes_update_barcodes_get_with_http_info(self, out_id, **kwargs):  # noqa: E501
        """Get update slots output using barcodes  # noqa: E501

        Get update barcodes slots output by output identifier (with barcodes)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_volumes_update_barcodes_get_with_http_info(out_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str out_id: Output identifier acquired during update barcodes slots start. (required)
        :return: InlineResponse20048
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['out_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_volumes_update_barcodes_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'out_id' is set
        if ('out_id' not in params or
                params['out_id'] is None):
            raise ValueError("Missing the required parameter `out_id` when calling `api_v2_volumes_update_barcodes_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'out_id' in params:
            query_params.append(('out_id', params['out_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/volumes/update/barcodes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20048',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v2_volumes_update_barcodes_put(self, slots, drive, storageid, storage, **kwargs):  # noqa: E501
        """Update slots using barcodes  # noqa: E501

        Update volume slots (with using barcode).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_volumes_update_barcodes_put(slots, drive, storageid, storage, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str slots: Slots numbers or slots range (ex. 1-3,5,10) (required)
        :param int drive: Drive number (required)
        :param int storageid: Storage identifier (required)
        :param str storage: Storage name can be used instead of storageid (required)
        :return: InlineResponse20049
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_volumes_update_barcodes_put_with_http_info(slots, drive, storageid, storage, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_volumes_update_barcodes_put_with_http_info(slots, drive, storageid, storage, **kwargs)  # noqa: E501
            return data

    def api_v2_volumes_update_barcodes_put_with_http_info(self, slots, drive, storageid, storage, **kwargs):  # noqa: E501
        """Update slots using barcodes  # noqa: E501

        Update volume slots (with using barcode).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_volumes_update_barcodes_put_with_http_info(slots, drive, storageid, storage, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str slots: Slots numbers or slots range (ex. 1-3,5,10) (required)
        :param int drive: Drive number (required)
        :param int storageid: Storage identifier (required)
        :param str storage: Storage name can be used instead of storageid (required)
        :return: InlineResponse20049
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['slots', 'drive', 'storageid', 'storage']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_volumes_update_barcodes_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'slots' is set
        if ('slots' not in params or
                params['slots'] is None):
            raise ValueError("Missing the required parameter `slots` when calling `api_v2_volumes_update_barcodes_put`")  # noqa: E501
        # verify the required parameter 'drive' is set
        if ('drive' not in params or
                params['drive'] is None):
            raise ValueError("Missing the required parameter `drive` when calling `api_v2_volumes_update_barcodes_put`")  # noqa: E501
        # verify the required parameter 'storageid' is set
        if ('storageid' not in params or
                params['storageid'] is None):
            raise ValueError("Missing the required parameter `storageid` when calling `api_v2_volumes_update_barcodes_put`")  # noqa: E501
        # verify the required parameter 'storage' is set
        if ('storage' not in params or
                params['storage'] is None):
            raise ValueError("Missing the required parameter `storage` when calling `api_v2_volumes_update_barcodes_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'slots' in params:
            header_params['slots'] = params['slots']  # noqa: E501
        if 'drive' in params:
            header_params['drive'] = params['drive']  # noqa: E501
        if 'storageid' in params:
            header_params['storageid'] = params['storageid']  # noqa: E501
        if 'storage' in params:
            header_params['storage'] = params['storage']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/volumes/update/barcodes', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20049',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v2_volumes_update_get(self, out_id, **kwargs):  # noqa: E501
        """Get update slots output  # noqa: E501

        Get update slots output by output identifier  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_volumes_update_get(out_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str out_id: Output identifier acquired during update slots start. (required)
        :return: InlineResponse20048
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_volumes_update_get_with_http_info(out_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_volumes_update_get_with_http_info(out_id, **kwargs)  # noqa: E501
            return data

    def api_v2_volumes_update_get_with_http_info(self, out_id, **kwargs):  # noqa: E501
        """Get update slots output  # noqa: E501

        Get update slots output by output identifier  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_volumes_update_get_with_http_info(out_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str out_id: Output identifier acquired during update slots start. (required)
        :return: InlineResponse20048
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['out_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_volumes_update_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'out_id' is set
        if ('out_id' not in params or
                params['out_id'] is None):
            raise ValueError("Missing the required parameter `out_id` when calling `api_v2_volumes_update_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'out_id' in params:
            query_params.append(('out_id', params['out_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/volumes/update', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20048',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v2_volumes_update_put(self, slots, drive, storageid, storage, **kwargs):  # noqa: E501
        """Update slots  # noqa: E501

        Update volume slots (without using barcode).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_volumes_update_put(slots, drive, storageid, storage, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str slots: Slots numbers or slots range (ex. 1-3,5,10) (required)
        :param int drive: Drive number (required)
        :param int storageid: Storage identifier (required)
        :param str storage: Storage name can be used instead of storageid (required)
        :return: InlineResponse20049
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_volumes_update_put_with_http_info(slots, drive, storageid, storage, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_volumes_update_put_with_http_info(slots, drive, storageid, storage, **kwargs)  # noqa: E501
            return data

    def api_v2_volumes_update_put_with_http_info(self, slots, drive, storageid, storage, **kwargs):  # noqa: E501
        """Update slots  # noqa: E501

        Update volume slots (without using barcode).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_volumes_update_put_with_http_info(slots, drive, storageid, storage, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str slots: Slots numbers or slots range (ex. 1-3,5,10) (required)
        :param int drive: Drive number (required)
        :param int storageid: Storage identifier (required)
        :param str storage: Storage name can be used instead of storageid (required)
        :return: InlineResponse20049
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['slots', 'drive', 'storageid', 'storage']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_volumes_update_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'slots' is set
        if ('slots' not in params or
                params['slots'] is None):
            raise ValueError("Missing the required parameter `slots` when calling `api_v2_volumes_update_put`")  # noqa: E501
        # verify the required parameter 'drive' is set
        if ('drive' not in params or
                params['drive'] is None):
            raise ValueError("Missing the required parameter `drive` when calling `api_v2_volumes_update_put`")  # noqa: E501
        # verify the required parameter 'storageid' is set
        if ('storageid' not in params or
                params['storageid'] is None):
            raise ValueError("Missing the required parameter `storageid` when calling `api_v2_volumes_update_put`")  # noqa: E501
        # verify the required parameter 'storage' is set
        if ('storage' not in params or
                params['storage'] is None):
            raise ValueError("Missing the required parameter `storage` when calling `api_v2_volumes_update_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'slots' in params:
            header_params['slots'] = params['slots']  # noqa: E501
        if 'drive' in params:
            header_params['drive'] = params['drive']  # noqa: E501
        if 'storageid' in params:
            header_params['storageid'] = params['storageid']  # noqa: E501
        if 'storage' in params:
            header_params['storage'] = params['storage']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/volumes/update', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20049',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
