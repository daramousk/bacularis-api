# coding: utf-8

"""
    Bacularis API

    This is the Bacularis API documentation.  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: marcin.haba@bacula.pl
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class JobsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def api_v2_jobs_estimate_get(self, out_id, **kwargs):  # noqa: E501
        """Get estimate output  # noqa: E501

        Get estimate output by output identifier  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_jobs_estimate_get(out_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str out_id: Output identifier acquired during estimate start. (required)
        :return: InlineResponse20018
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_jobs_estimate_get_with_http_info(out_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_jobs_estimate_get_with_http_info(out_id, **kwargs)  # noqa: E501
            return data

    def api_v2_jobs_estimate_get_with_http_info(self, out_id, **kwargs):  # noqa: E501
        """Get estimate output  # noqa: E501

        Get estimate output by output identifier  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_jobs_estimate_get_with_http_info(out_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str out_id: Output identifier acquired during estimate start. (required)
        :return: InlineResponse20018
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['out_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_jobs_estimate_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'out_id' is set
        if ('out_id' not in params or
                params['out_id'] is None):
            raise ValueError("Missing the required parameter `out_id` when calling `api_v2_jobs_estimate_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'out_id' in params:
            query_params.append(('out_id', params['out_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/jobs/estimate', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20018',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v2_jobs_estimate_post(self, id, name, clientid, client, fileset, **kwargs):  # noqa: E501
        """Estimate job bytes and files  # noqa: E501

        Estimate job bytes and files before real job run. There can be used (id OR name) and (clientid OR client)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_jobs_estimate_post(id, name, clientid, client, fileset, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Job identifier (required)
        :param str name: Job name (can be used instead id) (required)
        :param int clientid: Client identifier (required)
        :param str client: Client name (can be used instead clientid) (required)
        :param str fileset: FileSet name (required)
        :param int accurate: Accurate mode, 1 if enabled, otherwise 0
        :return: InlineResponse20019
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_jobs_estimate_post_with_http_info(id, name, clientid, client, fileset, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_jobs_estimate_post_with_http_info(id, name, clientid, client, fileset, **kwargs)  # noqa: E501
            return data

    def api_v2_jobs_estimate_post_with_http_info(self, id, name, clientid, client, fileset, **kwargs):  # noqa: E501
        """Estimate job bytes and files  # noqa: E501

        Estimate job bytes and files before real job run. There can be used (id OR name) and (clientid OR client)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_jobs_estimate_post_with_http_info(id, name, clientid, client, fileset, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Job identifier (required)
        :param str name: Job name (can be used instead id) (required)
        :param int clientid: Client identifier (required)
        :param str client: Client name (can be used instead clientid) (required)
        :param str fileset: FileSet name (required)
        :param int accurate: Accurate mode, 1 if enabled, otherwise 0
        :return: InlineResponse20019
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'name', 'clientid', 'client', 'fileset', 'accurate']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_jobs_estimate_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `api_v2_jobs_estimate_post`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `api_v2_jobs_estimate_post`")  # noqa: E501
        # verify the required parameter 'clientid' is set
        if ('clientid' not in params or
                params['clientid'] is None):
            raise ValueError("Missing the required parameter `clientid` when calling `api_v2_jobs_estimate_post`")  # noqa: E501
        # verify the required parameter 'client' is set
        if ('client' not in params or
                params['client'] is None):
            raise ValueError("Missing the required parameter `client` when calling `api_v2_jobs_estimate_post`")  # noqa: E501
        # verify the required parameter 'fileset' is set
        if ('fileset' not in params or
                params['fileset'] is None):
            raise ValueError("Missing the required parameter `fileset` when calling `api_v2_jobs_estimate_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'id' in params:
            header_params['id'] = params['id']  # noqa: E501
        if 'name' in params:
            header_params['name'] = params['name']  # noqa: E501
        if 'clientid' in params:
            header_params['clientid'] = params['clientid']  # noqa: E501
        if 'client' in params:
            header_params['client'] = params['client']  # noqa: E501
        if 'fileset' in params:
            header_params['fileset'] = params['fileset']  # noqa: E501
        if 'accurate' in params:
            header_params['accurate'] = params['accurate']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/jobs/estimate', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20019',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v2_jobs_files_get(self, clientid, client, filename, **kwargs):  # noqa: E501
        """Search jobs by file criteria  # noqa: E501

        Get job list by file criteria.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_jobs_files_get(clientid, client, filename, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int clientid: Client identifier (used instead of 'client' parameter) (required)
        :param str client: Client name (used instead of 'clientid' parameter) (required)
        :param str filename: Filename to find jobs containing the file. Normally it searches for files which have given 'filename' in name, like \\*filename\\*. If strict mode is used then is done equal matching filename == name. (required)
        :param bool strict: Enables strict file matching filename == name
        :param str path: Path to narrow down the results to files from one specific path. The path must be finished with a slash.
        :return: InlineResponse20015
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_jobs_files_get_with_http_info(clientid, client, filename, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_jobs_files_get_with_http_info(clientid, client, filename, **kwargs)  # noqa: E501
            return data

    def api_v2_jobs_files_get_with_http_info(self, clientid, client, filename, **kwargs):  # noqa: E501
        """Search jobs by file criteria  # noqa: E501

        Get job list by file criteria.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_jobs_files_get_with_http_info(clientid, client, filename, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int clientid: Client identifier (used instead of 'client' parameter) (required)
        :param str client: Client name (used instead of 'clientid' parameter) (required)
        :param str filename: Filename to find jobs containing the file. Normally it searches for files which have given 'filename' in name, like \\*filename\\*. If strict mode is used then is done equal matching filename == name. (required)
        :param bool strict: Enables strict file matching filename == name
        :param str path: Path to narrow down the results to files from one specific path. The path must be finished with a slash.
        :return: InlineResponse20015
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['clientid', 'client', 'filename', 'strict', 'path']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_jobs_files_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'clientid' is set
        if ('clientid' not in params or
                params['clientid'] is None):
            raise ValueError("Missing the required parameter `clientid` when calling `api_v2_jobs_files_get`")  # noqa: E501
        # verify the required parameter 'client' is set
        if ('client' not in params or
                params['client'] is None):
            raise ValueError("Missing the required parameter `client` when calling `api_v2_jobs_files_get`")  # noqa: E501
        # verify the required parameter 'filename' is set
        if ('filename' not in params or
                params['filename'] is None):
            raise ValueError("Missing the required parameter `filename` when calling `api_v2_jobs_files_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'clientid' in params:
            query_params.append(('clientid', params['clientid']))  # noqa: E501
        if 'client' in params:
            query_params.append(('client', params['client']))  # noqa: E501
        if 'filename' in params:
            query_params.append(('filename', params['filename']))  # noqa: E501
        if 'strict' in params:
            query_params.append(('strict', params['strict']))  # noqa: E501
        if 'path' in params:
            query_params.append(('path', params['path']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/jobs/files', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20015',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v2_jobs_get(self, **kwargs):  # noqa: E501
        """Job list  # noqa: E501

        Get job list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_jobs_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int limit: Item limit
        :param str name: Job name
        :param str jobstatus: Job status letter
        :param int clientid: Client identifier
        :param str client: Client name
        :param str type: Job type letter
        :param str level: Job level letter
        :param int age: Time in seconds to determine how old jobs will be returned. Age uses startime in the following way: starttime >= now - age.
        :return: InlineResponse2008
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_jobs_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_jobs_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_v2_jobs_get_with_http_info(self, **kwargs):  # noqa: E501
        """Job list  # noqa: E501

        Get job list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_jobs_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int limit: Item limit
        :param str name: Job name
        :param str jobstatus: Job status letter
        :param int clientid: Client identifier
        :param str client: Client name
        :param str type: Job type letter
        :param str level: Job level letter
        :param int age: Time in seconds to determine how old jobs will be returned. Age uses startime in the following way: starttime >= now - age.
        :return: InlineResponse2008
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['limit', 'name', 'jobstatus', 'clientid', 'client', 'type', 'level', 'age']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_jobs_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'jobstatus' in params:
            query_params.append(('jobstatus', params['jobstatus']))  # noqa: E501
        if 'clientid' in params:
            query_params.append(('clientid', params['clientid']))  # noqa: E501
        if 'client' in params:
            query_params.append(('client', params['client']))  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'level' in params:
            query_params.append(('level', params['level']))  # noqa: E501
        if 'age' in params:
            query_params.append(('age', params['age']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/jobs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2008',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v2_jobs_jobid_bandwidth_put(self, jobid, **kwargs):  # noqa: E501
        """Set Job bandwidth limit  # noqa: E501

        Set Job bandwidth limit in bytes  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_jobs_jobid_bandwidth_put(jobid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int jobid: Job identifier (required)
        :param int limit: Bandwidth limit in bytes
        :return: InlineResponse20013
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_jobs_jobid_bandwidth_put_with_http_info(jobid, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_jobs_jobid_bandwidth_put_with_http_info(jobid, **kwargs)  # noqa: E501
            return data

    def api_v2_jobs_jobid_bandwidth_put_with_http_info(self, jobid, **kwargs):  # noqa: E501
        """Set Job bandwidth limit  # noqa: E501

        Set Job bandwidth limit in bytes  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_jobs_jobid_bandwidth_put_with_http_info(jobid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int jobid: Job identifier (required)
        :param int limit: Bandwidth limit in bytes
        :return: InlineResponse20013
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['jobid', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_jobs_jobid_bandwidth_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'jobid' is set
        if ('jobid' not in params or
                params['jobid'] is None):
            raise ValueError("Missing the required parameter `jobid` when calling `api_v2_jobs_jobid_bandwidth_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'jobid' in params:
            path_params['jobid'] = params['jobid']  # noqa: E501

        query_params = []

        header_params = {}
        if 'limit' in params:
            header_params['limit'] = params['limit']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/jobs/{jobid}/bandwidth', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20013',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v2_jobs_jobid_cancel_put(self, jobid, **kwargs):  # noqa: E501
        """Cancel job  # noqa: E501

        Cancel running job.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_jobs_jobid_cancel_put(jobid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int jobid: Job identifier (required)
        :return: InlineResponse20011
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_jobs_jobid_cancel_put_with_http_info(jobid, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_jobs_jobid_cancel_put_with_http_info(jobid, **kwargs)  # noqa: E501
            return data

    def api_v2_jobs_jobid_cancel_put_with_http_info(self, jobid, **kwargs):  # noqa: E501
        """Cancel job  # noqa: E501

        Cancel running job.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_jobs_jobid_cancel_put_with_http_info(jobid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int jobid: Job identifier (required)
        :return: InlineResponse20011
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['jobid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_jobs_jobid_cancel_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'jobid' is set
        if ('jobid' not in params or
                params['jobid'] is None):
            raise ValueError("Missing the required parameter `jobid` when calling `api_v2_jobs_jobid_cancel_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'jobid' in params:
            path_params['jobid'] = params['jobid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/jobs/{jobid}/cancel', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20011',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v2_jobs_jobid_delete(self, jobid, **kwargs):  # noqa: E501
        """Delete job  # noqa: E501

        Delete job by specific Job identifier.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_jobs_jobid_delete(jobid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int jobid: Job identifier (required)
        :return: InlineResponse20010
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_jobs_jobid_delete_with_http_info(jobid, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_jobs_jobid_delete_with_http_info(jobid, **kwargs)  # noqa: E501
            return data

    def api_v2_jobs_jobid_delete_with_http_info(self, jobid, **kwargs):  # noqa: E501
        """Delete job  # noqa: E501

        Delete job by specific Job identifier.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_jobs_jobid_delete_with_http_info(jobid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int jobid: Job identifier (required)
        :return: InlineResponse20010
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['jobid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_jobs_jobid_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'jobid' is set
        if ('jobid' not in params or
                params['jobid'] is None):
            raise ValueError("Missing the required parameter `jobid` when calling `api_v2_jobs_jobid_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'jobid' in params:
            path_params['jobid'] = params['jobid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/jobs/{jobid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20010',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v2_jobs_jobid_files_get(self, jobid, **kwargs):  # noqa: E501
        """Show job files and directories  # noqa: E501

        Get job file and directory list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_jobs_jobid_files_get(jobid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int jobid: Job identifier (required)
        :param str type: List item type
        :param int offset: Result items offset
        :param int limit: Result items limit
        :param str search: Search keyword in item list
        :param bool details: Show more details (including LStat value)
        :return: InlineResponse20014
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_jobs_jobid_files_get_with_http_info(jobid, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_jobs_jobid_files_get_with_http_info(jobid, **kwargs)  # noqa: E501
            return data

    def api_v2_jobs_jobid_files_get_with_http_info(self, jobid, **kwargs):  # noqa: E501
        """Show job files and directories  # noqa: E501

        Get job file and directory list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_jobs_jobid_files_get_with_http_info(jobid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int jobid: Job identifier (required)
        :param str type: List item type
        :param int offset: Result items offset
        :param int limit: Result items limit
        :param str search: Search keyword in item list
        :param bool details: Show more details (including LStat value)
        :return: InlineResponse20014
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['jobid', 'type', 'offset', 'limit', 'search', 'details']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_jobs_jobid_files_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'jobid' is set
        if ('jobid' not in params or
                params['jobid'] is None):
            raise ValueError("Missing the required parameter `jobid` when calling `api_v2_jobs_jobid_files_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'jobid' in params:
            path_params['jobid'] = params['jobid']  # noqa: E501

        query_params = []
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'search' in params:
            query_params.append(('search', params['search']))  # noqa: E501
        if 'details' in params:
            query_params.append(('details', params['details']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/jobs/{jobid}/files', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20014',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v2_jobs_jobid_get(self, jobid, **kwargs):  # noqa: E501
        """Find job by JobId  # noqa: E501

        Get job by specific Job identifier.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_jobs_jobid_get(jobid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int jobid: Job identifier (required)
        :return: InlineResponse2009
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_jobs_jobid_get_with_http_info(jobid, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_jobs_jobid_get_with_http_info(jobid, **kwargs)  # noqa: E501
            return data

    def api_v2_jobs_jobid_get_with_http_info(self, jobid, **kwargs):  # noqa: E501
        """Find job by JobId  # noqa: E501

        Get job by specific Job identifier.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_jobs_jobid_get_with_http_info(jobid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int jobid: Job identifier (required)
        :return: InlineResponse2009
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['jobid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_jobs_jobid_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'jobid' is set
        if ('jobid' not in params or
                params['jobid'] is None):
            raise ValueError("Missing the required parameter `jobid` when calling `api_v2_jobs_jobid_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'jobid' in params:
            path_params['jobid'] = params['jobid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/jobs/{jobid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2009',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v2_jobs_jobid_show_get(self, jobid, **kwargs):  # noqa: E501
        """Show job  # noqa: E501

        Get 'show jobs' bconsole command output for specific job  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_jobs_jobid_show_get(jobid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int jobid: Job identifier (required)
        :param str output: Output format
        :return: InlineResponse20012
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_jobs_jobid_show_get_with_http_info(jobid, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_jobs_jobid_show_get_with_http_info(jobid, **kwargs)  # noqa: E501
            return data

    def api_v2_jobs_jobid_show_get_with_http_info(self, jobid, **kwargs):  # noqa: E501
        """Show job  # noqa: E501

        Get 'show jobs' bconsole command output for specific job  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_jobs_jobid_show_get_with_http_info(jobid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int jobid: Job identifier (required)
        :param str output: Output format
        :return: InlineResponse20012
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['jobid', 'output']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_jobs_jobid_show_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'jobid' is set
        if ('jobid' not in params or
                params['jobid'] is None):
            raise ValueError("Missing the required parameter `jobid` when calling `api_v2_jobs_jobid_show_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'jobid' in params:
            path_params['jobid'] = params['jobid']  # noqa: E501

        query_params = []
        if 'output' in params:
            query_params.append(('output', params['output']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/jobs/{jobid}/show', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20012',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v2_jobs_recent_jobname_get(self, jobname, clientid, client, filesetid, fileset, **kwargs):  # noqa: E501
        """Get most recent jobids for job to restore  # noqa: E501

        Useful for restore. Determines all single jobids required to restore job given in jobname. Besides jobname there are required only two parameters (client OR clientid) AND (fileset OR filesetid)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_jobs_recent_jobname_get(jobname, clientid, client, filesetid, fileset, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str jobname: Job name (required)
        :param int clientid: Client identifier (required)
        :param str client: Client name (can be used instead clientid) (required)
        :param int filesetid: FileSet identifier (required)
        :param str fileset: FileSet name (can be used instead filesetid) (required)
        :return: InlineResponse20017
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_jobs_recent_jobname_get_with_http_info(jobname, clientid, client, filesetid, fileset, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_jobs_recent_jobname_get_with_http_info(jobname, clientid, client, filesetid, fileset, **kwargs)  # noqa: E501
            return data

    def api_v2_jobs_recent_jobname_get_with_http_info(self, jobname, clientid, client, filesetid, fileset, **kwargs):  # noqa: E501
        """Get most recent jobids for job to restore  # noqa: E501

        Useful for restore. Determines all single jobids required to restore job given in jobname. Besides jobname there are required only two parameters (client OR clientid) AND (fileset OR filesetid)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_jobs_recent_jobname_get_with_http_info(jobname, clientid, client, filesetid, fileset, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str jobname: Job name (required)
        :param int clientid: Client identifier (required)
        :param str client: Client name (can be used instead clientid) (required)
        :param int filesetid: FileSet identifier (required)
        :param str fileset: FileSet name (can be used instead filesetid) (required)
        :return: InlineResponse20017
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['jobname', 'clientid', 'client', 'filesetid', 'fileset']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_jobs_recent_jobname_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'jobname' is set
        if ('jobname' not in params or
                params['jobname'] is None):
            raise ValueError("Missing the required parameter `jobname` when calling `api_v2_jobs_recent_jobname_get`")  # noqa: E501
        # verify the required parameter 'clientid' is set
        if ('clientid' not in params or
                params['clientid'] is None):
            raise ValueError("Missing the required parameter `clientid` when calling `api_v2_jobs_recent_jobname_get`")  # noqa: E501
        # verify the required parameter 'client' is set
        if ('client' not in params or
                params['client'] is None):
            raise ValueError("Missing the required parameter `client` when calling `api_v2_jobs_recent_jobname_get`")  # noqa: E501
        # verify the required parameter 'filesetid' is set
        if ('filesetid' not in params or
                params['filesetid'] is None):
            raise ValueError("Missing the required parameter `filesetid` when calling `api_v2_jobs_recent_jobname_get`")  # noqa: E501
        # verify the required parameter 'fileset' is set
        if ('fileset' not in params or
                params['fileset'] is None):
            raise ValueError("Missing the required parameter `fileset` when calling `api_v2_jobs_recent_jobname_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'jobname' in params:
            path_params['jobname'] = params['jobname']  # noqa: E501

        query_params = []
        if 'clientid' in params:
            query_params.append(('clientid', params['clientid']))  # noqa: E501
        if 'client' in params:
            query_params.append(('client', params['client']))  # noqa: E501
        if 'filesetid' in params:
            query_params.append(('filesetid', params['filesetid']))  # noqa: E501
        if 'fileset' in params:
            query_params.append(('fileset', params['fileset']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/jobs/recent/{jobname}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20017',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v2_jobs_resnames_get(self, **kwargs):  # noqa: E501
        """Job resource names  # noqa: E501

        Get job resource names (after applying console ACL)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_jobs_resnames_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int limit: Item limit
        :param str type: Job type (B - backup, R - restore, V - verify ...etc.)
        :return: InlineResponse20016
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_jobs_resnames_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_jobs_resnames_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_v2_jobs_resnames_get_with_http_info(self, **kwargs):  # noqa: E501
        """Job resource names  # noqa: E501

        Get job resource names (after applying console ACL)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_jobs_resnames_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int limit: Item limit
        :param str type: Job type (B - backup, R - restore, V - verify ...etc.)
        :return: InlineResponse20016
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['limit', 'type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_jobs_resnames_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/jobs/resnames', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20016',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v2_jobs_restore_post(self, clientid, client, where, **kwargs):  # noqa: E501
        """Restore job  # noqa: E501

        Restore backup job.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_jobs_restore_post(clientid, client, where, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int clientid: Client identifier (required)
        :param str client: Client name (can be used instead clientid) (required)
        :param str where: Where to restore files (required)
        :param int id: Job identifier (for full restore)
        :param str rpath: Rpath (restore path)
        :param bool full: Full restore all files
        :param str filesetid: FileSet identifier (for full restore)
        :param str fileset: FileSet (can be used instead of filesetid) (for full restore)
        :param int restoreclientid: Restore client identifier (can be used instead of restoreclient)
        :param str restoreclient: Restore client name (can be used instead of restoreclientid)
        :param str restorejob: Restore job name
        :param str strip_prefix: Strip prefix in restored paths
        :param str add_prefix: Add prefix to restored paths
        :param str add_suffix: Add suffix to restored paths
        :param str regex_where: Use regex to file relocation
        :return: InlineResponse20023
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_jobs_restore_post_with_http_info(clientid, client, where, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_jobs_restore_post_with_http_info(clientid, client, where, **kwargs)  # noqa: E501
            return data

    def api_v2_jobs_restore_post_with_http_info(self, clientid, client, where, **kwargs):  # noqa: E501
        """Restore job  # noqa: E501

        Restore backup job.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_jobs_restore_post_with_http_info(clientid, client, where, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int clientid: Client identifier (required)
        :param str client: Client name (can be used instead clientid) (required)
        :param str where: Where to restore files (required)
        :param int id: Job identifier (for full restore)
        :param str rpath: Rpath (restore path)
        :param bool full: Full restore all files
        :param str filesetid: FileSet identifier (for full restore)
        :param str fileset: FileSet (can be used instead of filesetid) (for full restore)
        :param int restoreclientid: Restore client identifier (can be used instead of restoreclient)
        :param str restoreclient: Restore client name (can be used instead of restoreclientid)
        :param str restorejob: Restore job name
        :param str strip_prefix: Strip prefix in restored paths
        :param str add_prefix: Add prefix to restored paths
        :param str add_suffix: Add suffix to restored paths
        :param str regex_where: Use regex to file relocation
        :return: InlineResponse20023
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['clientid', 'client', 'where', 'id', 'rpath', 'full', 'filesetid', 'fileset', 'restoreclientid', 'restoreclient', 'restorejob', 'strip_prefix', 'add_prefix', 'add_suffix', 'regex_where']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_jobs_restore_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'clientid' is set
        if ('clientid' not in params or
                params['clientid'] is None):
            raise ValueError("Missing the required parameter `clientid` when calling `api_v2_jobs_restore_post`")  # noqa: E501
        # verify the required parameter 'client' is set
        if ('client' not in params or
                params['client'] is None):
            raise ValueError("Missing the required parameter `client` when calling `api_v2_jobs_restore_post`")  # noqa: E501
        # verify the required parameter 'where' is set
        if ('where' not in params or
                params['where'] is None):
            raise ValueError("Missing the required parameter `where` when calling `api_v2_jobs_restore_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'id' in params:
            header_params['id'] = params['id']  # noqa: E501
        if 'clientid' in params:
            header_params['clientid'] = params['clientid']  # noqa: E501
        if 'client' in params:
            header_params['client'] = params['client']  # noqa: E501
        if 'where' in params:
            header_params['where'] = params['where']  # noqa: E501
        if 'rpath' in params:
            header_params['rpath'] = params['rpath']  # noqa: E501
        if 'full' in params:
            header_params['full'] = params['full']  # noqa: E501
        if 'filesetid' in params:
            header_params['filesetid'] = params['filesetid']  # noqa: E501
        if 'fileset' in params:
            header_params['fileset'] = params['fileset']  # noqa: E501
        if 'restoreclientid' in params:
            header_params['restoreclientid'] = params['restoreclientid']  # noqa: E501
        if 'restoreclient' in params:
            header_params['restoreclient'] = params['restoreclient']  # noqa: E501
        if 'restorejob' in params:
            header_params['restorejob'] = params['restorejob']  # noqa: E501
        if 'strip_prefix' in params:
            header_params['strip_prefix'] = params['strip_prefix']  # noqa: E501
        if 'add_prefix' in params:
            header_params['add_prefix'] = params['add_prefix']  # noqa: E501
        if 'add_suffix' in params:
            header_params['add_suffix'] = params['add_suffix']  # noqa: E501
        if 'regex_where' in params:
            header_params['regex_where'] = params['regex_where']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/jobs/restore', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20023',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v2_jobs_run_post(self, id, name, level, clientid, client, storageid, storage, poolid, pool, filesetid, fileset, **kwargs):  # noqa: E501
        """Run job  # noqa: E501

        Run job with specific parameters. There can be used (id OR name) and (clientid OR client)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_jobs_run_post(id, name, level, clientid, client, storageid, storage, poolid, pool, filesetid, fileset, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Job identifier (required)
        :param str name: Job name (can be used instead id) (required)
        :param str level: Job level (required)
        :param int clientid: Client identifier (required)
        :param str client: Client name (can be used instead clientid) (required)
        :param int storageid: Storage identifier (required)
        :param str storage: Storage name (can be used instead storageid) (required)
        :param int poolid: Pool identifier (required)
        :param str pool: Pool name (can be used instead poolid) (required)
        :param int filesetid: FileSet identifier (required)
        :param str fileset: FileSet name (can be used instead filesetid) (required)
        :param int priority: Job priority
        :param int accurate: Accurate mode, 1 if enabled, otherwise 0
        :param int jobid: Job identifier for verify job
        :param str verifyjob: Verify job name
        :return: InlineResponse20020
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_jobs_run_post_with_http_info(id, name, level, clientid, client, storageid, storage, poolid, pool, filesetid, fileset, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_jobs_run_post_with_http_info(id, name, level, clientid, client, storageid, storage, poolid, pool, filesetid, fileset, **kwargs)  # noqa: E501
            return data

    def api_v2_jobs_run_post_with_http_info(self, id, name, level, clientid, client, storageid, storage, poolid, pool, filesetid, fileset, **kwargs):  # noqa: E501
        """Run job  # noqa: E501

        Run job with specific parameters. There can be used (id OR name) and (clientid OR client)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_jobs_run_post_with_http_info(id, name, level, clientid, client, storageid, storage, poolid, pool, filesetid, fileset, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Job identifier (required)
        :param str name: Job name (can be used instead id) (required)
        :param str level: Job level (required)
        :param int clientid: Client identifier (required)
        :param str client: Client name (can be used instead clientid) (required)
        :param int storageid: Storage identifier (required)
        :param str storage: Storage name (can be used instead storageid) (required)
        :param int poolid: Pool identifier (required)
        :param str pool: Pool name (can be used instead poolid) (required)
        :param int filesetid: FileSet identifier (required)
        :param str fileset: FileSet name (can be used instead filesetid) (required)
        :param int priority: Job priority
        :param int accurate: Accurate mode, 1 if enabled, otherwise 0
        :param int jobid: Job identifier for verify job
        :param str verifyjob: Verify job name
        :return: InlineResponse20020
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'name', 'level', 'clientid', 'client', 'storageid', 'storage', 'poolid', 'pool', 'filesetid', 'fileset', 'priority', 'accurate', 'jobid', 'verifyjob']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_jobs_run_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `api_v2_jobs_run_post`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `api_v2_jobs_run_post`")  # noqa: E501
        # verify the required parameter 'level' is set
        if ('level' not in params or
                params['level'] is None):
            raise ValueError("Missing the required parameter `level` when calling `api_v2_jobs_run_post`")  # noqa: E501
        # verify the required parameter 'clientid' is set
        if ('clientid' not in params or
                params['clientid'] is None):
            raise ValueError("Missing the required parameter `clientid` when calling `api_v2_jobs_run_post`")  # noqa: E501
        # verify the required parameter 'client' is set
        if ('client' not in params or
                params['client'] is None):
            raise ValueError("Missing the required parameter `client` when calling `api_v2_jobs_run_post`")  # noqa: E501
        # verify the required parameter 'storageid' is set
        if ('storageid' not in params or
                params['storageid'] is None):
            raise ValueError("Missing the required parameter `storageid` when calling `api_v2_jobs_run_post`")  # noqa: E501
        # verify the required parameter 'storage' is set
        if ('storage' not in params or
                params['storage'] is None):
            raise ValueError("Missing the required parameter `storage` when calling `api_v2_jobs_run_post`")  # noqa: E501
        # verify the required parameter 'poolid' is set
        if ('poolid' not in params or
                params['poolid'] is None):
            raise ValueError("Missing the required parameter `poolid` when calling `api_v2_jobs_run_post`")  # noqa: E501
        # verify the required parameter 'pool' is set
        if ('pool' not in params or
                params['pool'] is None):
            raise ValueError("Missing the required parameter `pool` when calling `api_v2_jobs_run_post`")  # noqa: E501
        # verify the required parameter 'filesetid' is set
        if ('filesetid' not in params or
                params['filesetid'] is None):
            raise ValueError("Missing the required parameter `filesetid` when calling `api_v2_jobs_run_post`")  # noqa: E501
        # verify the required parameter 'fileset' is set
        if ('fileset' not in params or
                params['fileset'] is None):
            raise ValueError("Missing the required parameter `fileset` when calling `api_v2_jobs_run_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'id' in params:
            header_params['id'] = params['id']  # noqa: E501
        if 'name' in params:
            header_params['name'] = params['name']  # noqa: E501
        if 'level' in params:
            header_params['level'] = params['level']  # noqa: E501
        if 'clientid' in params:
            header_params['clientid'] = params['clientid']  # noqa: E501
        if 'client' in params:
            header_params['client'] = params['client']  # noqa: E501
        if 'storageid' in params:
            header_params['storageid'] = params['storageid']  # noqa: E501
        if 'storage' in params:
            header_params['storage'] = params['storage']  # noqa: E501
        if 'poolid' in params:
            header_params['poolid'] = params['poolid']  # noqa: E501
        if 'pool' in params:
            header_params['pool'] = params['pool']  # noqa: E501
        if 'filesetid' in params:
            header_params['filesetid'] = params['filesetid']  # noqa: E501
        if 'fileset' in params:
            header_params['fileset'] = params['fileset']  # noqa: E501
        if 'priority' in params:
            header_params['priority'] = params['priority']  # noqa: E501
        if 'accurate' in params:
            header_params['accurate'] = params['accurate']  # noqa: E501
        if 'jobid' in params:
            header_params['jobid'] = params['jobid']  # noqa: E501
        if 'verifyjob' in params:
            header_params['verifyjob'] = params['verifyjob']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/jobs/run', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20020',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v2_jobs_show_get(self, **kwargs):  # noqa: E501
        """Show jobs  # noqa: E501

        Get 'show jobs' bconsole command output  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_jobs_show_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Job name
        :param str output: Output format
        :return: InlineResponse20021
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_jobs_show_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_jobs_show_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_v2_jobs_show_get_with_http_info(self, **kwargs):  # noqa: E501
        """Show jobs  # noqa: E501

        Get 'show jobs' bconsole command output  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_jobs_show_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Job name
        :param str output: Output format
        :return: InlineResponse20021
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'output']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_jobs_show_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'output' in params:
            query_params.append(('output', params['output']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/jobs/show', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20021',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v2_jobs_totals_get(self, **kwargs):  # noqa: E501
        """Show job total bytes and files  # noqa: E501

        Get total number backed up bytes and files from all jobs. It works also with Console ACL.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_jobs_totals_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse20022
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_jobs_totals_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_jobs_totals_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_v2_jobs_totals_get_with_http_info(self, **kwargs):  # noqa: E501
        """Show job total bytes and files  # noqa: E501

        Get total number backed up bytes and files from all jobs. It works also with Console ACL.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_jobs_totals_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse20022
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_jobs_totals_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/jobs/totals', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20022',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
