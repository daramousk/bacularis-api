# coding: utf-8

"""
    Bacularis API

    This is the Bacularis API documentation.  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: marcin.haba@bacula.pl
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class Oauth2Api(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def api_v2_oauth2_clients_client_id_delete(self, client_id, **kwargs):  # noqa: E501
        """Delete OAuth2 client account  # noqa: E501

        Delete OAuth2 client account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_oauth2_clients_client_id_delete(client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id: Client identifier (OAuth2 Client ID) (required)
        :return: InlineResponse20085
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_oauth2_clients_client_id_delete_with_http_info(client_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_oauth2_clients_client_id_delete_with_http_info(client_id, **kwargs)  # noqa: E501
            return data

    def api_v2_oauth2_clients_client_id_delete_with_http_info(self, client_id, **kwargs):  # noqa: E501
        """Delete OAuth2 client account  # noqa: E501

        Delete OAuth2 client account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_oauth2_clients_client_id_delete_with_http_info(client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id: Client identifier (OAuth2 Client ID) (required)
        :return: InlineResponse20085
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['client_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_oauth2_clients_client_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `api_v2_oauth2_clients_client_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'client_id' in params:
            path_params['client_id'] = params['client_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/oauth2/clients/{client_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20085',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v2_oauth2_clients_client_id_get(self, client_id, **kwargs):  # noqa: E501
        """Specific OAuth2 client account config  # noqa: E501

        Get specific OAuth2 client account config  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_oauth2_clients_client_id_get(client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id: Client identifier (OAuth2 Client ID) (required)
        :return: InlineResponse20082
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_oauth2_clients_client_id_get_with_http_info(client_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_oauth2_clients_client_id_get_with_http_info(client_id, **kwargs)  # noqa: E501
            return data

    def api_v2_oauth2_clients_client_id_get_with_http_info(self, client_id, **kwargs):  # noqa: E501
        """Specific OAuth2 client account config  # noqa: E501

        Get specific OAuth2 client account config  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_oauth2_clients_client_id_get_with_http_info(client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id: Client identifier (OAuth2 Client ID) (required)
        :return: InlineResponse20082
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['client_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_oauth2_clients_client_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `api_v2_oauth2_clients_client_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'client_id' in params:
            path_params['client_id'] = params['client_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/oauth2/clients/{client_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20082',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v2_oauth2_clients_client_id_post(self, client_id, client_secret, redirect_uri, scope, bconsole_cfg_path, **kwargs):  # noqa: E501
        """Create OAuth2 client settings  # noqa: E501

        Create specific OAuth2 client settings  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_oauth2_clients_client_id_post(client_id, client_secret, redirect_uri, scope, bconsole_cfg_path, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id: Client identifier (OAuth2 Client ID) (required)
        :param str client_secret: OAuth2 client secret (required)
        :param str redirect_uri: OAuth2 redirect URI (OAuth2 callback) (required)
        :param str scope: Comma separated OAuth2 scopes (required)
        :param str bconsole_cfg_path: Bconsole config file path (required)
        :param str console: Director Console name to create dedicated bconsole.conf that is assigned to account. Parameter must be used together with 'director' parameter.
        :param str director: Director Name to create dedicated bconsole.conf that is assigned to account. Parameter must be used together with 'console' parameter.
        :param str name: OAuth2 client account name
        :return: InlineResponse20084
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_oauth2_clients_client_id_post_with_http_info(client_id, client_secret, redirect_uri, scope, bconsole_cfg_path, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_oauth2_clients_client_id_post_with_http_info(client_id, client_secret, redirect_uri, scope, bconsole_cfg_path, **kwargs)  # noqa: E501
            return data

    def api_v2_oauth2_clients_client_id_post_with_http_info(self, client_id, client_secret, redirect_uri, scope, bconsole_cfg_path, **kwargs):  # noqa: E501
        """Create OAuth2 client settings  # noqa: E501

        Create specific OAuth2 client settings  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_oauth2_clients_client_id_post_with_http_info(client_id, client_secret, redirect_uri, scope, bconsole_cfg_path, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id: Client identifier (OAuth2 Client ID) (required)
        :param str client_secret: OAuth2 client secret (required)
        :param str redirect_uri: OAuth2 redirect URI (OAuth2 callback) (required)
        :param str scope: Comma separated OAuth2 scopes (required)
        :param str bconsole_cfg_path: Bconsole config file path (required)
        :param str console: Director Console name to create dedicated bconsole.conf that is assigned to account. Parameter must be used together with 'director' parameter.
        :param str director: Director Name to create dedicated bconsole.conf that is assigned to account. Parameter must be used together with 'console' parameter.
        :param str name: OAuth2 client account name
        :return: InlineResponse20084
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['client_id', 'client_secret', 'redirect_uri', 'scope', 'bconsole_cfg_path', 'console', 'director', 'name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_oauth2_clients_client_id_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `api_v2_oauth2_clients_client_id_post`")  # noqa: E501
        # verify the required parameter 'client_secret' is set
        if ('client_secret' not in params or
                params['client_secret'] is None):
            raise ValueError("Missing the required parameter `client_secret` when calling `api_v2_oauth2_clients_client_id_post`")  # noqa: E501
        # verify the required parameter 'redirect_uri' is set
        if ('redirect_uri' not in params or
                params['redirect_uri'] is None):
            raise ValueError("Missing the required parameter `redirect_uri` when calling `api_v2_oauth2_clients_client_id_post`")  # noqa: E501
        # verify the required parameter 'scope' is set
        if ('scope' not in params or
                params['scope'] is None):
            raise ValueError("Missing the required parameter `scope` when calling `api_v2_oauth2_clients_client_id_post`")  # noqa: E501
        # verify the required parameter 'bconsole_cfg_path' is set
        if ('bconsole_cfg_path' not in params or
                params['bconsole_cfg_path'] is None):
            raise ValueError("Missing the required parameter `bconsole_cfg_path` when calling `api_v2_oauth2_clients_client_id_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'client_id' in params:
            path_params['client_id'] = params['client_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'client_secret' in params:
            header_params['client_secret'] = params['client_secret']  # noqa: E501
        if 'redirect_uri' in params:
            header_params['redirect_uri'] = params['redirect_uri']  # noqa: E501
        if 'scope' in params:
            header_params['scope'] = params['scope']  # noqa: E501
        if 'bconsole_cfg_path' in params:
            header_params['bconsole_cfg_path'] = params['bconsole_cfg_path']  # noqa: E501
        if 'console' in params:
            header_params['console'] = params['console']  # noqa: E501
        if 'director' in params:
            header_params['director'] = params['director']  # noqa: E501
        if 'name' in params:
            header_params['name'] = params['name']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/oauth2/clients/{client_id}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20084',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v2_oauth2_clients_client_id_put(self, client_id, client_secret, redirect_uri, scope, bconsole_cfg_path, **kwargs):  # noqa: E501
        """Set OAuth2 client settings  # noqa: E501

        Set specific OAuth2 client settings  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_oauth2_clients_client_id_put(client_id, client_secret, redirect_uri, scope, bconsole_cfg_path, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id: Client identifier (OAuth2 Client ID) (required)
        :param str client_secret: OAuth2 client secret (required)
        :param str redirect_uri: OAuth2 redirect URI (OAuth2 callback) (required)
        :param str scope: Comma separated OAuth2 scopes (required)
        :param str bconsole_cfg_path: Bconsole config file path (required)
        :param str console: Director Console name to create dedicated bconsole.conf that is assigned to account. Parameter must be used together with 'director' parameter.
        :param str director: Director Name to create dedicated bconsole.conf that is assigned to account. Parameter must be used together with 'console' parameter.
        :param str name: OAuth2 client account name
        :return: InlineResponse20083
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_oauth2_clients_client_id_put_with_http_info(client_id, client_secret, redirect_uri, scope, bconsole_cfg_path, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_oauth2_clients_client_id_put_with_http_info(client_id, client_secret, redirect_uri, scope, bconsole_cfg_path, **kwargs)  # noqa: E501
            return data

    def api_v2_oauth2_clients_client_id_put_with_http_info(self, client_id, client_secret, redirect_uri, scope, bconsole_cfg_path, **kwargs):  # noqa: E501
        """Set OAuth2 client settings  # noqa: E501

        Set specific OAuth2 client settings  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_oauth2_clients_client_id_put_with_http_info(client_id, client_secret, redirect_uri, scope, bconsole_cfg_path, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id: Client identifier (OAuth2 Client ID) (required)
        :param str client_secret: OAuth2 client secret (required)
        :param str redirect_uri: OAuth2 redirect URI (OAuth2 callback) (required)
        :param str scope: Comma separated OAuth2 scopes (required)
        :param str bconsole_cfg_path: Bconsole config file path (required)
        :param str console: Director Console name to create dedicated bconsole.conf that is assigned to account. Parameter must be used together with 'director' parameter.
        :param str director: Director Name to create dedicated bconsole.conf that is assigned to account. Parameter must be used together with 'console' parameter.
        :param str name: OAuth2 client account name
        :return: InlineResponse20083
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['client_id', 'client_secret', 'redirect_uri', 'scope', 'bconsole_cfg_path', 'console', 'director', 'name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_oauth2_clients_client_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `api_v2_oauth2_clients_client_id_put`")  # noqa: E501
        # verify the required parameter 'client_secret' is set
        if ('client_secret' not in params or
                params['client_secret'] is None):
            raise ValueError("Missing the required parameter `client_secret` when calling `api_v2_oauth2_clients_client_id_put`")  # noqa: E501
        # verify the required parameter 'redirect_uri' is set
        if ('redirect_uri' not in params or
                params['redirect_uri'] is None):
            raise ValueError("Missing the required parameter `redirect_uri` when calling `api_v2_oauth2_clients_client_id_put`")  # noqa: E501
        # verify the required parameter 'scope' is set
        if ('scope' not in params or
                params['scope'] is None):
            raise ValueError("Missing the required parameter `scope` when calling `api_v2_oauth2_clients_client_id_put`")  # noqa: E501
        # verify the required parameter 'bconsole_cfg_path' is set
        if ('bconsole_cfg_path' not in params or
                params['bconsole_cfg_path'] is None):
            raise ValueError("Missing the required parameter `bconsole_cfg_path` when calling `api_v2_oauth2_clients_client_id_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'client_id' in params:
            path_params['client_id'] = params['client_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'client_secret' in params:
            header_params['client_secret'] = params['client_secret']  # noqa: E501
        if 'redirect_uri' in params:
            header_params['redirect_uri'] = params['redirect_uri']  # noqa: E501
        if 'scope' in params:
            header_params['scope'] = params['scope']  # noqa: E501
        if 'bconsole_cfg_path' in params:
            header_params['bconsole_cfg_path'] = params['bconsole_cfg_path']  # noqa: E501
        if 'console' in params:
            header_params['console'] = params['console']  # noqa: E501
        if 'director' in params:
            header_params['director'] = params['director']  # noqa: E501
        if 'name' in params:
            header_params['name'] = params['name']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/oauth2/clients/{client_id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20083',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v2_oauth2_clients_get(self, **kwargs):  # noqa: E501
        """OAuth2 client account list  # noqa: E501

        Get OAuth2 client account list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_oauth2_clients_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse20081
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_oauth2_clients_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_oauth2_clients_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_v2_oauth2_clients_get_with_http_info(self, **kwargs):  # noqa: E501
        """OAuth2 client account list  # noqa: E501

        Get OAuth2 client account list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_oauth2_clients_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse20081
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_oauth2_clients_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/oauth2/clients', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20081',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
